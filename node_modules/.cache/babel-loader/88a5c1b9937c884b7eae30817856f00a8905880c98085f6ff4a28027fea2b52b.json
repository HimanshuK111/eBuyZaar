{"ast":null,"code":"import { SDK_VERSION, _isFirebaseServerApp, _getProvider, _registerComponent, registerVersion, getApp } from '@firebase/app';\nimport { ErrorFactory, isBrowserExtension, isMobileCordova, isReactNative, FirebaseError, querystring, isCloudflareWorker, isCloudWorkstation, getModularInstance, base64Decode, getUA, isIE, createSubscribe, deepEqual, updateEmulatorBanner, pingServer, querystringDecode, extractQuerystring, isEmpty, getExperimentalSetting, getDefaultEmulatorHost } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { __rest } from 'tslib';\nimport { Component } from '@firebase/component';\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An enum of factors that may be used for multifactor authentication.\n *\n * @public\n */\nconst FactorId = {\n  /** Phone as second factor */\n  PHONE: 'phone',\n  TOTP: 'totp'\n};\n/**\n * Enumeration of supported providers.\n *\n * @public\n */\nconst ProviderId = {\n  /** Facebook provider ID */\n  FACEBOOK: 'facebook.com',\n  /** GitHub provider ID */\n  GITHUB: 'github.com',\n  /** Google provider ID */\n  GOOGLE: 'google.com',\n  /** Password provider */\n  PASSWORD: 'password',\n  /** Phone provider */\n  PHONE: 'phone',\n  /** Twitter provider ID */\n  TWITTER: 'twitter.com'\n};\n/**\n * Enumeration of supported sign-in methods.\n *\n * @public\n */\nconst SignInMethod = {\n  /** Email link sign in method */\n  EMAIL_LINK: 'emailLink',\n  /** Email/password sign in method */\n  EMAIL_PASSWORD: 'password',\n  /** Facebook sign in method */\n  FACEBOOK: 'facebook.com',\n  /** GitHub sign in method */\n  GITHUB: 'github.com',\n  /** Google sign in method */\n  GOOGLE: 'google.com',\n  /** Phone sign in method */\n  PHONE: 'phone',\n  /** Twitter sign in method */\n  TWITTER: 'twitter.com'\n};\n/**\n * Enumeration of supported operation types.\n *\n * @public\n */\nconst OperationType = {\n  /** Operation involving linking an additional provider to an already signed-in user. */\n  LINK: 'link',\n  /** Operation involving using a provider to reauthenticate an already signed-in user. */\n  REAUTHENTICATE: 'reauthenticate',\n  /** Operation involving signing in a user. */\n  SIGN_IN: 'signIn'\n};\n/**\n * An enumeration of the possible email action types.\n *\n * @public\n */\nconst ActionCodeOperation = {\n  /** The email link sign-in action. */\n  EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n  /** The password reset action. */\n  PASSWORD_RESET: 'PASSWORD_RESET',\n  /** The email revocation action. */\n  RECOVER_EMAIL: 'RECOVER_EMAIL',\n  /** The revert second factor addition email action. */\n  REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n  /** The revert second factor addition email action. */\n  VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n  /** The email verification action. */\n  VERIFY_EMAIL: 'VERIFY_EMAIL'\n};\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _debugErrorMap() {\n  return {\n    [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\n    [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\n    [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.',\n    [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.',\n    [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.',\n    [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' + 'again.',\n    [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\n    [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\n    [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\n    [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\n    [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.',\n    [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.',\n    [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.',\n    [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\n    [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\n    [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '\"connectAuthEmulator()\" sooner.',\n    [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\n    [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\n    [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\n    [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.',\n    [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registered for the current project.',\n    [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" + \"if the user's token has been tampered with, or if the user isn't for \" + 'the project associated with this API key.',\n    [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n    [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.',\n    [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\n    [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.',\n    [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\n    [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\n    [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\n    [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\n    [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\n    [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\n    [\"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */]: 'The supplied auth credential is incorrect, malformed or has expired.',\n    [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\n    [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.',\n    [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.',\n    [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.',\n    [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.',\n    [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\n    [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\n    [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].',\n    [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\n    [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.',\n    [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\n    [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\n    [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\n    [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\n    [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.',\n    [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.',\n    [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\n    [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\n    [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\n    [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\n    [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.',\n    [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\n    [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\n    [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\n    [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\n    [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\n    [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\n    [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\n    [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\n    [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.',\n    [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n    [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n    [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\n    [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.',\n    [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.',\n    [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' + 'running on. \"location.protocol\" must be http, https or chrome-extension' + ' and web storage must be enabled.',\n    [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n    [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\n    [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\n    [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\n    [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\n    [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\n    [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\n    [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\n    [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\n    [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n    [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\n    [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\n    [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.',\n    [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.',\n    [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n    [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\n    [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\n    [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\n    [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\n    [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.',\n    [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\n    [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\n    [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\n    [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\n    [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\n    [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.',\n    [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\n    [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\n    [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\n    [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\n    [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\n    [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\n    [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\n    [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.',\n    [\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n    [\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: 'The password does not meet the requirements.',\n    [\"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */]: 'The provided Hosting link domain is not configured in Firebase Hosting or is not owned by ' + 'the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`).'\n  };\n}\nfunction _prodErrorMap() {\n  // We will include this one message in the prod error map since by the very\n  // nature of this error, developers will never be able to see the message\n  // using the debugErrorMap (which is installed during auth initialization).\n  return {\n    [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'\n  };\n}\n/**\n * A verbose error map with detailed descriptions for most error codes.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nconst debugErrorMap = _debugErrorMap;\n/**\n * A minimal error map with all verbose error messages stripped.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nconst prodErrorMap = _prodErrorMap;\nconst _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory('auth', 'Firebase', _prodErrorMap());\n/**\n * A map of potential `Auth` error codes, for easier comparison with errors\n * thrown by the SDK.\n *\n * @remarks\n * Note that you can't tree-shake individual keys\n * in the map, so by using the map you might substantially increase your\n * bundle size.\n *\n * @public\n */\nconst AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n  ARGUMENT_ERROR: 'auth/argument-error',\n  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n  APP_NOT_INSTALLED: 'auth/app-not-installed',\n  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n  CODE_EXPIRED: 'auth/code-expired',\n  CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n  CORS_UNSUPPORTED: 'auth/cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n  EMAIL_EXISTS: 'auth/email-already-in-use',\n  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n  EXPIRED_OOB_CODE: 'auth/expired-action-code',\n  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n  INTERNAL_ERROR: 'auth/internal-error',\n  INVALID_API_KEY: 'auth/invalid-api-key',\n  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n  INVALID_APP_ID: 'auth/invalid-app-id',\n  INVALID_AUTH: 'auth/invalid-user-token',\n  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n  INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n  INVALID_CODE: 'auth/invalid-verification-code',\n  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n  INVALID_EMAIL: 'auth/invalid-email',\n  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n  INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n  INVALID_OOB_CODE: 'auth/invalid-action-code',\n  INVALID_ORIGIN: 'auth/unauthorized-domain',\n  INVALID_PASSWORD: 'auth/wrong-password',\n  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n  INVALID_SENDER: 'auth/invalid-sender',\n  INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n  INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n  MFA_REQUIRED: 'auth/multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n  MISSING_CODE: 'auth/missing-verification-code',\n  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n  MISSING_IFRAME_START: 'auth/missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n  MISSING_SESSION_INFO: 'auth/missing-verification-id',\n  MODULE_DESTROYED: 'auth/app-deleted',\n  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n  NULL_USER: 'auth/null-user',\n  NO_AUTH_EVENT: 'auth/no-auth-event',\n  NO_SUCH_PROVIDER: 'auth/no-such-provider',\n  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n  POPUP_BLOCKED: 'auth/popup-blocked',\n  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n  QUOTA_EXCEEDED: 'auth/quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n  REJECTED_CREDENTIAL: 'auth/rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n  TIMEOUT: 'auth/timeout',\n  TOKEN_EXPIRED: 'auth/user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n  UNVERIFIED_EMAIL: 'auth/unverified-email',\n  USER_CANCELLED: 'auth/user-cancelled',\n  USER_DELETED: 'auth/user-not-found',\n  USER_DISABLED: 'auth/user-disabled',\n  USER_MISMATCH: 'auth/user-mismatch',\n  USER_SIGNED_OUT: 'auth/user-signed-out',\n  WEAK_PASSWORD: 'auth/weak-password',\n  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n  ALREADY_INITIALIZED: 'auth/already-initialized',\n  RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n  MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n  INVALID_REQ_TYPE: 'auth/invalid-req-type',\n  INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'\n};\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logClient = new Logger('@firebase/auth');\nfunction _logWarn(msg, ...args) {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\nfunction _logError(msg, ...args) {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _fail(authOrCode, ...rest) {\n  throw createErrorInternal(authOrCode, ...rest);\n}\nfunction _createError(authOrCode, ...rest) {\n  return createErrorInternal(authOrCode, ...rest);\n}\nfunction _errorWithCustomMessage(auth, code, message) {\n  const errorMap = Object.assign(Object.assign({}, prodErrorMap()), {\n    [code]: message\n  });\n  const factory = new ErrorFactory('auth', 'Firebase', errorMap);\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\nfunction _serverAppCurrentUserOperationNotSupportedError(auth) {\n  return _errorWithCustomMessage(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');\n}\nfunction _assertInstanceOf(auth, object, instance) {\n  const constructorInstance = instance;\n  if (!(object instanceof constructorInstance)) {\n    if (constructorInstance.name !== object.constructor.name) {\n      _fail(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    }\n    throw _errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);\n  }\n}\nfunction createErrorInternal(authOrCode, ...rest) {\n  if (typeof authOrCode !== 'string') {\n    const code = rest[0];\n    const fullParams = [...rest.slice(1)];\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n    return authOrCode._errorFactory.create(code, ...fullParams);\n  }\n  return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n}\nfunction _assert(assertion, authOrCode, ...rest) {\n  if (!assertion) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n}\n/**\n * Unconditionally fails, throwing an internal error with the given message.\n *\n * @param failure type of failure encountered\n * @throws Error\n */\nfunction debugFail(failure) {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message = `INTERNAL ASSERTION FAILED: ` + failure;\n  _logError(message);\n  // NOTE: We don't use FirebaseError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * @param assertion\n * @param message\n */\nfunction debugAssert(assertion, message) {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _getCurrentUrl() {\n  var _a;\n  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || '';\n}\nfunction _isHttpOrHttps() {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\nfunction _getCurrentScheme() {\n  var _a;\n  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Determine whether the browser is working online\n */\nfunction _isOnline() {\n  if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (\n  // Apply only for traditional web apps and Chrome extensions.\n  // This is especially true for Cordova apps which have unreliable\n  // navigator.onLine behavior unless cordova-plugin-network-information is\n  // installed which overwrites the native navigator.onLine value and\n  // defines navigator.connection.\n  _isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)) {\n    return navigator.onLine;\n  }\n  // If we can't determine the state, assume it is online.\n  return true;\n}\nfunction _getUserLanguage() {\n  if (typeof navigator === 'undefined') {\n    return null;\n  }\n  const navigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language ||\n    // Couldn't determine language.\n    null\n  );\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A structure to help pick between a range of long and short delay durations\n * depending on the current environment. In general, the long delay is used for\n * mobile environments whereas short delays are used for desktop environments.\n */\nclass Delay {\n  constructor(shortDelay, longDelay) {\n    this.shortDelay = shortDelay;\n    this.longDelay = longDelay;\n    // Internal error when improperly initialized.\n    debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n    this.isMobile = isMobileCordova() || isReactNative();\n  }\n  get() {\n    if (!_isOnline()) {\n      // Pick the shorter timeout.\n      return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n    }\n    // If running in a mobile environment, return the long delay, otherwise\n    // return the short delay.\n    // This could be improved in the future to dynamically change based on other\n    // variables instead of just reading the current environment.\n    return this.isMobile ? this.longDelay : this.shortDelay;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _emulatorUrl(config, path) {\n  debugAssert(config.emulator, 'Emulator should always be set here');\n  const {\n    url\n  } = config.emulator;\n  if (!path) {\n    return url;\n  }\n  return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass FetchProvider {\n  static initialize(fetchImpl, headersImpl, responseImpl) {\n    this.fetchImpl = fetchImpl;\n    if (headersImpl) {\n      this.headersImpl = headersImpl;\n    }\n    if (responseImpl) {\n      this.responseImpl = responseImpl;\n    }\n  }\n  static fetch() {\n    if (this.fetchImpl) {\n      return this.fetchImpl;\n    }\n    if (typeof self !== 'undefined' && 'fetch' in self) {\n      return self.fetch;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n      return globalThis.fetch;\n    }\n    if (typeof fetch !== 'undefined') {\n      return fetch;\n    }\n    debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n  }\n  static headers() {\n    if (this.headersImpl) {\n      return this.headersImpl;\n    }\n    if (typeof self !== 'undefined' && 'Headers' in self) {\n      return self.Headers;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n      return globalThis.Headers;\n    }\n    if (typeof Headers !== 'undefined') {\n      return Headers;\n    }\n    debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n  }\n  static response() {\n    if (this.responseImpl) {\n      return this.responseImpl;\n    }\n    if (typeof self !== 'undefined' && 'Response' in self) {\n      return self.Response;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.Response) {\n      return globalThis.Response;\n    }\n    if (typeof Response !== 'undefined') {\n      return Response;\n    }\n    debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Map from errors returned by the server to errors to developer visible errors\n */\nconst SERVER_ERROR_MAP = {\n  // Custom token errors.\n  [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\n\n  // This can only happen if the SDK sends a bad request.\n  [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n  // Create Auth URI errors.\n  [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\n\n  // This can only happen if the SDK sends a bad request.\n  [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n  // Sign in with email and password errors (some apply to sign up too).\n  [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\n\n  // This can only happen if the SDK sends a bad request.\n  [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\n\n  // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n  // invalid.\n  [\"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n\n  // Sign up with email and password errors.\n  [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\n  [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\n\n  // Verify assertion for sign in with credential errors:\n  [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n  [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n  [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\n\n  // This can only happen if the SDK sends a bad request.\n  [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n  // Send Password reset email errors:\n  [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\n  [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n  [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\n  [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\n\n  // This can only happen if the SDK sends a bad request.\n  [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n  // Operations that require ID token in request:\n  [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\n  [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\n  [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n  [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n\n  // Other errors.\n  [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n  [\"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,\n\n  // Phone Auth related errors.\n  [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\n  [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\n  [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n  [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\n  [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\n\n  // Other action code errors when additional settings passed.\n  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n  // This is OK as this error will be caught by client side validation.\n  [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\n  [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\n\n  // getProjectConfig errors when clientId is passed.\n  [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\n\n  // User actions (sign-up or deletion) disabled errors.\n  [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\n\n  // Multi factor related errors.\n  [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\n  [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\n  [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\n  [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\n  [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\n  [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\n\n  // Blocking functions related errors.\n  [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n  // Recaptcha related errors.\n  [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\n  [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\n  [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\n  [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\n  [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\n  [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\n  [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\n  [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\n};\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst CookieAuthProxiedEndpoints = [\"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, \"/v1/token\" /* Endpoint.TOKEN */];\nconst DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\nfunction _addTidIfNecessary(auth, request) {\n  if (auth.tenantId && !request.tenantId) {\n    return Object.assign(Object.assign({}, request), {\n      tenantId: auth.tenantId\n    });\n  }\n  return request;\n}\nasync function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\n  return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n    let body = {};\n    let params = {};\n    if (request) {\n      if (method === \"GET\" /* HttpMethod.GET */) {\n        params = request;\n      } else {\n        body = {\n          body: JSON.stringify(request)\n        };\n      }\n    }\n    const query = querystring(Object.assign({\n      key: auth.config.apiKey\n    }, params)).slice(1);\n    const headers = await auth._getAdditionalHeaders();\n    headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n    if (auth.languageCode) {\n      headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n    }\n    const fetchArgs = Object.assign({\n      method,\n      headers\n    }, body);\n    /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\n       problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\n       'RequestInitializerDict' is not implemented.\"\n       https://github.com/cloudflare/next-on-pages/issues/487 */\n    if (!isCloudflareWorker()) {\n      fetchArgs.referrerPolicy = 'no-referrer';\n    }\n    if (auth.emulatorConfig && isCloudWorkstation(auth.emulatorConfig.host)) {\n      fetchArgs.credentials = 'include';\n    }\n    return FetchProvider.fetch()(await _getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);\n  });\n}\nasync function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n  auth._canInitEmulator = false;\n  const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);\n  try {\n    const networkTimeout = new NetworkTimeout(auth);\n    const response = await Promise.race([fetchFn(), networkTimeout.promise]);\n    // If we've reached this point, the fetch succeeded and the networkTimeout\n    // didn't throw; clear the network timeout delay so that Node won't hang\n    networkTimeout.clearNetworkTimeout();\n    const json = await response.json();\n    if ('needConfirmation' in json) {\n      throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n    }\n    if (response.ok && !('errorMessage' in json)) {\n      return json;\n    } else {\n      const errorMessage = response.ok ? json.errorMessage : json.error.message;\n      const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n      if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\n        throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n      } else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\n        throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n      } else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\n        throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n      }\n      const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, '-');\n      if (serverErrorMessage) {\n        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n      } else {\n        _fail(auth, authError);\n      }\n    }\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      throw e;\n    }\n    // Changing this to a different error code will log user out when there is a network error\n    // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n    // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n    _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, {\n      'message': String(e)\n    });\n  }\n}\nasync function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\n  const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);\n  if ('mfaPendingCredential' in serverResponse) {\n    _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n      _serverResponse: serverResponse\n    });\n  }\n  return serverResponse;\n}\nasync function _getFinalTarget(auth, host, path, query) {\n  const base = `${host}${path}?${query}`;\n  const authInternal = auth;\n  const finalTarget = authInternal.config.emulator ? _emulatorUrl(auth.config, base) : `${auth.config.apiScheme}://${base}`;\n  // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,\n  // saving the idToken and refreshToken into cookies, and then redacting the refreshToken\n  // from the response\n  if (CookieAuthProxiedEndpoints.includes(path)) {\n    // Persistence manager is async, we need to await it. We can't just wait for auth initialized\n    // here since auth initialization calls this function.\n    await authInternal._persistenceManagerAvailable;\n    if (authInternal._getPersistenceType() === \"COOKIE\" /* PersistenceType.COOKIE */) {\n      const cookiePersistence = authInternal._getPersistence();\n      return cookiePersistence._getFinalTarget(finalTarget).toString();\n    }\n  }\n  return finalTarget;\n}\nfunction _parseEnforcementState(enforcementStateStr) {\n  switch (enforcementStateStr) {\n    case 'ENFORCE':\n      return \"ENFORCE\" /* EnforcementState.ENFORCE */;\n    case 'AUDIT':\n      return \"AUDIT\" /* EnforcementState.AUDIT */;\n    case 'OFF':\n      return \"OFF\" /* EnforcementState.OFF */;\n    default:\n      return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\n  }\n}\nclass NetworkTimeout {\n  clearNetworkTimeout() {\n    clearTimeout(this.timer);\n  }\n  constructor(auth) {\n    this.auth = auth;\n    // Node timers and browser timers are fundamentally incompatible, but we\n    // don't care about the value here\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.timer = null;\n    this.promise = new Promise((_, reject) => {\n      this.timer = setTimeout(() => {\n        return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n      }, DEFAULT_API_TIMEOUT_MS.get());\n    });\n  }\n}\nfunction _makeTaggedError(auth, code, response) {\n  const errorParams = {\n    appName: auth.name\n  };\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n  const error = _createError(auth, code, errorParams);\n  // We know customData is defined on error because errorParams is defined\n  error.customData._tokenResponse = response;\n  return error;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isV2(grecaptcha) {\n  return grecaptcha !== undefined && grecaptcha.getResponse !== undefined;\n}\nfunction isEnterprise(grecaptcha) {\n  return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;\n}\nclass RecaptchaConfig {\n  constructor(response) {\n    /**\n     * The reCAPTCHA site key.\n     */\n    this.siteKey = '';\n    /**\n     * The list of providers and their enablement status for reCAPTCHA Enterprise.\n     */\n    this.recaptchaEnforcementState = [];\n    if (response.recaptchaKey === undefined) {\n      throw new Error('recaptchaKey undefined');\n    }\n    // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n    this.siteKey = response.recaptchaKey.split('/')[3];\n    this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n  }\n  /**\n   * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n   *\n   * @param providerStr - The provider whose enforcement state is to be returned.\n   * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n   */\n  getProviderEnforcementState(providerStr) {\n    if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n      return null;\n    }\n    for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n      if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n        return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n      }\n    }\n    return null;\n  }\n  /**\n   * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n   *\n   * @param providerStr - The provider whose enablement state is to be returned.\n   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n   */\n  isProviderEnabled(providerStr) {\n    return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" /* EnforcementState.ENFORCE */ || this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */;\n  }\n  /**\n   * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise\n   * returns false.\n   *\n   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.\n   */\n  isAnyProviderEnabled() {\n    return this.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) || this.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function getRecaptchaParams(auth) {\n  return (await _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '';\n}\nasync function getRecaptchaConfig(auth, request) {\n  return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function deleteAccount(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\n}\nasync function deleteLinkedAccounts(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n}\nasync function getAccountInfo(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction utcTimestampToDateString(utcTimestamp) {\n  if (!utcTimestamp) {\n    return undefined;\n  }\n  try {\n    // Convert to date object.\n    const date = new Date(Number(utcTimestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nfunction getIdToken(user, forceRefresh = false) {\n  return getModularInstance(user).getIdToken(forceRefresh);\n}\n/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nasync function getIdTokenResult(user, forceRefresh = false) {\n  const userInternal = getModularInstance(user);\n  const token = await userInternal.getIdToken(forceRefresh);\n  const claims = _parseToken(token);\n  _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\n  const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];\n  return {\n    claims,\n    token,\n    authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n    issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n    expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n    signInProvider: signInProvider || null,\n    signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null\n  };\n}\nfunction secondsStringToMilliseconds(seconds) {\n  return Number(seconds) * 1000;\n}\nfunction _parseToken(token) {\n  const [algorithm, payload, signature] = token.split('.');\n  if (algorithm === undefined || payload === undefined || signature === undefined) {\n    _logError('JWT malformed, contained fewer than 3 sections');\n    return null;\n  }\n  try {\n    const decoded = base64Decode(payload);\n    if (!decoded) {\n      _logError('Failed to decode base64 JWT payload');\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError('Caught error parsing JWT payload as JSON', e === null || e === void 0 ? void 0 : e.toString());\n    return null;\n  }\n}\n/**\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n */\nfunction _tokenExpiresIn(token) {\n  const parsedToken = _parseToken(token);\n  _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\n  if (bypassAuthState) {\n    return promise;\n  }\n  try {\n    return await promise;\n  } catch (e) {\n    if (e instanceof FirebaseError && isUserInvalidated(e)) {\n      if (user.auth.currentUser === user) {\n        await user.auth.signOut();\n      }\n    }\n    throw e;\n  }\n}\nfunction isUserInvalidated({\n  code\n}) {\n  return code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` || code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ProactiveRefresh {\n  constructor(user) {\n    this.user = user;\n    this.isRunning = false;\n    // Node timers and browser timers return fundamentally different types.\n    // We don't actually care what the value is but TS won't accept unknown and\n    // we can't cast properly in both environments.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.timerId = null;\n    this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n  }\n  _start() {\n    if (this.isRunning) {\n      return;\n    }\n    this.isRunning = true;\n    this.schedule();\n  }\n  _stop() {\n    if (!this.isRunning) {\n      return;\n    }\n    this.isRunning = false;\n    if (this.timerId !== null) {\n      clearTimeout(this.timerId);\n    }\n  }\n  getInterval(wasError) {\n    var _a;\n    if (wasError) {\n      const interval = this.errorBackoff;\n      this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n      return interval;\n    } else {\n      // Reset the error backoff\n      this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n      const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;\n      const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n      return Math.max(0, interval);\n    }\n  }\n  schedule(wasError = false) {\n    if (!this.isRunning) {\n      // Just in case...\n      return;\n    }\n    const interval = this.getInterval(wasError);\n    this.timerId = setTimeout(async () => {\n      await this.iteration();\n    }, interval);\n  }\n  async iteration() {\n    try {\n      await this.user.getIdToken(true);\n    } catch (e) {\n      // Only retry on network errors\n      if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n        this.schedule(/* wasError */true);\n      }\n      return;\n    }\n    this.schedule();\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass UserMetadata {\n  constructor(createdAt, lastLoginAt) {\n    this.createdAt = createdAt;\n    this.lastLoginAt = lastLoginAt;\n    this._initializeTime();\n  }\n  _initializeTime() {\n    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n    this.creationTime = utcTimestampToDateString(this.createdAt);\n  }\n  _copy(metadata) {\n    this.createdAt = metadata.createdAt;\n    this.lastLoginAt = metadata.lastLoginAt;\n    this._initializeTime();\n  }\n  toJSON() {\n    return {\n      createdAt: this.createdAt,\n      lastLoginAt: this.lastLoginAt\n    };\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function _reloadWithoutSaving(user) {\n  var _a;\n  const auth = user.auth;\n  const idToken = await user.getIdToken();\n  const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {\n    idToken\n  }));\n  _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  const coreAccount = response.users[0];\n  user._notifyReloadListener(coreAccount);\n  const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];\n  const providerData = mergeProviderData(user.providerData, newProviderData);\n  // Preserves the non-nonymous status of the stored user, even if no more\n  // credentials (federated or email/password) are linked to the user. If\n  // the user was previously anonymous, then use provider data to update.\n  // On the other hand, if it was not anonymous before, it should never be\n  // considered anonymous now.\n  const oldIsAnonymous = user.isAnonymous;\n  const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\n  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n  const updates = {\n    uid: coreAccount.localId,\n    displayName: coreAccount.displayName || null,\n    photoURL: coreAccount.photoUrl || null,\n    email: coreAccount.email || null,\n    emailVerified: coreAccount.emailVerified || false,\n    phoneNumber: coreAccount.phoneNumber || null,\n    tenantId: coreAccount.tenantId || null,\n    providerData,\n    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n    isAnonymous\n  };\n  Object.assign(user, updates);\n}\n/**\n * Reloads user account data, if signed in.\n *\n * @param user - The user.\n *\n * @public\n */\nasync function reload(user) {\n  const userInternal = getModularInstance(user);\n  await _reloadWithoutSaving(userInternal);\n  // Even though the current user hasn't changed, update\n  // current user will trigger a persistence update w/ the\n  // new info.\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  userInternal.auth._notifyListenersIfCurrent(userInternal);\n}\nfunction mergeProviderData(original, newData) {\n  const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\n  return [...deduped, ...newData];\n}\nfunction extractProviderData(providers) {\n  return providers.map(_a => {\n    var {\n        providerId\n      } = _a,\n      provider = __rest(_a, [\"providerId\"]);\n    return {\n      providerId,\n      uid: provider.rawId || '',\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function requestStsToken(auth, refreshToken) {\n  const response = await _performFetchWithErrorHandling(auth, {}, async () => {\n    const body = querystring({\n      'grant_type': 'refresh_token',\n      'refresh_token': refreshToken\n    }).slice(1);\n    const {\n      tokenApiHost,\n      apiKey\n    } = auth.config;\n    const url = await _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\n    const headers = await auth._getAdditionalHeaders();\n    headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n    return FetchProvider.fetch()(url, {\n      method: \"POST\" /* HttpMethod.POST */,\n      headers,\n      body\n    });\n  });\n  // The response comes back in snake_case. Convert to camel:\n  return {\n    accessToken: response.access_token,\n    expiresIn: response.expires_in,\n    refreshToken: response.refresh_token\n  };\n}\nasync function revokeToken(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nclass StsTokenManager {\n  constructor() {\n    this.refreshToken = null;\n    this.accessToken = null;\n    this.expirationTime = null;\n  }\n  get isExpired() {\n    return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;\n  }\n  updateFromServerResponse(response) {\n    _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n    this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n  }\n  updateFromIdToken(idToken) {\n    _assert(idToken.length !== 0, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const expiresIn = _tokenExpiresIn(idToken);\n    this.updateTokensAndExpiration(idToken, null, expiresIn);\n  }\n  async getToken(auth, forceRefresh = false) {\n    if (!forceRefresh && this.accessToken && !this.isExpired) {\n      return this.accessToken;\n    }\n    _assert(this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n    if (this.refreshToken) {\n      await this.refresh(auth, this.refreshToken);\n      return this.accessToken;\n    }\n    return null;\n  }\n  clearRefreshToken() {\n    this.refreshToken = null;\n  }\n  async refresh(auth, oldToken) {\n    const {\n      accessToken,\n      refreshToken,\n      expiresIn\n    } = await requestStsToken(auth, oldToken);\n    this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n  }\n  updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n    this.refreshToken = refreshToken || null;\n    this.accessToken = accessToken || null;\n    this.expirationTime = Date.now() + expiresInSec * 1000;\n  }\n  static fromJSON(appName, object) {\n    const {\n      refreshToken,\n      accessToken,\n      expirationTime\n    } = object;\n    const manager = new StsTokenManager();\n    if (refreshToken) {\n      _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n        appName\n      });\n      manager.refreshToken = refreshToken;\n    }\n    if (accessToken) {\n      _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n        appName\n      });\n      manager.accessToken = accessToken;\n    }\n    if (expirationTime) {\n      _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n        appName\n      });\n      manager.expirationTime = expirationTime;\n    }\n    return manager;\n  }\n  toJSON() {\n    return {\n      refreshToken: this.refreshToken,\n      accessToken: this.accessToken,\n      expirationTime: this.expirationTime\n    };\n  }\n  _assign(stsTokenManager) {\n    this.accessToken = stsTokenManager.accessToken;\n    this.refreshToken = stsTokenManager.refreshToken;\n    this.expirationTime = stsTokenManager.expirationTime;\n  }\n  _clone() {\n    return Object.assign(new StsTokenManager(), this.toJSON());\n  }\n  _performRefresh() {\n    return debugFail('not implemented');\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction assertStringOrUndefined(assertion, appName) {\n  _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n    appName\n  });\n}\nclass UserImpl {\n  constructor(_a) {\n    var {\n        uid,\n        auth,\n        stsTokenManager\n      } = _a,\n      opt = __rest(_a, [\"uid\", \"auth\", \"stsTokenManager\"]);\n    // For the user object, provider is always Firebase.\n    this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n    this.proactiveRefresh = new ProactiveRefresh(this);\n    this.reloadUserInfo = null;\n    this.reloadListener = null;\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? [...opt.providerData] : [];\n    this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n  }\n  async getIdToken(forceRefresh) {\n    const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n    _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    if (this.accessToken !== accessToken) {\n      this.accessToken = accessToken;\n      await this.auth._persistUserIfCurrent(this);\n      this.auth._notifyListenersIfCurrent(this);\n    }\n    return accessToken;\n  }\n  getIdTokenResult(forceRefresh) {\n    return getIdTokenResult(this, forceRefresh);\n  }\n  reload() {\n    return reload(this);\n  }\n  _assign(user) {\n    if (this === user) {\n      return;\n    }\n    _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    this.displayName = user.displayName;\n    this.photoURL = user.photoURL;\n    this.email = user.email;\n    this.emailVerified = user.emailVerified;\n    this.phoneNumber = user.phoneNumber;\n    this.isAnonymous = user.isAnonymous;\n    this.tenantId = user.tenantId;\n    this.providerData = user.providerData.map(userInfo => Object.assign({}, userInfo));\n    this.metadata._copy(user.metadata);\n    this.stsTokenManager._assign(user.stsTokenManager);\n  }\n  _clone(auth) {\n    const newUser = new UserImpl(Object.assign(Object.assign({}, this), {\n      auth,\n      stsTokenManager: this.stsTokenManager._clone()\n    }));\n    newUser.metadata._copy(this.metadata);\n    return newUser;\n  }\n  _onReload(callback) {\n    // There should only ever be one listener, and that is a single instance of MultiFactorUser\n    _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    this.reloadListener = callback;\n    if (this.reloadUserInfo) {\n      this._notifyReloadListener(this.reloadUserInfo);\n      this.reloadUserInfo = null;\n    }\n  }\n  _notifyReloadListener(userInfo) {\n    if (this.reloadListener) {\n      this.reloadListener(userInfo);\n    } else {\n      // If no listener is subscribed yet, save the result so it's available when they do subscribe\n      this.reloadUserInfo = userInfo;\n    }\n  }\n  _startProactiveRefresh() {\n    this.proactiveRefresh._start();\n  }\n  _stopProactiveRefresh() {\n    this.proactiveRefresh._stop();\n  }\n  async _updateTokensIfNecessary(response, reload = false) {\n    let tokensRefreshed = false;\n    if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n      this.stsTokenManager.updateFromServerResponse(response);\n      tokensRefreshed = true;\n    }\n    if (reload) {\n      await _reloadWithoutSaving(this);\n    }\n    await this.auth._persistUserIfCurrent(this);\n    if (tokensRefreshed) {\n      this.auth._notifyListenersIfCurrent(this);\n    }\n  }\n  async delete() {\n    if (_isFirebaseServerApp(this.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));\n    }\n    const idToken = await this.getIdToken();\n    await _logoutIfInvalidated(this, deleteAccount(this.auth, {\n      idToken\n    }));\n    this.stsTokenManager.clearRefreshToken();\n    // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n    //       cancels pending actions...\n    return this.auth.signOut();\n  }\n  toJSON() {\n    return Object.assign(Object.assign({\n      uid: this.uid,\n      email: this.email || undefined,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName || undefined,\n      isAnonymous: this.isAnonymous,\n      photoURL: this.photoURL || undefined,\n      phoneNumber: this.phoneNumber || undefined,\n      tenantId: this.tenantId || undefined,\n      providerData: this.providerData.map(userInfo => Object.assign({}, userInfo)),\n      stsTokenManager: this.stsTokenManager.toJSON(),\n      // Redirect event ID must be maintained in case there is a pending\n      // redirect event.\n      _redirectEventId: this._redirectEventId\n    }, this.metadata.toJSON()), {\n      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n      apiKey: this.auth.config.apiKey,\n      appName: this.auth.name\n    });\n  }\n  get refreshToken() {\n    return this.stsTokenManager.refreshToken || '';\n  }\n  static _fromJSON(auth, object) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;\n    const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;\n    const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;\n    const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;\n    const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;\n    const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;\n    const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;\n    const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;\n    const {\n      uid,\n      emailVerified,\n      isAnonymous,\n      providerData,\n      stsTokenManager: plainObjectTokenManager\n    } = object;\n    _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n    _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    assertStringOrUndefined(displayName, auth.name);\n    assertStringOrUndefined(email, auth.name);\n    _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    assertStringOrUndefined(phoneNumber, auth.name);\n    assertStringOrUndefined(photoURL, auth.name);\n    assertStringOrUndefined(tenantId, auth.name);\n    assertStringOrUndefined(_redirectEventId, auth.name);\n    assertStringOrUndefined(createdAt, auth.name);\n    assertStringOrUndefined(lastLoginAt, auth.name);\n    const user = new UserImpl({\n      uid,\n      auth,\n      email,\n      emailVerified,\n      displayName,\n      isAnonymous,\n      photoURL,\n      phoneNumber,\n      tenantId,\n      stsTokenManager,\n      createdAt,\n      lastLoginAt\n    });\n    if (providerData && Array.isArray(providerData)) {\n      user.providerData = providerData.map(userInfo => Object.assign({}, userInfo));\n    }\n    if (_redirectEventId) {\n      user._redirectEventId = _redirectEventId;\n    }\n    return user;\n  }\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromServerResponse(idTokenResponse);\n    // Initialize the Firebase Auth user.\n    const user = new UserImpl({\n      uid: idTokenResponse.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n    // Updates the user info and data and resolves with a user instance.\n    await _reloadWithoutSaving(user);\n    return user;\n  }\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromGetAccountInfoResponse(auth, response, idToken) {\n    const coreAccount = response.users[0];\n    _assert(coreAccount.localId !== undefined, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];\n    const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromIdToken(idToken);\n    // Initialize the Firebase Auth user.\n    const user = new UserImpl({\n      uid: coreAccount.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n    // update the user with data from the GetAccountInfo response.\n    const updates = {\n      uid: coreAccount.localId,\n      displayName: coreAccount.displayName || null,\n      photoURL: coreAccount.photoUrl || null,\n      email: coreAccount.email || null,\n      emailVerified: coreAccount.emailVerified || false,\n      phoneNumber: coreAccount.phoneNumber || null,\n      tenantId: coreAccount.tenantId || null,\n      providerData,\n      metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n      isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length)\n    };\n    Object.assign(user, updates);\n    return user;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst instanceCache = new Map();\nfunction _getInstance(cls) {\n  debugAssert(cls instanceof Function, 'Expected a class definition');\n  let instance = instanceCache.get(cls);\n  if (instance) {\n    debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n    return instance;\n  }\n  instance = new cls();\n  instanceCache.set(cls, instance);\n  return instance;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass InMemoryPersistence {\n  constructor() {\n    this.type = \"NONE\" /* PersistenceType.NONE */;\n    this.storage = {};\n  }\n  async _isAvailable() {\n    return true;\n  }\n  async _set(key, value) {\n    this.storage[key] = value;\n  }\n  async _get(key) {\n    const value = this.storage[key];\n    return value === undefined ? null : value;\n  }\n  async _remove(key) {\n    delete this.storage[key];\n  }\n  _addListener(_key, _listener) {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n  _removeListener(_key, _listener) {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n}\nInMemoryPersistence.type = 'NONE';\n/**\n * An implementation of {@link Persistence} of type 'NONE'.\n *\n * @public\n */\nconst inMemoryPersistence = InMemoryPersistence;\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _persistenceKeyName(key, apiKey, appName) {\n  return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\n}\nclass PersistenceUserManager {\n  constructor(persistence, auth, userKey) {\n    this.persistence = persistence;\n    this.auth = auth;\n    this.userKey = userKey;\n    const {\n      config,\n      name\n    } = this.auth;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n    this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n  setCurrentUser(user) {\n    return this.persistence._set(this.fullUserKey, user.toJSON());\n  }\n  async getCurrentUser() {\n    const blob = await this.persistence._get(this.fullUserKey);\n    if (!blob) {\n      return null;\n    }\n    if (typeof blob === 'string') {\n      const response = await getAccountInfo(this.auth, {\n        idToken: blob\n      }).catch(() => undefined);\n      if (!response) {\n        return null;\n      }\n      return UserImpl._fromGetAccountInfoResponse(this.auth, response, blob);\n    }\n    return UserImpl._fromJSON(this.auth, blob);\n  }\n  removeCurrentUser() {\n    return this.persistence._remove(this.fullUserKey);\n  }\n  savePersistenceForRedirect() {\n    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n  }\n  async setPersistence(newPersistence) {\n    if (this.persistence === newPersistence) {\n      return;\n    }\n    const currentUser = await this.getCurrentUser();\n    await this.removeCurrentUser();\n    this.persistence = newPersistence;\n    if (currentUser) {\n      return this.setCurrentUser(currentUser);\n    }\n  }\n  delete() {\n    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n  }\n  static async create(auth, persistenceHierarchy, userKey = \"authUser\" /* KeyName.AUTH_USER */) {\n    if (!persistenceHierarchy.length) {\n      return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n    }\n    // Eliminate any persistences that are not available\n    const availablePersistences = (await Promise.all(persistenceHierarchy.map(async persistence => {\n      if (await persistence._isAvailable()) {\n        return persistence;\n      }\n      return undefined;\n    }))).filter(persistence => persistence);\n    // Fall back to the first persistence listed, or in memory if none available\n    let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n    // Pull out the existing user, setting the chosen persistence to that\n    // persistence if the user exists.\n    let userToMigrate = null;\n    // Note, here we check for a user in _all_ persistences, not just the\n    // ones deemed available. If we can migrate a user out of a broken\n    // persistence, we will (but only if that persistence supports migration).\n    for (const persistence of persistenceHierarchy) {\n      try {\n        const blob = await persistence._get(key);\n        if (blob) {\n          let user;\n          if (typeof blob === 'string') {\n            const response = await getAccountInfo(auth, {\n              idToken: blob\n            }).catch(() => undefined);\n            if (!response) {\n              break;\n            }\n            user = await UserImpl._fromGetAccountInfoResponse(auth, response, blob);\n          } else {\n            user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n          }\n          if (persistence !== selectedPersistence) {\n            userToMigrate = user;\n          }\n          selectedPersistence = persistence;\n          break;\n        }\n      } catch (_a) {}\n    }\n    // If we find the user in a persistence that does support migration, use\n    // that migration path (of only persistences that support migration)\n    const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\n    // If the persistence does _not_ allow migration, just finish off here\n    if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n    selectedPersistence = migrationHierarchy[0];\n    if (userToMigrate) {\n      // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n      // we'll just let it bubble to surface the error.\n      await selectedPersistence._set(key, userToMigrate.toJSON());\n    }\n    // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n    // such as users getting stuck with a previous account after signing out and refreshing the tab.\n    await Promise.all(persistenceHierarchy.map(async persistence => {\n      if (persistence !== selectedPersistence) {\n        try {\n          await persistence._remove(key);\n        } catch (_a) {}\n      }\n    }));\n    return new PersistenceUserManager(selectedPersistence, auth, userKey);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Determine the browser for the purposes of reporting usage to the API\n */\nfunction _getBrowserName(userAgent) {\n  const ua = userAgent.toLowerCase();\n  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n    return \"Opera\" /* BrowserName.OPERA */;\n  } else if (_isIEMobile(ua)) {\n    // Windows phone IEMobile browser.\n    return \"IEMobile\" /* BrowserName.IEMOBILE */;\n  } else if (ua.includes('msie') || ua.includes('trident/')) {\n    return \"IE\" /* BrowserName.IE */;\n  } else if (ua.includes('edge/')) {\n    return \"Edge\" /* BrowserName.EDGE */;\n  } else if (_isFirefox(ua)) {\n    return \"Firefox\" /* BrowserName.FIREFOX */;\n  } else if (ua.includes('silk/')) {\n    return \"Silk\" /* BrowserName.SILK */;\n  } else if (_isBlackBerry(ua)) {\n    // Blackberry browser.\n    return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n  } else if (_isWebOS(ua)) {\n    // WebOS default browser.\n    return \"Webos\" /* BrowserName.WEBOS */;\n  } else if (_isSafari(ua)) {\n    return \"Safari\" /* BrowserName.SAFARI */;\n  } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {\n    return \"Chrome\" /* BrowserName.CHROME */;\n  } else if (_isAndroid(ua)) {\n    // Android stock browser.\n    return \"Android\" /* BrowserName.ANDROID */;\n  } else {\n    // Most modern browsers have name/version at end of user agent string.\n    const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    const matches = userAgent.match(re);\n    if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {\n      return matches[1];\n    }\n  }\n  return \"Other\" /* BrowserName.OTHER */;\n}\nfunction _isFirefox(ua = getUA()) {\n  return /firefox\\//i.test(ua);\n}\nfunction _isSafari(userAgent = getUA()) {\n  const ua = userAgent.toLowerCase();\n  return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');\n}\nfunction _isChromeIOS(ua = getUA()) {\n  return /crios\\//i.test(ua);\n}\nfunction _isIEMobile(ua = getUA()) {\n  return /iemobile/i.test(ua);\n}\nfunction _isAndroid(ua = getUA()) {\n  return /android/i.test(ua);\n}\nfunction _isBlackBerry(ua = getUA()) {\n  return /blackberry/i.test(ua);\n}\nfunction _isWebOS(ua = getUA()) {\n  return /webos/i.test(ua);\n}\nfunction _isIOS(ua = getUA()) {\n  return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n}\nfunction _isIOS7Or8(ua = getUA()) {\n  return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n}\nfunction _isIOSStandalone(ua = getUA()) {\n  var _a;\n  return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);\n}\nfunction _isIE10() {\n  return isIE() && document.documentMode === 10;\n}\nfunction _isMobileBrowser(ua = getUA()) {\n  // TODO: implement getBrowserName equivalent for OS.\n  return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * Determine the SDK version string\n */\nfunction _getClientVersion(clientPlatform, frameworks = []) {\n  let reportedPlatform;\n  switch (clientPlatform) {\n    case \"Browser\" /* ClientPlatform.BROWSER */:\n      // In a browser environment, report the browser name.\n      reportedPlatform = _getBrowserName(getUA());\n      break;\n    case \"Worker\" /* ClientPlatform.WORKER */:\n      // Technically a worker runs from a browser but we need to differentiate a\n      // worker from a browser.\n      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */\n  return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${SDK_VERSION}/${reportedFrameworks}`;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AuthMiddlewareQueue {\n  constructor(auth) {\n    this.auth = auth;\n    this.queue = [];\n  }\n  pushCallback(callback, onAbort) {\n    // The callback could be sync or async. Wrap it into a\n    // function that is always async.\n    const wrappedCallback = user => new Promise((resolve, reject) => {\n      try {\n        const result = callback(user);\n        // Either resolve with existing promise or wrap a non-promise\n        // return value into a promise.\n        resolve(result);\n      } catch (e) {\n        // Sync callback throws.\n        reject(e);\n      }\n    });\n    // Attach the onAbort if present\n    wrappedCallback.onAbort = onAbort;\n    this.queue.push(wrappedCallback);\n    const index = this.queue.length - 1;\n    return () => {\n      // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n      // indexing of other elements.\n      this.queue[index] = () => Promise.resolve();\n    };\n  }\n  async runMiddleware(nextUser) {\n    if (this.auth.currentUser === nextUser) {\n      return;\n    }\n    // While running the middleware, build a temporary stack of onAbort\n    // callbacks to call if one middleware callback rejects.\n    const onAbortStack = [];\n    try {\n      for (const beforeStateCallback of this.queue) {\n        await beforeStateCallback(nextUser);\n        // Only push the onAbort if the callback succeeds\n        if (beforeStateCallback.onAbort) {\n          onAbortStack.push(beforeStateCallback.onAbort);\n        }\n      }\n    } catch (e) {\n      // Run all onAbort, with separate try/catch to ignore any errors and\n      // continue\n      onAbortStack.reverse();\n      for (const onAbort of onAbortStack) {\n        try {\n          onAbort();\n        } catch (_) {\n          /* swallow error */\n        }\n      }\n      throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n        originalMessage: e === null || e === void 0 ? void 0 : e.message\n      });\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n *\n * @param auth Auth object.\n * @param request Password policy request.\n * @returns Password policy response.\n */\nasync function _getPasswordPolicy(auth, request = {}) {\n  return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Minimum min password length enforced by the backend, even if no minimum length is set.\nconst MINIMUM_MIN_PASSWORD_LENGTH = 6;\n/**\n * Stores password policy requirements and provides password validation against the policy.\n *\n * @internal\n */\nclass PasswordPolicyImpl {\n  constructor(response) {\n    var _a, _b, _c, _d;\n    // Only include custom strength options defined in the response.\n    const responseOptions = response.customStrengthOptions;\n    this.customStrengthOptions = {};\n    // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n    this.customStrengthOptions.minPasswordLength = (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : MINIMUM_MIN_PASSWORD_LENGTH;\n    if (responseOptions.maxPasswordLength) {\n      this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n    }\n    if (responseOptions.containsLowercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n    }\n    if (responseOptions.containsUppercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n    }\n    if (responseOptions.containsNumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n    }\n    if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n    }\n    this.enforcementState = response.enforcementState;\n    if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n      this.enforcementState = 'OFF';\n    }\n    // Use an empty string if no non-alphanumeric characters are specified in the response.\n    this.allowedNonAlphanumericCharacters = (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join('')) !== null && _c !== void 0 ? _c : '';\n    this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;\n    this.schemaVersion = response.schemaVersion;\n  }\n  validatePassword(password) {\n    var _a, _b, _c, _d, _e, _f;\n    const status = {\n      isValid: true,\n      passwordPolicy: this\n    };\n    // Check the password length and character options.\n    this.validatePasswordLengthOptions(password, status);\n    this.validatePasswordCharacterOptions(password, status);\n    // Combine the status into single isValid property.\n    status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);\n    status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);\n    status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== void 0 ? _c : true);\n    status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);\n    status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== void 0 ? _e : true);\n    status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);\n    return status;\n  }\n  /**\n   * Validates that the password meets the length options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  validatePasswordLengthOptions(password, status) {\n    const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n    const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n    if (minPasswordLength) {\n      status.meetsMinPasswordLength = password.length >= minPasswordLength;\n    }\n    if (maxPasswordLength) {\n      status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n    }\n  }\n  /**\n   * Validates that the password meets the character options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  validatePasswordCharacterOptions(password, status) {\n    // Assign statuses for requirements even if the password is an empty string.\n    this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */false, /* containsUppercaseCharacter= */false, /* containsNumericCharacter= */false, /* containsNonAlphanumericCharacter= */false);\n    let passwordChar;\n    for (let i = 0; i < password.length; i++) {\n      passwordChar = password.charAt(i);\n      this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */this.allowedNonAlphanumericCharacters.includes(passwordChar));\n    }\n  }\n  /**\n   * Updates the running validation status with the statuses for the character options.\n   * Expected to be called each time a character is processed to update each option status\n   * based on the current character.\n   *\n   * @param status Validation status.\n   * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n   * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n   * @param containsNumericCharacter Whether the character is a numeric character.\n   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n   */\n  updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n    if (this.customStrengthOptions.containsLowercaseLetter) {\n      status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n    }\n    if (this.customStrengthOptions.containsUppercaseLetter) {\n      status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n    }\n    if (this.customStrengthOptions.containsNumericCharacter) {\n      status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n    }\n    if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n      status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AuthImpl {\n  constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n    this.appCheckServiceProvider = appCheckServiceProvider;\n    this.config = config;\n    this.currentUser = null;\n    this.emulatorConfig = null;\n    this.operations = Promise.resolve();\n    this.authStateSubscription = new Subscription(this);\n    this.idTokenSubscription = new Subscription(this);\n    this.beforeStateQueue = new AuthMiddlewareQueue(this);\n    this.redirectUser = null;\n    this.isProactiveRefreshEnabled = false;\n    this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n    // Any network calls will set this to true and prevent subsequent emulator\n    // initialization\n    this._canInitEmulator = true;\n    this._isInitialized = false;\n    this._deleted = false;\n    this._initializationPromise = null;\n    this._popupRedirectResolver = null;\n    this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n    this._agentRecaptchaConfig = null;\n    this._tenantRecaptchaConfigs = {};\n    this._projectPasswordPolicy = null;\n    this._tenantPasswordPolicies = {};\n    this._resolvePersistenceManagerAvailable = undefined;\n    // Tracks the last notified UID for state change listeners to prevent\n    // repeated calls to the callbacks. Undefined means it's never been\n    // called, whereas null means it's been called with a signed out user\n    this.lastNotifiedUid = undefined;\n    this.languageCode = null;\n    this.tenantId = null;\n    this.settings = {\n      appVerificationDisabledForTesting: false\n    };\n    this.frameworks = [];\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n    // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs\n    // persistenceMananger to be available. see _getFinalTarget for more context\n    this._persistenceManagerAvailable = new Promise(resolve => this._resolvePersistenceManagerAvailable = resolve);\n  }\n  _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n    if (popupRedirectResolver) {\n      this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n    }\n    // Have to check for app deletion throughout initialization (after each\n    // promise resolution)\n    this._initializationPromise = this.queue(async () => {\n      var _a, _b, _c;\n      if (this._deleted) {\n        return;\n      }\n      this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\n      (_a = this._resolvePersistenceManagerAvailable) === null || _a === void 0 ? void 0 : _a.call(this);\n      if (this._deleted) {\n        return;\n      }\n      // Initialize the resolver early if necessary (only applicable to web:\n      // this will cause the iframe to load immediately in certain cases)\n      if ((_b = this._popupRedirectResolver) === null || _b === void 0 ? void 0 : _b._shouldInitProactively) {\n        // If this fails, don't halt auth loading\n        try {\n          await this._popupRedirectResolver._initialize(this);\n        } catch (e) {\n          /* Ignore the error */\n        }\n      }\n      await this.initializeCurrentUser(popupRedirectResolver);\n      this.lastNotifiedUid = ((_c = this.currentUser) === null || _c === void 0 ? void 0 : _c.uid) || null;\n      if (this._deleted) {\n        return;\n      }\n      this._isInitialized = true;\n    });\n    return this._initializationPromise;\n  }\n  /**\n   * If the persistence is changed in another window, the user manager will let us know\n   */\n  async _onStorageEvent() {\n    if (this._deleted) {\n      return;\n    }\n    const user = await this.assertedPersistence.getCurrentUser();\n    if (!this.currentUser && !user) {\n      // No change, do nothing (was signed out and remained signed out).\n      return;\n    }\n    // If the same user is to be synchronized.\n    if (this.currentUser && user && this.currentUser.uid === user.uid) {\n      // Data update, simply copy data changes.\n      this._currentUser._assign(user);\n      // If tokens changed from previous user tokens, this will trigger\n      // notifyAuthListeners_.\n      await this.currentUser.getIdToken();\n      return;\n    }\n    // Update current Auth state. Either a new login or logout.\n    // Skip blocking callbacks, they should not apply to a change in another tab.\n    await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true);\n  }\n  async initializeCurrentUserFromIdToken(idToken) {\n    try {\n      const response = await getAccountInfo(this, {\n        idToken\n      });\n      const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);\n      await this.directlySetCurrentUser(user);\n    } catch (err) {\n      console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);\n      await this.directlySetCurrentUser(null);\n    }\n  }\n  async initializeCurrentUser(popupRedirectResolver) {\n    var _a;\n    if (_isFirebaseServerApp(this.app)) {\n      const idToken = this.app.settings.authIdToken;\n      if (idToken) {\n        // Start the auth operation in the next tick to allow a moment for the customer's app to\n        // attach an emulator, if desired.\n        return new Promise(resolve => {\n          setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));\n        });\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n    // First check to see if we have a pending redirect event.\n    const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();\n    let futureCurrentUser = previouslyStoredUser;\n    let needsTocheckMiddleware = false;\n    if (popupRedirectResolver && this.config.authDomain) {\n      await this.getOrInitRedirectPersistenceManager();\n      const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\n      const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;\n      const result = await this.tryRedirectSignIn(popupRedirectResolver);\n      // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n      // matches the redirect user, then we want to initially sign in with the\n      // new user object from result.\n      // TODO(samgho): More thoroughly test all of this\n      if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {\n        futureCurrentUser = result.user;\n        needsTocheckMiddleware = true;\n      }\n    }\n    // If no user in persistence, there is no current user. Set to null.\n    if (!futureCurrentUser) {\n      return this.directlySetCurrentUser(null);\n    }\n    if (!futureCurrentUser._redirectEventId) {\n      // This isn't a redirect link operation, we can reload and bail.\n      // First though, ensure that we check the middleware is happy.\n      if (needsTocheckMiddleware) {\n        try {\n          await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n        } catch (e) {\n          futureCurrentUser = previouslyStoredUser;\n          // We know this is available since the bit is only set when the\n          // resolver is available\n          this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n        }\n      }\n      if (futureCurrentUser) {\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n    _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    await this.getOrInitRedirectPersistenceManager();\n    // If the redirect user's event ID matches the current user's event ID,\n    // DO NOT reload the current user, otherwise they'll be cleared from storage.\n    // This is important for the reauthenticateWithRedirect() flow.\n    if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n      return this.directlySetCurrentUser(futureCurrentUser);\n    }\n    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n  }\n  async tryRedirectSignIn(redirectResolver) {\n    // The redirect user needs to be checked (and signed in if available)\n    // during auth initialization. All of the normal sign in and link/reauth\n    // flows call back into auth and push things onto the promise queue. We\n    // need to await the result of the redirect sign in *inside the promise\n    // queue*. This presents a problem: we run into deadlock. See:\n    //    ┌> [Initialization] ─────┐\n    //    ┌> [<other queue tasks>] │\n    //    └─ [getRedirectResult] <─┘\n    //    where [] are tasks on the queue and arrows denote awaits\n    // Initialization will never complete because it's waiting on something\n    // that's waiting for initialization to complete!\n    //\n    // Instead, this method calls getRedirectResult() (stored in\n    // _completeRedirectFn) with an optional parameter that instructs all of\n    // the underlying auth operations to skip anything that mutates auth state.\n    let result = null;\n    try {\n      // We know this._popupRedirectResolver is set since redirectResolver\n      // is passed in. The _completeRedirectFn expects the unwrapped extern.\n      result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n    } catch (e) {\n      // Swallow any errors here; the code can retrieve them in\n      // getRedirectResult().\n      await this._setRedirectUser(null);\n    }\n    return result;\n  }\n  async reloadAndSetCurrentUserOrClear(user) {\n    try {\n      await _reloadWithoutSaving(user);\n    } catch (e) {\n      if ((e === null || e === void 0 ? void 0 : e.code) !== `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n        // Something's wrong with the user's token. Log them out and remove\n        // them from storage\n        return this.directlySetCurrentUser(null);\n      }\n    }\n    return this.directlySetCurrentUser(user);\n  }\n  useDeviceLanguage() {\n    this.languageCode = _getUserLanguage();\n  }\n  async _delete() {\n    this._deleted = true;\n  }\n  async updateCurrentUser(userExtern) {\n    if (_isFirebaseServerApp(this.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n    }\n    // The public updateCurrentUser method needs to make a copy of the user,\n    // and also check that the project matches\n    const user = userExtern ? getModularInstance(userExtern) : null;\n    if (user) {\n      _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n    }\n    return this._updateCurrentUser(user && user._clone(this));\n  }\n  async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\n    if (this._deleted) {\n      return;\n    }\n    if (user) {\n      _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n    }\n    if (!skipBeforeStateCallbacks) {\n      await this.beforeStateQueue.runMiddleware(user);\n    }\n    return this.queue(async () => {\n      await this.directlySetCurrentUser(user);\n      this.notifyAuthListeners();\n    });\n  }\n  async signOut() {\n    if (_isFirebaseServerApp(this.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n    }\n    // Run first, to block _setRedirectUser() if any callbacks fail.\n    await this.beforeStateQueue.runMiddleware(null);\n    // Clear the redirect user when signOut is called\n    if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n      await this._setRedirectUser(null);\n    }\n    // Prevent callbacks from being called again in _updateCurrentUser, as\n    // they were already called in the first line.\n    return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true);\n  }\n  setPersistence(persistence) {\n    if (_isFirebaseServerApp(this.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n    }\n    return this.queue(async () => {\n      await this.assertedPersistence.setPersistence(_getInstance(persistence));\n    });\n  }\n  _getRecaptchaConfig() {\n    if (this.tenantId == null) {\n      return this._agentRecaptchaConfig;\n    } else {\n      return this._tenantRecaptchaConfigs[this.tenantId];\n    }\n  }\n  async validatePassword(password) {\n    if (!this._getPasswordPolicyInternal()) {\n      await this._updatePasswordPolicy();\n    }\n    // Password policy will be defined after fetching.\n    const passwordPolicy = this._getPasswordPolicyInternal();\n    // Check that the policy schema version is supported by the SDK.\n    // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n    if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n      return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\n    }\n    return passwordPolicy.validatePassword(password);\n  }\n  _getPasswordPolicyInternal() {\n    if (this.tenantId === null) {\n      return this._projectPasswordPolicy;\n    } else {\n      return this._tenantPasswordPolicies[this.tenantId];\n    }\n  }\n  async _updatePasswordPolicy() {\n    const response = await _getPasswordPolicy(this);\n    const passwordPolicy = new PasswordPolicyImpl(response);\n    if (this.tenantId === null) {\n      this._projectPasswordPolicy = passwordPolicy;\n    } else {\n      this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n    }\n  }\n  _getPersistenceType() {\n    return this.assertedPersistence.persistence.type;\n  }\n  _getPersistence() {\n    return this.assertedPersistence.persistence;\n  }\n  _updateErrorMap(errorMap) {\n    this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());\n  }\n  onAuthStateChanged(nextOrObserver, error, completed) {\n    return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n  }\n  beforeAuthStateChanged(callback, onAbort) {\n    return this.beforeStateQueue.pushCallback(callback, onAbort);\n  }\n  onIdTokenChanged(nextOrObserver, error, completed) {\n    return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n  }\n  authStateReady() {\n    return new Promise((resolve, reject) => {\n      if (this.currentUser) {\n        resolve();\n      } else {\n        const unsubscribe = this.onAuthStateChanged(() => {\n          unsubscribe();\n          resolve();\n        }, reject);\n      }\n    });\n  }\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   */\n  async revokeAccessToken(token) {\n    if (this.currentUser) {\n      const idToken = await this.currentUser.getIdToken();\n      // Generalize this to accept other providers once supported.\n      const request = {\n        providerId: 'apple.com',\n        tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\n        token,\n        idToken\n      };\n      if (this.tenantId != null) {\n        request.tenantId = this.tenantId;\n      }\n      await revokeToken(this, request);\n    }\n  }\n  toJSON() {\n    var _a;\n    return {\n      apiKey: this.config.apiKey,\n      authDomain: this.config.authDomain,\n      appName: this.name,\n      currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\n    };\n  }\n  async _setRedirectUser(user, popupRedirectResolver) {\n    const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n    return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);\n  }\n  async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\n    if (!this.redirectPersistenceManager) {\n      const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n      _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\n      this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();\n    }\n    return this.redirectPersistenceManager;\n  }\n  async _redirectUserForId(id) {\n    var _a, _b;\n    // Make sure we've cleared any pending persistence actions if we're not in\n    // the initializer\n    if (this._isInitialized) {\n      await this.queue(async () => {});\n    }\n    if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {\n      return this._currentUser;\n    }\n    if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {\n      return this.redirectUser;\n    }\n    return null;\n  }\n  async _persistUserIfCurrent(user) {\n    if (user === this.currentUser) {\n      return this.queue(async () => this.directlySetCurrentUser(user));\n    }\n  }\n  /** Notifies listeners only if the user is current */\n  _notifyListenersIfCurrent(user) {\n    if (user === this.currentUser) {\n      this.notifyAuthListeners();\n    }\n  }\n  _key() {\n    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n  }\n  _startProactiveRefresh() {\n    this.isProactiveRefreshEnabled = true;\n    if (this.currentUser) {\n      this._currentUser._startProactiveRefresh();\n    }\n  }\n  _stopProactiveRefresh() {\n    this.isProactiveRefreshEnabled = false;\n    if (this.currentUser) {\n      this._currentUser._stopProactiveRefresh();\n    }\n  }\n  /** Returns the current user cast as the internal type */\n  get _currentUser() {\n    return this.currentUser;\n  }\n  notifyAuthListeners() {\n    var _a, _b;\n    if (!this._isInitialized) {\n      return;\n    }\n    this.idTokenSubscription.next(this.currentUser);\n    const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\n    if (this.lastNotifiedUid !== currentUid) {\n      this.lastNotifiedUid = currentUid;\n      this.authStateSubscription.next(this.currentUser);\n    }\n  }\n  registerStateListener(subscription, nextOrObserver, error, completed) {\n    if (this._deleted) {\n      return () => {};\n    }\n    const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n    let isUnsubscribed = false;\n    const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n    _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    // The callback needs to be called asynchronously per the spec.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    promise.then(() => {\n      if (isUnsubscribed) {\n        return;\n      }\n      cb(this.currentUser);\n    });\n    if (typeof nextOrObserver === 'function') {\n      const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    } else {\n      const unsubscribe = subscription.addObserver(nextOrObserver);\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    }\n  }\n  /**\n   * Unprotected (from race conditions) method to set the current user. This\n   * should only be called from within a queued callback. This is necessary\n   * because the queue shouldn't rely on another queued callback.\n   */\n  async directlySetCurrentUser(user) {\n    if (this.currentUser && this.currentUser !== user) {\n      this._currentUser._stopProactiveRefresh();\n    }\n    if (user && this.isProactiveRefreshEnabled) {\n      user._startProactiveRefresh();\n    }\n    this.currentUser = user;\n    if (user) {\n      await this.assertedPersistence.setCurrentUser(user);\n    } else {\n      await this.assertedPersistence.removeCurrentUser();\n    }\n  }\n  queue(action) {\n    // In case something errors, the callback still should be called in order\n    // to keep the promise chain alive\n    this.operations = this.operations.then(action, action);\n    return this.operations;\n  }\n  get assertedPersistence() {\n    _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return this.persistenceManager;\n  }\n  _logFramework(framework) {\n    if (!framework || this.frameworks.includes(framework)) {\n      return;\n    }\n    this.frameworks.push(framework);\n    // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n    // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n    this.frameworks.sort();\n    this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n  }\n  _getFrameworks() {\n    return this.frameworks;\n  }\n  async _getAdditionalHeaders() {\n    var _a;\n    // Additional headers on every request\n    const headers = {\n      [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\n    };\n    if (this.app.options.appId) {\n      headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n    }\n    // If the heartbeat service exists, add the heartbeat string\n    const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider.getImmediate({\n      optional: true\n    })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());\n    if (heartbeatsHeader) {\n      headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n    }\n    // If the App Check service exists, add the App Check token in the headers\n    const appCheckToken = await this._getAppCheckToken();\n    if (appCheckToken) {\n      headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\n    }\n    return headers;\n  }\n  async _getAppCheckToken() {\n    var _a;\n    if (_isFirebaseServerApp(this.app) && this.app.settings.appCheckToken) {\n      return this.app.settings.appCheckToken;\n    }\n    const appCheckTokenResult = await ((_a = this.appCheckServiceProvider.getImmediate({\n      optional: true\n    })) === null || _a === void 0 ? void 0 : _a.getToken());\n    if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {\n      // Context: appCheck.getToken() will never throw even if an error happened.\n      // In the error case, a dummy token will be returned along with an error field describing\n      // the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n    }\n    return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;\n  }\n}\n/**\n * Method to be used to cast down to our private implementation of Auth.\n * It will also handle unwrapping from the compat type if necessary\n *\n * @param auth Auth object passed in from developer\n */\nfunction _castAuth(auth) {\n  return getModularInstance(auth);\n}\n/** Helper class to wrap subscriber logic */\nclass Subscription {\n  constructor(auth) {\n    this.auth = auth;\n    this.observer = null;\n    this.addObserver = createSubscribe(observer => this.observer = observer);\n  }\n  get next() {\n    _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return this.observer.next.bind(this.observer);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet externalJSProvider = {\n  async loadJS() {\n    throw new Error('Unable to load external scripts');\n  },\n  recaptchaV2Script: '',\n  recaptchaEnterpriseScript: '',\n  gapiScript: ''\n};\nfunction _setExternalJSProvider(p) {\n  externalJSProvider = p;\n}\nfunction _loadJS(url) {\n  return externalJSProvider.loadJS(url);\n}\nfunction _recaptchaV2ScriptUrl() {\n  return externalJSProvider.recaptchaV2Script;\n}\nfunction _recaptchaEnterpriseScriptUrl() {\n  return externalJSProvider.recaptchaEnterpriseScript;\n}\nfunction _gapiScriptUrl() {\n  return externalJSProvider.gapiScript;\n}\nfunction _generateCallbackName(prefix) {\n  return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst _SOLVE_TIME_MS = 500;\nconst _EXPIRATION_TIME_MS = 60000;\nconst _WIDGET_ID_START = 1000000000000;\nclass MockReCaptcha {\n  constructor(auth) {\n    this.auth = auth;\n    this.counter = _WIDGET_ID_START;\n    this._widgets = new Map();\n  }\n  render(container, parameters) {\n    const id = this.counter;\n    this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\n    this.counter++;\n    return id;\n  }\n  reset(optWidgetId) {\n    var _a;\n    const id = optWidgetId || _WIDGET_ID_START;\n    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());\n    this._widgets.delete(id);\n  }\n  getResponse(optWidgetId) {\n    var _a;\n    const id = optWidgetId || _WIDGET_ID_START;\n    return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';\n  }\n  async execute(optWidgetId) {\n    var _a;\n    const id = optWidgetId || _WIDGET_ID_START;\n    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());\n    return '';\n  }\n}\nclass MockGreCAPTCHATopLevel {\n  constructor() {\n    this.enterprise = new MockGreCAPTCHA();\n  }\n  ready(callback) {\n    callback();\n  }\n  execute(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _siteKey, _options) {\n    return Promise.resolve('token');\n  }\n  render(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _container, _parameters) {\n    return '';\n  }\n}\nclass MockGreCAPTCHA {\n  ready(callback) {\n    callback();\n  }\n  execute(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _siteKey, _options) {\n    return Promise.resolve('token');\n  }\n  render(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _container, _parameters) {\n    return '';\n  }\n}\nclass MockWidget {\n  constructor(containerOrId, appName, params) {\n    this.params = params;\n    this.timerId = null;\n    this.deleted = false;\n    this.responseToken = null;\n    this.clickHandler = () => {\n      this.execute();\n    };\n    const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n    _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, {\n      appName\n    });\n    this.container = container;\n    this.isVisible = this.params.size !== 'invisible';\n    if (this.isVisible) {\n      this.execute();\n    } else {\n      this.container.addEventListener('click', this.clickHandler);\n    }\n  }\n  getResponse() {\n    this.checkIfDeleted();\n    return this.responseToken;\n  }\n  delete() {\n    this.checkIfDeleted();\n    this.deleted = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    }\n    this.container.removeEventListener('click', this.clickHandler);\n  }\n  execute() {\n    this.checkIfDeleted();\n    if (this.timerId) {\n      return;\n    }\n    this.timerId = window.setTimeout(() => {\n      this.responseToken = generateRandomAlphaNumericString(50);\n      const {\n        callback,\n        'expired-callback': expiredCallback\n      } = this.params;\n      if (callback) {\n        try {\n          callback(this.responseToken);\n        } catch (e) {}\n      }\n      this.timerId = window.setTimeout(() => {\n        this.timerId = null;\n        this.responseToken = null;\n        if (expiredCallback) {\n          try {\n            expiredCallback();\n          } catch (e) {}\n        }\n        if (this.isVisible) {\n          this.execute();\n        }\n      }, _EXPIRATION_TIME_MS);\n    }, _SOLVE_TIME_MS);\n  }\n  checkIfDeleted() {\n    if (this.deleted) {\n      throw new Error('reCAPTCHA mock was already deleted!');\n    }\n  }\n}\nfunction generateRandomAlphaNumericString(len) {\n  const chars = [];\n  const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < len; i++) {\n    chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n  }\n  return chars.join('');\n}\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\nconst FAKE_TOKEN = 'NO_RECAPTCHA';\nclass RecaptchaEnterpriseVerifier {\n  /**\n   *\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   */\n  constructor(authExtern) {\n    /**\n     * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n     */\n    this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n    this.auth = _castAuth(authExtern);\n  }\n  /**\n   * Executes the verification process.\n   *\n   * @returns A Promise for a token that can be used to assert the validity of a request.\n   */\n  async verify(action = 'verify', forceRefresh = false) {\n    async function retrieveSiteKey(auth) {\n      if (!forceRefresh) {\n        if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n          return auth._agentRecaptchaConfig.siteKey;\n        }\n        if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\n          return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n        }\n      }\n      return new Promise(async (resolve, reject) => {\n        getRecaptchaConfig(auth, {\n          clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n          version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n        }).then(response => {\n          if (response.recaptchaKey === undefined) {\n            reject(new Error('recaptcha Enterprise site key undefined'));\n          } else {\n            const config = new RecaptchaConfig(response);\n            if (auth.tenantId == null) {\n              auth._agentRecaptchaConfig = config;\n            } else {\n              auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n            }\n            return resolve(config.siteKey);\n          }\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function retrieveRecaptchaToken(siteKey, resolve, reject) {\n      const grecaptcha = window.grecaptcha;\n      if (isEnterprise(grecaptcha)) {\n        grecaptcha.enterprise.ready(() => {\n          grecaptcha.enterprise.execute(siteKey, {\n            action\n          }).then(token => {\n            resolve(token);\n          }).catch(() => {\n            resolve(FAKE_TOKEN);\n          });\n        });\n      } else {\n        reject(Error('No reCAPTCHA enterprise script loaded.'));\n      }\n    }\n    // Returns Promise for a mock token when appVerificationDisabledForTesting is true.\n    if (this.auth.settings.appVerificationDisabledForTesting) {\n      const mockRecaptcha = new MockGreCAPTCHATopLevel();\n      return mockRecaptcha.execute('siteKey', {\n        action: 'verify'\n      });\n    }\n    return new Promise((resolve, reject) => {\n      retrieveSiteKey(this.auth).then(siteKey => {\n        if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n          retrieveRecaptchaToken(siteKey, resolve, reject);\n        } else {\n          if (typeof window === 'undefined') {\n            reject(new Error('RecaptchaVerifier is only supported in browser'));\n            return;\n          }\n          let url = _recaptchaEnterpriseScriptUrl();\n          if (url.length !== 0) {\n            url += siteKey;\n          }\n          _loadJS(url).then(() => {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          }).catch(error => {\n            reject(error);\n          });\n        }\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n}\nasync function injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {\n  const verifier = new RecaptchaEnterpriseVerifier(auth);\n  let captchaResponse;\n  if (isFakeToken) {\n    captchaResponse = FAKE_TOKEN;\n  } else {\n    try {\n      captchaResponse = await verifier.verify(action);\n    } catch (error) {\n      captchaResponse = await verifier.verify(action, true);\n    }\n  }\n  const newRequest = Object.assign({}, request);\n  if (action === \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ || action === \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {\n    if ('phoneEnrollmentInfo' in newRequest) {\n      const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n      const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;\n      Object.assign(newRequest, {\n        'phoneEnrollmentInfo': {\n          phoneNumber,\n          recaptchaToken,\n          captchaResponse,\n          'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n          'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n        }\n      });\n    } else if ('phoneSignInInfo' in newRequest) {\n      const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;\n      Object.assign(newRequest, {\n        'phoneSignInInfo': {\n          recaptchaToken,\n          captchaResponse,\n          'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n          'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n        }\n      });\n    }\n    return newRequest;\n  }\n  if (!isCaptchaResp) {\n    Object.assign(newRequest, {\n      captchaResponse\n    });\n  } else {\n    Object.assign(newRequest, {\n      'captchaResp': captchaResponse\n    });\n  }\n  Object.assign(newRequest, {\n    'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n  });\n  Object.assign(newRequest, {\n    'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n  });\n  return newRequest;\n}\nasync function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {\n  var _a, _b;\n  if (recaptchaAuthProvider === \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) {\n    if ((_a = authInstance._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {\n      const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n      return actionMethod(authInstance, requestWithRecaptcha);\n    } else {\n      return actionMethod(authInstance, request).catch(async error => {\n        if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\n          console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n          const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n          return actionMethod(authInstance, requestWithRecaptcha);\n        } else {\n          return Promise.reject(error);\n        }\n      });\n    }\n  } else if (recaptchaAuthProvider === \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) {\n    if ((_b = authInstance._getRecaptchaConfig()) === null || _b === void 0 ? void 0 : _b.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) {\n      const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName);\n      return actionMethod(authInstance, requestWithRecaptcha).catch(async error => {\n        var _a;\n        if (((_a = authInstance._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.getProviderEnforcementState(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) === \"AUDIT\" /* EnforcementState.AUDIT */) {\n          // AUDIT mode\n          if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}` || error.code === `auth/${\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */}`) {\n            console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);\n            // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token\n            // check fails.\n            // Fallback to reCAPTCHA v2 flow.\n            const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n            // isCaptchaResp\n            true // isFakeToken\n            );\n            // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.\n            return actionMethod(authInstance, requestWithRecaptchaFields);\n          }\n        }\n        // ENFORCE mode or AUDIT mode with any other error.\n        return Promise.reject(error);\n      });\n    } else {\n      // Do reCAPTCHA v2 flow.\n      const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n      // isCaptchaResp\n      true // isFakeToken\n      );\n      // This will call the PhoneApiCaller to fetch and inject v2 token.\n      return actionMethod(authInstance, requestWithRecaptchaFields);\n    }\n  } else {\n    return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');\n  }\n}\nasync function _initializeRecaptchaConfig(auth) {\n  const authInternal = _castAuth(auth);\n  const response = await getRecaptchaConfig(authInternal, {\n    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n    version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n  });\n  const config = new RecaptchaConfig(response);\n  if (authInternal.tenantId == null) {\n    authInternal._agentRecaptchaConfig = config;\n  } else {\n    authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n  }\n  if (config.isAnyProviderEnabled()) {\n    const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n    void verifier.verify();\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Initializes an {@link Auth} instance with fine-grained control over\n * {@link Dependencies}.\n *\n * @remarks\n *\n * This function allows more control over the {@link Auth} instance than\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\n * need control over which persistence layer is used, or to minimize bundle\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n *\n * For example, if your app only uses anonymous accounts and you only want\n * accounts saved for the current session, initialize `Auth` with:\n *\n * ```js\n * const auth = initializeAuth(app, {\n *   persistence: browserSessionPersistence,\n *   popupRedirectResolver: undefined,\n * });\n * ```\n *\n * @public\n */\nfunction initializeAuth(app, deps) {\n  const provider = _getProvider(app, 'auth');\n  if (provider.isInitialized()) {\n    const auth = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n    if (deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {\n      return auth;\n    } else {\n      _fail(auth, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n    }\n  }\n  const auth = provider.initialize({\n    options: deps\n  });\n  return auth;\n}\nfunction _initializeAuthInstance(auth, deps) {\n  const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];\n  const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n  if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n  // This promise is intended to float; auth initialization happens in the\n  // background, meanwhile the auth object may be used by the app.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);\n}\n\n/**\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n * Firebase Auth services.\n *\n * @remarks\n * This must be called synchronously immediately following the first call to\n * {@link initializeAuth}.  Do not use with production credentials as emulator\n * traffic is not encrypted.\n *\n *\n * @example\n * ```javascript\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n * `true` to disable the warning banner attached to the DOM.\n *\n * @public\n */\nfunction connectAuthEmulator(auth, url, options) {\n  const authInternal = _castAuth(auth);\n  _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n  const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);\n  const protocol = extractProtocol(url);\n  const {\n    host,\n    port\n  } = extractHostAndPort(url);\n  const portStr = port === null ? '' : `:${port}`;\n  // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n  const emulator = {\n    url: `${protocol}//${host}${portStr}/`\n  };\n  const emulatorConfig = Object.freeze({\n    host,\n    port,\n    protocol: protocol.replace(':', ''),\n    options: Object.freeze({\n      disableWarnings\n    })\n  });\n  // There are a few scenarios to guard against if the Auth instance has already started:\n  if (!authInternal._canInitEmulator) {\n    // Applications may not initialize the emulator for the first time if Auth has already started\n    // to make network requests.\n    _assert(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n    // Applications may not alter the configuration of the emulator (aka pass a different config)\n    // once Auth has started to make network requests.\n    _assert(deepEqual(emulator, authInternal.config.emulator) && deepEqual(emulatorConfig, authInternal.emulatorConfig), authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n    // It's valid, however, to invoke connectAuthEmulator() after Auth has started making\n    // connections, so long as the config matches the existing config. This results in a no-op.\n    return;\n  }\n  authInternal.config.emulator = emulator;\n  authInternal.emulatorConfig = emulatorConfig;\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  if (isCloudWorkstation(host)) {\n    updateEmulatorBanner('Auth', true);\n    // Workaround to get cookies in Firebase Studio\n    void pingServer(`${protocol}//${host}${portStr}`);\n  } else if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\nfunction extractProtocol(url) {\n  const protocolEnd = url.indexOf(':');\n  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n}\nfunction extractHostAndPort(url) {\n  const protocol = extractProtocol(url);\n  const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n  if (!authority) {\n    return {\n      host: '',\n      port: null\n    };\n  }\n  const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n  const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    const host = bracketedIPv6[1];\n    return {\n      host,\n      port: parsePort(hostAndPort.substr(host.length + 1))\n    };\n  } else {\n    const [host, port] = hostAndPort.split(':');\n    return {\n      host,\n      port: parsePort(port)\n    };\n  }\n}\nfunction parsePort(portStr) {\n  if (!portStr) {\n    return null;\n  }\n  const port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\nfunction emitEmulatorWarning() {\n  function attachBanner() {\n    const el = document.createElement('p');\n    const sty = el.style;\n    el.innerText = 'Running in emulator mode. Do not use with production credentials.';\n    sty.position = 'fixed';\n    sty.width = '100%';\n    sty.backgroundColor = '#ffffff';\n    sty.border = '.1em solid #000000';\n    sty.color = '#b50000';\n    sty.bottom = '0px';\n    sty.left = '0px';\n    sty.margin = '0px';\n    sty.zIndex = '10000';\n    sty.textAlign = 'center';\n    el.classList.add('firebase-emulator-warning');\n    document.body.appendChild(el);\n  }\n  if (typeof console !== 'undefined' && typeof console.info === 'function') {\n    console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');\n  }\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    if (document.readyState === 'loading') {\n      window.addEventListener('DOMContentLoaded', attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface that represents the credentials returned by an {@link AuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nclass AuthCredential {\n  /** @internal */\n  constructor(\n  /**\n   * The authentication provider ID for the credential.\n   *\n   * @remarks\n   * For example, 'facebook.com', or 'google.com'.\n   */\n  providerId,\n  /**\n   * The authentication sign in method for the credential.\n   *\n   * @remarks\n   * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n   * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n   * identifier as returned in {@link fetchSignInMethodsForEmail}.\n   */\n  signInMethod) {\n    this.providerId = providerId;\n    this.signInMethod = signInMethod;\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns a JSON-serializable representation of this object.\n   */\n  toJSON() {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _getIdTokenResponse(_auth) {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _linkToIdToken(_auth, _idToken) {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _getReauthenticationResolver(_auth) {\n    return debugFail('not implemented');\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function resetPassword(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\n}\nasync function updateEmailPassword(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n}\n// Used for linking an email/password account to an existing idToken. Uses the same request/response\n// format as updateEmailPassword.\nasync function linkEmailPassword(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request);\n}\nasync function applyActionCode$1(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function signInWithPassword(auth, request) {\n  return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\n}\nasync function sendOobCode(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\n}\nasync function sendEmailVerification$1(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function sendPasswordResetEmail$1(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function sendSignInLinkToEmail$1(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function verifyAndChangeEmail(auth, request) {\n  return sendOobCode(auth, request);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function signInWithEmailLink$1(auth, request) {\n  return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n}\nasync function signInWithEmailLinkForLinking(auth, request) {\n  return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n * {@link ProviderId}.PASSWORD\n *\n * @remarks\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @public\n */\nclass EmailAuthCredential extends AuthCredential {\n  /** @internal */\n  constructor(/** @internal */\n  _email, /** @internal */\n  _password, signInMethod, /** @internal */\n  _tenantId = null) {\n    super(\"password\" /* ProviderId.PASSWORD */, signInMethod);\n    this._email = _email;\n    this._password = _password;\n    this._tenantId = _tenantId;\n  }\n  /** @internal */\n  static _fromEmailAndPassword(email, password) {\n    return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n  }\n  /** @internal */\n  static _fromEmailAndCode(email, oobCode, tenantId = null) {\n    return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n  }\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON() {\n    return {\n      email: this._email,\n      password: this._password,\n      signInMethod: this.signInMethod,\n      tenantId: this._tenantId\n    };\n  }\n  /**\n   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n   *\n   * @param json - Either `object` or the stringified representation of the object. When string is\n   * provided, `JSON.parse` would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n   */\n  static fromJSON(json) {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {\n      if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n        return this._fromEmailAndPassword(obj.email, obj.password);\n      } else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n      }\n    }\n    return null;\n  }\n  /** @internal */\n  async _getIdTokenResponse(auth) {\n    switch (this.signInMethod) {\n      case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n        const request = {\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n        };\n        return handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n      case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n        return signInWithEmailLink$1(auth, {\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n  }\n  /** @internal */\n  async _linkToIdToken(auth, idToken) {\n    switch (this.signInMethod) {\n      case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n        const request = {\n          idToken,\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n        };\n        return handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n      case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n        return signInWithEmailLinkForLinking(auth, {\n          idToken,\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    return this._getIdTokenResponse(auth);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function signInWithIdp(auth, request) {\n  return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst IDP_REQUEST_URI$1 = 'http://localhost';\n/**\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nclass OAuthCredential extends AuthCredential {\n  constructor() {\n    super(...arguments);\n    this.pendingToken = null;\n  }\n  /** @internal */\n  static _fromParams(params) {\n    const cred = new OAuthCredential(params.providerId, params.signInMethod);\n    if (params.idToken || params.accessToken) {\n      // OAuth 2 and either ID token or access token.\n      if (params.idToken) {\n        cred.idToken = params.idToken;\n      }\n      if (params.accessToken) {\n        cred.accessToken = params.accessToken;\n      }\n      // Add nonce if available and no pendingToken is present.\n      if (params.nonce && !params.pendingToken) {\n        cred.nonce = params.nonce;\n      }\n      if (params.pendingToken) {\n        cred.pendingToken = params.pendingToken;\n      }\n    } else if (params.oauthToken && params.oauthTokenSecret) {\n      // OAuth 1 and OAuth token with token secret\n      cred.accessToken = params.oauthToken;\n      cred.secret = params.oauthTokenSecret;\n    } else {\n      _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    }\n    return cred;\n  }\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON() {\n    return {\n      idToken: this.idToken,\n      accessToken: this.accessToken,\n      secret: this.secret,\n      nonce: this.nonce,\n      pendingToken: this.pendingToken,\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n  }\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json) {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const {\n        providerId,\n        signInMethod\n      } = obj,\n      rest = __rest(obj, [\"providerId\", \"signInMethod\"]);\n    if (!providerId || !signInMethod) {\n      return null;\n    }\n    const cred = new OAuthCredential(providerId, signInMethod);\n    cred.idToken = rest.idToken || undefined;\n    cred.accessToken = rest.accessToken || undefined;\n    cred.secret = rest.secret;\n    cred.nonce = rest.nonce;\n    cred.pendingToken = rest.pendingToken || null;\n    return cred;\n  }\n  /** @internal */\n  _getIdTokenResponse(auth) {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _linkToIdToken(auth, idToken) {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n  buildRequest() {\n    const request = {\n      requestUri: IDP_REQUEST_URI$1,\n      returnSecureToken: true\n    };\n    if (this.pendingToken) {\n      request.pendingToken = this.pendingToken;\n    } else {\n      const postBody = {};\n      if (this.idToken) {\n        postBody['id_token'] = this.idToken;\n      }\n      if (this.accessToken) {\n        postBody['access_token'] = this.accessToken;\n      }\n      if (this.secret) {\n        postBody['oauth_token_secret'] = this.secret;\n      }\n      postBody['providerId'] = this.providerId;\n      if (this.nonce && !this.pendingToken) {\n        postBody['nonce'] = this.nonce;\n      }\n      request.postBody = querystring(postBody);\n    }\n    return request;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function sendPhoneVerificationCode(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));\n}\nasync function signInWithPhoneNumber$1(auth, request) {\n  return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n}\nasync function linkWithPhoneNumber$1(auth, request) {\n  const response = await _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n  if (response.temporaryProof) {\n    throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n  }\n  return response;\n}\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n  [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\n};\nasync function verifyPhoneNumberForExisting(auth, request) {\n  const apiRequest = Object.assign(Object.assign({}, request), {\n    operation: 'REAUTH'\n  });\n  return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents the credentials returned by {@link PhoneAuthProvider}.\n *\n * @public\n */\nclass PhoneAuthCredential extends AuthCredential {\n  constructor(params) {\n    super(\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */);\n    this.params = params;\n  }\n  /** @internal */\n  static _fromVerification(verificationId, verificationCode) {\n    return new PhoneAuthCredential({\n      verificationId,\n      verificationCode\n    });\n  }\n  /** @internal */\n  static _fromTokenResponse(phoneNumber, temporaryProof) {\n    return new PhoneAuthCredential({\n      phoneNumber,\n      temporaryProof\n    });\n  }\n  /** @internal */\n  _getIdTokenResponse(auth) {\n    return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n  }\n  /** @internal */\n  _linkToIdToken(auth, idToken) {\n    return linkWithPhoneNumber$1(auth, Object.assign({\n      idToken\n    }, this._makeVerificationRequest()));\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n  }\n  /** @internal */\n  _makeVerificationRequest() {\n    const {\n      temporaryProof,\n      phoneNumber,\n      verificationId,\n      verificationCode\n    } = this.params;\n    if (temporaryProof && phoneNumber) {\n      return {\n        temporaryProof,\n        phoneNumber\n      };\n    }\n    return {\n      sessionInfo: verificationId,\n      code: verificationCode\n    };\n  }\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON() {\n    const obj = {\n      providerId: this.providerId\n    };\n    if (this.params.phoneNumber) {\n      obj.phoneNumber = this.params.phoneNumber;\n    }\n    if (this.params.temporaryProof) {\n      obj.temporaryProof = this.params.temporaryProof;\n    }\n    if (this.params.verificationCode) {\n      obj.verificationCode = this.params.verificationCode;\n    }\n    if (this.params.verificationId) {\n      obj.verificationId = this.params.verificationId;\n    }\n    return obj;\n  }\n  /** Generates a phone credential based on a plain object or a JSON string. */\n  static fromJSON(json) {\n    if (typeof json === 'string') {\n      json = JSON.parse(json);\n    }\n    const {\n      verificationId,\n      verificationCode,\n      phoneNumber,\n      temporaryProof\n    } = json;\n    if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n      return null;\n    }\n    return new PhoneAuthCredential({\n      verificationId,\n      verificationCode,\n      phoneNumber,\n      temporaryProof\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Maps the mode string in action code URL to Action Code Info operation.\n *\n * @param mode\n */\nfunction parseMode(mode) {\n  switch (mode) {\n    case 'recoverEmail':\n      return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n    case 'resetPassword':\n      return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n    case 'signIn':\n      return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n    case 'verifyEmail':\n      return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n    case 'verifyAndChangeEmail':\n      return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n    case 'revertSecondFactorAddition':\n      return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n    default:\n      return null;\n  }\n}\n/**\n * Helper to parse FDL links\n *\n * @param url\n */\nfunction parseDeepLink(url) {\n  const link = querystringDecode(extractQuerystring(url))['link'];\n  // Double link case (automatic redirect).\n  const doubleDeepLink = link ? querystringDecode(extractQuerystring(link))['deep_link_id'] : null;\n  // iOS custom scheme links.\n  const iOSDeepLink = querystringDecode(extractQuerystring(url))['deep_link_id'];\n  const iOSDoubleDeepLink = iOSDeepLink ? querystringDecode(extractQuerystring(iOSDeepLink))['link'] : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n/**\n * A utility class to parse email action URLs such as password reset, email verification,\n * email link sign in, etc.\n *\n * @public\n */\nclass ActionCodeURL {\n  /**\n   * @param actionLink - The link from which to extract the URL.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @internal\n   */\n  constructor(actionLink) {\n    var _a, _b, _c, _d, _e, _f;\n    const searchParams = querystringDecode(extractQuerystring(actionLink));\n    const apiKey = (_a = searchParams[\"apiKey\" /* QueryField.API_KEY */]) !== null && _a !== void 0 ? _a : null;\n    const code = (_b = searchParams[\"oobCode\" /* QueryField.CODE */]) !== null && _b !== void 0 ? _b : null;\n    const operation = parseMode((_c = searchParams[\"mode\" /* QueryField.MODE */]) !== null && _c !== void 0 ? _c : null);\n    // Validate API key, code and mode.\n    _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = (_d = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */]) !== null && _d !== void 0 ? _d : null;\n    this.languageCode = (_e = searchParams[\"lang\" /* QueryField.LANGUAGE_CODE */]) !== null && _e !== void 0 ? _e : null;\n    this.tenantId = (_f = searchParams[\"tenantId\" /* QueryField.TENANT_ID */]) !== null && _f !== void 0 ? _f : null;\n  }\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n   * otherwise returns null.\n   *\n   * @param link  - The email action link string.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @public\n   */\n  static parseLink(link) {\n    const actionLink = parseDeepLink(link);\n    try {\n      return new ActionCodeURL(actionLink);\n    } catch (_a) {\n      return null;\n    }\n  }\n}\n/**\n * Parses the email action link string and returns an {@link ActionCodeURL} if\n * the link is valid, otherwise returns null.\n *\n * @public\n */\nfunction parseActionCodeURL(link) {\n  return ActionCodeURL.parseLink(link);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating {@link EmailAuthCredential}.\n *\n * @public\n */\nclass EmailAuthProvider {\n  constructor() {\n    /**\n     * Always set to {@link ProviderId}.PASSWORD, even for email link.\n     */\n    this.providerId = EmailAuthProvider.PROVIDER_ID;\n  }\n  /**\n   * Initialize an {@link AuthCredential} using an email and password.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credential(email, password);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n   * ```\n   *\n   * @param email - Email address.\n   * @param password - User account password.\n   * @returns The auth provider credential.\n   */\n  static credential(email, password) {\n    return EmailAuthCredential._fromEmailAndPassword(email, password);\n  }\n  /**\n   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n   * email link operation.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * await sendSignInLinkToEmail(auth, email);\n   * // Obtain emailLink from user.\n   * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance used to verify the link.\n   * @param email - Email address.\n   * @param emailLink - Sign-in email link.\n   * @returns - The auth provider credential.\n   */\n  static credentialWithLink(email, emailLink) {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n  }\n}\n/**\n * Always set to {@link ProviderId}.PASSWORD, even for email link.\n */\nEmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n/**\n * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n */\nEmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n/**\n * Always set to {@link SignInMethod}.EMAIL_LINK.\n */\nEmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\n *\n * This class is not meant to be instantiated directly.\n *\n * @public\n */\nclass FederatedAuthProvider {\n  /**\n   * Constructor for generic OAuth providers.\n   *\n   * @param providerId - Provider for which credentials should be generated.\n   */\n  constructor(providerId) {\n    this.providerId = providerId;\n    /** @internal */\n    this.defaultLanguageCode = null;\n    /** @internal */\n    this.customParameters = {};\n  }\n  /**\n   * Set the language gode.\n   *\n   * @param languageCode - language code\n   */\n  setDefaultLanguage(languageCode) {\n    this.defaultLanguageCode = languageCode;\n  }\n  /**\n   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n   * operations.\n   *\n   * @remarks\n   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n   *\n   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n   */\n  setCustomParameters(customOAuthParameters) {\n    this.customParameters = customOAuthParameters;\n    return this;\n  }\n  /**\n   * Retrieve the current list of {@link CustomParameters}.\n   */\n  getCustomParameters() {\n    return this.customParameters;\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Common code to all OAuth providers. This is separate from the\n * {@link OAuthProvider} so that child providers (like\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n * Instead, they rely on a static `credential` method.\n */\nclass BaseOAuthProvider extends FederatedAuthProvider {\n  constructor() {\n    super(...arguments);\n    /** @internal */\n    this.scopes = [];\n  }\n  /**\n   * Add an OAuth scope to the credential.\n   *\n   * @param scope - Provider OAuth scope to add.\n   */\n  addScope(scope) {\n    // If not already added, add scope to list.\n    if (!this.scopes.includes(scope)) {\n      this.scopes.push(scope);\n    }\n    return this;\n  }\n  /**\n   * Retrieve the current list of OAuth scopes.\n   */\n  getScopes() {\n    return [...this.scopes];\n  }\n}\n/**\n * Provider for generating generic {@link OAuthCredential}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new OAuthProvider('google.com');\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a OAuth Access Token for the provider.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new OAuthProvider('google.com');\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a OAuth Access Token for the provider.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nclass OAuthProvider extends BaseOAuthProvider {\n  /**\n   * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json) {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return OAuthCredential._fromParams(obj);\n  }\n  /**\n   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n   *\n   * @remarks\n   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n   * the raw nonce must match the nonce field in the ID token.\n   *\n   * @example\n   * ```javascript\n   * // `googleUser` from the onsuccess Google Sign In callback.\n   * // Initialize a generate OAuth provider with a `google.com` providerId.\n   * const provider = new OAuthProvider('google.com');\n   * const credential = provider.credential({\n   *   idToken: googleUser.getAuthResponse().id_token,\n   * });\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param params - Either the options object containing the ID token, access token and raw nonce\n   * or the ID token string.\n   */\n  credential(params) {\n    return this._credential(Object.assign(Object.assign({}, params), {\n      nonce: params.rawNonce\n    }));\n  }\n  /** An internal credential method that accepts more permissive options */\n  _credential(params) {\n    _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    // For OAuthCredential, sign in method is same as providerId.\n    return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), {\n      providerId: this.providerId,\n      signInMethod: this.providerId\n    }));\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n  }\n  static oauthCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const {\n      oauthIdToken,\n      oauthAccessToken,\n      oauthTokenSecret,\n      pendingToken,\n      nonce,\n      providerId\n    } = tokenResponse;\n    if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n      return null;\n    }\n    if (!providerId) {\n      return null;\n    }\n    try {\n      return new OAuthProvider(providerId)._credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        nonce,\n        pendingToken\n      });\n    } catch (e) {\n      return null;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('user_birthday');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * provider.addScope('user_birthday');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = FacebookAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nclass FacebookAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\"facebook.com\" /* ProviderId.FACEBOOK */);\n  }\n  /**\n   * Creates a credential for Facebook.\n   *\n   * @example\n   * ```javascript\n   * // `event` from the Facebook auth.authResponseChange callback.\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param accessToken - Facebook access token.\n   */\n  static credential(accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: FacebookAuthProvider.PROVIDER_ID,\n      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }) {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n    try {\n      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch (_a) {\n      return null;\n    }\n  }\n}\n/** Always set to {@link SignInMethod}.FACEBOOK. */\nFacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n/** Always set to {@link ProviderId}.FACEBOOK. */\nFacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GoogleAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Google Access Token.\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GoogleAuthProvider();\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Google Access Token.\n * const credential = GoogleAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nclass GoogleAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\"google.com\" /* ProviderId.GOOGLE */);\n    this.addScope('profile');\n  }\n  /**\n   * Creates a credential for Google. At least one of ID token and access token is required.\n   *\n   * @example\n   * ```javascript\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param idToken - Google ID token.\n   * @param accessToken - Google access token.\n   */\n  static credential(idToken, accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: GoogleAuthProvider.PROVIDER_ID,\n      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n      idToken,\n      accessToken\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const {\n      oauthIdToken,\n      oauthAccessToken\n    } = tokenResponse;\n    if (!oauthIdToken && !oauthAccessToken) {\n      // This could be an oauth 1 credential or a phone credential\n      return null;\n    }\n    try {\n      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n    } catch (_a) {\n      return null;\n    }\n  }\n}\n/** Always set to {@link SignInMethod}.GOOGLE. */\nGoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n/** Always set to {@link ProviderId}.GOOGLE. */\nGoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n *\n * @remarks\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n * the {@link signInWithPopup} handler:\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GithubAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('repo');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a GitHub Access Token.\n *   const credential = GithubAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GithubAuthProvider();\n * provider.addScope('repo');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a GitHub Access Token.\n * const credential = GithubAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nclass GithubAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\"github.com\" /* ProviderId.GITHUB */);\n  }\n  /**\n   * Creates a credential for GitHub.\n   *\n   * @param accessToken - GitHub access token.\n   */\n  static credential(accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: GithubAuthProvider.PROVIDER_ID,\n      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }) {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n    try {\n      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch (_a) {\n      return null;\n    }\n  }\n}\n/** Always set to {@link SignInMethod}.GITHUB. */\nGithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n/** Always set to {@link ProviderId}.GITHUB. */\nGithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst IDP_REQUEST_URI = 'http://localhost';\n/**\n * @public\n */\nclass SAMLAuthCredential extends AuthCredential {\n  /** @internal */\n  constructor(providerId, pendingToken) {\n    super(providerId, providerId);\n    this.pendingToken = pendingToken;\n  }\n  /** @internal */\n  _getIdTokenResponse(auth) {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _linkToIdToken(auth, idToken) {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON() {\n    return {\n      signInMethod: this.signInMethod,\n      providerId: this.providerId,\n      pendingToken: this.pendingToken\n    };\n  }\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json) {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const {\n      providerId,\n      signInMethod,\n      pendingToken\n    } = obj;\n    if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n      return null;\n    }\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n  /**\n   * Helper static method to avoid exposing the constructor to end users.\n   *\n   * @internal\n   */\n  static _create(providerId, pendingToken) {\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n  buildRequest() {\n    return {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true,\n      pendingToken: this.pendingToken\n    };\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SAML_PROVIDER_PREFIX = 'saml.';\n/**\n * An {@link AuthProvider} for SAML.\n *\n * @public\n */\nclass SAMLAuthProvider extends FederatedAuthProvider {\n  /**\n   * Constructor. The providerId must start with \"saml.\"\n   * @param providerId - SAML provider ID.\n   */\n  constructor(providerId) {\n    _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    super(providerId);\n  }\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n   * successful SAML flow completes.\n   *\n   * @remarks\n   *\n   * For example, to get an {@link AuthCredential}, you could write the\n   * following code:\n   *\n   * ```js\n   * const userCredential = await signInWithPopup(auth, samlProvider);\n   * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n   * ```\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n  }\n  /**\n   * Creates an {@link AuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json) {\n    const credential = SAMLAuthCredential.fromJSON(json);\n    _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return credential;\n  }\n  static samlCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const {\n      pendingToken,\n      providerId\n    } = tokenResponse;\n    if (!pendingToken || !providerId) {\n      return null;\n    }\n    try {\n      return SAMLAuthCredential._create(providerId, pendingToken);\n    } catch (e) {\n      return null;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new TwitterAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Twitter Access Token and Secret.\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n *   const secret = credential.secret;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new TwitterAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Twitter Access Token and Secret.\n * const credential = TwitterAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * const secret = credential.secret;\n * ```\n *\n * @public\n */\nclass TwitterAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\"twitter.com\" /* ProviderId.TWITTER */);\n  }\n  /**\n   * Creates a credential for Twitter.\n   *\n   * @param token - Twitter access token.\n   * @param secret - Twitter secret.\n   */\n  static credential(token, secret) {\n    return OAuthCredential._fromParams({\n      providerId: TwitterAuthProvider.PROVIDER_ID,\n      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n      oauthToken: token,\n      oauthTokenSecret: secret\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const {\n      oauthAccessToken,\n      oauthTokenSecret\n    } = tokenResponse;\n    if (!oauthAccessToken || !oauthTokenSecret) {\n      return null;\n    }\n    try {\n      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n    } catch (_a) {\n      return null;\n    }\n  }\n}\n/** Always set to {@link SignInMethod}.TWITTER. */\nTwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n/** Always set to {@link ProviderId}.TWITTER. */\nTwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function signUp(auth, request) {\n  return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass UserCredentialImpl {\n  constructor(params) {\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n  static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\n    const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n    const providerId = providerIdForResponse(idTokenResponse);\n    const userCred = new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: idTokenResponse,\n      operationType\n    });\n    return userCred;\n  }\n  static async _forOperation(user, operationType, response) {\n    await user._updateTokensIfNecessary(response, /* reload */true);\n    const providerId = providerIdForResponse(response);\n    return new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: response,\n      operationType\n    });\n  }\n}\nfunction providerIdForResponse(response) {\n  if (response.providerId) {\n    return response.providerId;\n  }\n  if ('phoneNumber' in response) {\n    return \"phone\" /* ProviderId.PHONE */;\n  }\n  return null;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Asynchronously signs in as an anonymous user.\n *\n * @remarks\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n * new anonymous user identity will be created and returned.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nasync function signInAnonymously(auth) {\n  var _a;\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  const authInternal = _castAuth(auth);\n  await authInternal._initializationPromise;\n  if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {\n    // If an anonymous user is already signed in, no need to sign them in again.\n    return new UserCredentialImpl({\n      user: authInternal.currentUser,\n      providerId: null,\n      operationType: \"signIn\" /* OperationType.SIGN_IN */\n    });\n  }\n  const response = await signUp(authInternal, {\n    returnSecureToken: true\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MultiFactorError extends FirebaseError {\n  constructor(auth, error, operationType, user) {\n    var _a;\n    super(error.code, error.message);\n    this.operationType = operationType;\n    this.user = user;\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, MultiFactorError.prototype);\n    this.customData = {\n      appName: auth.name,\n      tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,\n      _serverResponse: error.customData._serverResponse,\n      operationType\n    };\n  }\n  static _fromErrorAndOperation(auth, error, operationType, user) {\n    return new MultiFactorError(auth, error, operationType, user);\n  }\n}\nfunction _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n  const idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n  return idTokenProvider.catch(error => {\n    if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\n      throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n    }\n    throw error;\n  });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Takes a set of UserInfo provider data and converts it to a set of names\n */\nfunction providerDataAsNames(providerData) {\n  return new Set(providerData.map(({\n    providerId\n  }) => providerId).filter(pid => !!pid));\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unlinks a provider from a user account.\n *\n * @param user - The user.\n * @param providerId - The provider to unlink.\n *\n * @public\n */\nasync function unlink(user, providerId) {\n  const userInternal = getModularInstance(user);\n  await _assertLinkedStatus(true, userInternal, providerId);\n  const {\n    providerUserInfo\n  } = await deleteLinkedAccounts(userInternal.auth, {\n    idToken: await userInternal.getIdToken(),\n    deleteProvider: [providerId]\n  });\n  const providersLeft = providerDataAsNames(providerUserInfo || []);\n  userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\n  if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n    userInternal.phoneNumber = null;\n  }\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  return userInternal;\n}\nasync function _link$1(user, credential, bypassAuthState = false) {\n  const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\n  return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\n}\nasync function _assertLinkedStatus(expected, user, provider) {\n  await _reloadWithoutSaving(user);\n  const providerIds = providerDataAsNames(user.providerData);\n  const code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\n  _assert(providerIds.has(provider) === expected, user.auth, code);\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function _reauthenticate(user, credential, bypassAuthState = false) {\n  const {\n    auth\n  } = user;\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  const operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\n  try {\n    const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n    _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const parsed = _parseToken(response.idToken);\n    _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const {\n      sub: localId\n    } = parsed;\n    _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n    return UserCredentialImpl._forOperation(user, operationType, response);\n  } catch (e) {\n    // Convert user deleted error into user mismatch\n    if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\n      _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n    }\n    throw e;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function _signInWithCredential(auth, credential, bypassAuthState = false) {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  const operationType = \"signIn\" /* OperationType.SIGN_IN */;\n  const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n  if (!bypassAuthState) {\n    await auth._updateCurrentUser(userCredential.user);\n  }\n  return userCredential;\n}\n/**\n * Asynchronously signs in with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param credential - The auth credential.\n *\n * @public\n */\nasync function signInWithCredential(auth, credential) {\n  return _signInWithCredential(_castAuth(auth), credential);\n}\n/**\n * Links the user account with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nasync function linkWithCredential(user, credential) {\n  const userInternal = getModularInstance(user);\n  await _assertLinkedStatus(false, userInternal, credential.providerId);\n  return _link$1(userInternal, credential);\n}\n/**\n * Re-authenticates a user using a fresh credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n * or a `TOKEN_EXPIRED` error.\n *\n * This method is not supported on any {@link User} signed in by {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nasync function reauthenticateWithCredential(user, credential) {\n  return _reauthenticate(getModularInstance(user), credential);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function signInWithCustomToken$1(auth, request) {\n  return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Asynchronously signs in using a custom token.\n *\n * @remarks\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n * be generated by an auth backend using the\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n *\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param customToken - The custom token to sign in with.\n *\n * @public\n */\nasync function signInWithCustomToken(auth, customToken) {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  const authInternal = _castAuth(auth);\n  const response = await signInWithCustomToken$1(authInternal, {\n    token: customToken,\n    returnSecureToken: true\n  });\n  const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n  await authInternal._updateCurrentUser(cred.user);\n  return cred;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MultiFactorInfoImpl {\n  constructor(factorId, response) {\n    this.factorId = factorId;\n    this.uid = response.mfaEnrollmentId;\n    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n    this.displayName = response.displayName;\n  }\n  static _fromServerResponse(auth, enrollment) {\n    if ('phoneInfo' in enrollment) {\n      return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    } else if ('totpInfo' in enrollment) {\n      return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    }\n    return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  }\n}\nclass PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\n  constructor(response) {\n    super(\"phone\" /* FactorId.PHONE */, response);\n    this.phoneNumber = response.phoneInfo;\n  }\n  static _fromServerResponse(_auth, enrollment) {\n    return new PhoneMultiFactorInfoImpl(enrollment);\n  }\n}\nclass TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\n  constructor(response) {\n    super(\"totp\" /* FactorId.TOTP */, response);\n  }\n  static _fromServerResponse(_auth, enrollment) {\n    return new TotpMultiFactorInfoImpl(enrollment);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n  var _a;\n  _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n  _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n  _assert(typeof actionCodeSettings.linkDomain === 'undefined' || actionCodeSettings.linkDomain.length > 0, auth, \"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */);\n  request.continueUrl = actionCodeSettings.url;\n  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n  request.linkDomain = actionCodeSettings.linkDomain;\n  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n  if (actionCodeSettings.iOS) {\n    _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n    request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n  }\n  if (actionCodeSettings.android) {\n    _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n    request.androidInstallApp = actionCodeSettings.android.installApp;\n    request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n    request.androidPackageName = actionCodeSettings.android.packageName;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Updates the password policy cached in the {@link Auth} instance if a policy is already\n * cached for the project or tenant.\n *\n * @remarks\n * We only fetch the password policy if the password did not meet policy requirements and\n * there is an existing policy cached. A developer must call validatePassword at least\n * once for the cache to be automatically updated.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @private\n */\nasync function recachePasswordPolicy(auth) {\n  const authInternal = _castAuth(auth);\n  if (authInternal._getPasswordPolicyInternal()) {\n    await authInternal._updatePasswordPolicy();\n  }\n}\n/**\n * Sends a password reset email to the given email address. This method does not throw an error when\n * there's no user account with the given email address and\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled.\n *\n * @remarks\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n * the email sent to the user, along with the new password specified by the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain code from user.\n * await confirmPasswordReset('user@example.com', code);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nasync function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n  const authInternal = _castAuth(auth);\n  const request = {\n    requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n    email,\n    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n  }\n  await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n}\n/**\n * Completes the password reset process, given a confirmation code and new password.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A confirmation code sent to the user.\n * @param newPassword - The new password.\n *\n * @public\n */\nasync function confirmPasswordReset(auth, oobCode, newPassword) {\n  await resetPassword(getModularInstance(auth), {\n    oobCode,\n    newPassword\n  }).catch(async error => {\n    if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n      void recachePasswordPolicy(auth);\n    }\n    throw error;\n  });\n  // Do not return the email.\n}\n/**\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nasync function applyActionCode(auth, oobCode) {\n  await applyActionCode$1(getModularInstance(auth), {\n    oobCode\n  });\n}\n/**\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @returns metadata about the code.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nasync function checkActionCode(auth, oobCode) {\n  const authModular = getModularInstance(auth);\n  const response = await resetPassword(authModular, {\n    oobCode\n  });\n  // Email could be empty only if the request type is EMAIL_SIGNIN or\n  // VERIFY_AND_CHANGE_EMAIL.\n  // New email should not be empty if the request type is\n  // VERIFY_AND_CHANGE_EMAIL.\n  // Multi-factor info could not be empty if the request type is\n  // REVERT_SECOND_FACTOR_ADDITION.\n  const operation = response.requestType;\n  _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  switch (operation) {\n    case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\n      break;\n    case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\n      _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      break;\n    case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\n      _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    // fall through\n    default:\n      _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  }\n  // The multi-factor info for revert second factor addition\n  let multiFactorInfo = null;\n  if (response.mfaInfo) {\n    multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n  }\n  return {\n    data: {\n      email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.newEmail : response.email) || null,\n      previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.email : response.newEmail) || null,\n      multiFactorInfo\n    },\n    operation\n  };\n}\n/**\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n *\n * @returns the user's email address if valid.\n *\n * @param auth - The {@link Auth} instance.\n * @param code - A verification code sent to the user.\n *\n * @public\n */\nasync function verifyPasswordResetCode(auth, code) {\n  const {\n    data\n  } = await checkActionCode(getModularInstance(auth), code);\n  // Email should always be present since a code was sent to it\n  return data.email;\n}\n/**\n * Creates a new user account associated with the specified email address and password.\n *\n * @remarks\n * On successful creation of the user account, this user will also be signed in to your application.\n *\n * User account creation can fail if the account already exists or the password is invalid.\n *\n * This method is not supported on {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * Note: The email address acts as a unique identifier for the user and enables an email-based\n * password reset. This function will create a new user account and set the initial user password.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param password - The user's chosen password.\n *\n * @public\n */\nasync function createUserWithEmailAndPassword(auth, email, password) {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  const authInternal = _castAuth(auth);\n  const request = {\n    returnSecureToken: true,\n    email,\n    password,\n    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n  };\n  const signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  const response = await signUpResponse.catch(error => {\n    if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n      void recachePasswordPolicy(auth);\n    }\n    throw error;\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\n/**\n * Asynchronously signs in using an email and password.\n *\n * @remarks\n * Fails with an error if the email address and password do not match. When\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\n * email/password.\n *\n * This method is not supported on {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * Note: The user's password is NOT the password used to access the user's email account. The\n * email address serves as a unique identifier for the user, and the password is used to access\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n *\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The users email address.\n * @param password - The users password.\n *\n * @public\n */\nfunction signInWithEmailAndPassword(auth, email, password) {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  return signInWithCredential(getModularInstance(auth), EmailAuthProvider.credential(email, password)).catch(async error => {\n    if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n      void recachePasswordPolicy(auth);\n    }\n    throw error;\n  });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sends a sign-in email link to the user with the specified email.\n *\n * @remarks\n * The sign-in operation has to always be completed in the app unlike other out of band email\n * actions (password reset and email verifications). This is because, at the end of the flow,\n * the user is expected to be signed in and their Auth state persisted within the app.\n *\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n * address and the email link supplied in the email sent to the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @param authInternal - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nasync function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n  const authInternal = _castAuth(auth);\n  const request = {\n    requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n    email,\n    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n  };\n  function setActionCodeSettings(request, actionCodeSettings) {\n    _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n    }\n  }\n  setActionCodeSettings(request, actionCodeSettings);\n  await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n}\n/**\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n *\n * @param auth - The {@link Auth} instance.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nfunction isSignInWithEmailLink(auth, emailLink) {\n  const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n  return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n}\n/**\n * Asynchronously signs in using an email and sign-in email link.\n *\n * @remarks\n * If no link is passed, the link is inferred from the current URL.\n *\n * Fails with an error if the email address is invalid or OTP in email link expires.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nasync function signInWithEmailLink(auth, email, emailLink) {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  const authModular = getModularInstance(auth);\n  const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n  // Check if the tenant ID in the email link matches the tenant ID on Auth\n  // instance.\n  _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n  return signInWithCredential(authModular, credential);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function createAuthUri(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Gets the list of possible sign in methods for the given email address. This method returns an\n * empty list when\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled, irrespective of the number of authentication methods available for the given email.\n *\n * @remarks\n * This is useful to differentiate methods of sign-in for the same provider, eg.\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\n * {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n *\n * Deprecated. Migrating off of this method is recommended as a security best-practice.\n * Learn more in the Identity Platform documentation for\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\n * @public\n */\nasync function fetchSignInMethodsForEmail(auth, email) {\n  // createAuthUri returns an error if continue URI is not http or https.\n  // For environments like Cordova, Chrome extensions, native frameworks, file\n  // systems, etc, use http://localhost as continue URL.\n  const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n  const request = {\n    identifier: email,\n    continueUri\n  };\n  const {\n    signinMethods\n  } = await createAuthUri(getModularInstance(auth), request);\n  return signinMethods || [];\n}\n/**\n * Sends a verification email to a user.\n *\n * @remarks\n * The verification process is completed by calling {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendEmailVerification(user, actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nasync function sendEmailVerification(user, actionCodeSettings) {\n  const userInternal = getModularInstance(user);\n  const idToken = await user.getIdToken();\n  const request = {\n    requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n    idToken\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n  }\n  const {\n    email\n  } = await sendEmailVerification$1(userInternal.auth, request);\n  if (email !== user.email) {\n    await user.reload();\n  }\n}\n/**\n * Sends a verification email to a new email address.\n *\n * @remarks\n * The user's email will be updated to the new one after being verified.\n *\n * If you have a custom email action handler, you can complete the verification process by calling\n * {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param newEmail - The new email address to be verified before update.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nasync function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n  const userInternal = getModularInstance(user);\n  const idToken = await user.getIdToken();\n  const request = {\n    requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n    idToken,\n    newEmail\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n  }\n  const {\n    email\n  } = await verifyAndChangeEmail(userInternal.auth, request);\n  if (email !== user.email) {\n    // If the local copy of the email on user is outdated, reload the\n    // user.\n    await user.reload();\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function updateProfile$1(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Updates a user's profile data.\n *\n * @param user - The user.\n * @param profile - The profile's `displayName` and `photoURL` to update.\n *\n * @public\n */\nasync function updateProfile(user, {\n  displayName,\n  photoURL: photoUrl\n}) {\n  if (displayName === undefined && photoUrl === undefined) {\n    return;\n  }\n  const userInternal = getModularInstance(user);\n  const idToken = await userInternal.getIdToken();\n  const profileRequest = {\n    idToken,\n    displayName,\n    photoUrl,\n    returnSecureToken: true\n  };\n  const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n  userInternal.displayName = response.displayName || null;\n  userInternal.photoURL = response.photoUrl || null;\n  // Update the password provider as well\n  const passwordProvider = userInternal.providerData.find(({\n    providerId\n  }) => providerId === \"password\" /* ProviderId.PASSWORD */);\n  if (passwordProvider) {\n    passwordProvider.displayName = userInternal.displayName;\n    passwordProvider.photoURL = userInternal.photoURL;\n  }\n  await userInternal._updateTokensIfNecessary(response);\n}\n/**\n * Updates the user's email address.\n *\n * @remarks\n * An email will be sent to the original email address (if it was set) that allows to revoke the\n * email address change, in order to protect them from account hijacking.\n *\n * This method is not supported on any {@link User} signed in by {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newEmail - The new email address.\n *\n * Throws \"auth/operation-not-allowed\" error when\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled.\n * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n *\n * @public\n */\nfunction updateEmail(user, newEmail) {\n  const userInternal = getModularInstance(user);\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n  }\n  return updateEmailOrPassword(userInternal, newEmail, null);\n}\n/**\n * Updates the user's password.\n *\n * @remarks\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newPassword - The new password.\n *\n * @public\n */\nfunction updatePassword(user, newPassword) {\n  return updateEmailOrPassword(getModularInstance(user), null, newPassword);\n}\nasync function updateEmailOrPassword(user, email, password) {\n  const {\n    auth\n  } = user;\n  const idToken = await user.getIdToken();\n  const request = {\n    idToken,\n    returnSecureToken: true\n  };\n  if (email) {\n    request.email = email;\n  }\n  if (password) {\n    request.password = password;\n  }\n  const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n  await user._updateTokensIfNecessary(response, /* reload */true);\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Parse the `AdditionalUserInfo` from the ID token response.\n *\n */\nfunction _fromIdTokenResponse(idTokenResponse) {\n  var _a, _b;\n  if (!idTokenResponse) {\n    return null;\n  }\n  const {\n    providerId\n  } = idTokenResponse;\n  const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n  const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n  if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {\n    const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];\n    if (signInProvider) {\n      const filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ && signInProvider !== \"custom\" /* ProviderId.CUSTOM */ ? signInProvider : null;\n      // Uses generic class in accordance with the legacy SDK.\n      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n    }\n  }\n  if (!providerId) {\n    return null;\n  }\n  switch (providerId) {\n    case \"facebook.com\" /* ProviderId.FACEBOOK */:\n      return new FacebookAdditionalUserInfo(isNewUser, profile);\n    case \"github.com\" /* ProviderId.GITHUB */:\n      return new GithubAdditionalUserInfo(isNewUser, profile);\n    case \"google.com\" /* ProviderId.GOOGLE */:\n      return new GoogleAdditionalUserInfo(isNewUser, profile);\n    case \"twitter.com\" /* ProviderId.TWITTER */:\n      return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n    case \"custom\" /* ProviderId.CUSTOM */:\n    case \"anonymous\" /* ProviderId.ANONYMOUS */:\n      return new GenericAdditionalUserInfo(isNewUser, null);\n    default:\n      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n  }\n}\nclass GenericAdditionalUserInfo {\n  constructor(isNewUser, providerId, profile = {}) {\n    this.isNewUser = isNewUser;\n    this.providerId = providerId;\n    this.profile = profile;\n  }\n}\nclass FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n  constructor(isNewUser, providerId, profile, username) {\n    super(isNewUser, providerId, profile);\n    this.username = username;\n  }\n}\nclass FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n  constructor(isNewUser, profile) {\n    super(isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile);\n  }\n}\nclass GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n  constructor(isNewUser, profile) {\n    super(isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null);\n  }\n}\nclass GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n  constructor(isNewUser, profile) {\n    super(isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile);\n  }\n}\nclass TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n  constructor(isNewUser, profile, screenName) {\n    super(isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName);\n  }\n}\n/**\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n *\n * @param userCredential - The user credential.\n *\n * @public\n */\nfunction getAdditionalUserInfo(userCredential) {\n  const {\n    user,\n    _tokenResponse\n  } = userCredential;\n  if (user.isAnonymous && !_tokenResponse) {\n    // Handle the special case where signInAnonymously() gets called twice.\n    // No network call is made so there's nothing to actually fill this in\n    return {\n      providerId: null,\n      isNewUser: false,\n      profile: null\n    };\n  }\n  return _fromIdTokenResponse(_tokenResponse);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Non-optional auth methods.\n/**\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\n * `Auth` session and applies this type of persistence for future sign-in requests, including\n * sign-in with redirect requests.\n *\n * @remarks\n * This makes it easy for a user signing in to specify whether their session should be\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n * that are shared by other users or have sensitive data.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * setPersistence(auth, browserSessionPersistence);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param persistence - The {@link Persistence} to use.\n * @returns A `Promise` that resolves once the persistence change has completed\n *\n * @public\n */\nfunction setPersistence(auth, persistence) {\n  return getModularInstance(auth).setPersistence(persistence);\n}\n/**\n * Loads the reCAPTCHA configuration into the `Auth` instance.\n *\n * @remarks\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n * verification flow should be triggered for each auth provider, into the\n * current Auth session.\n *\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\n * auth flows.\n *\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * initializeRecaptchaConfig(auth);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nfunction initializeRecaptchaConfig(auth) {\n  return _initializeRecaptchaConfig(auth);\n}\n/**\n * Validates the password against the password policy configured for the project or tenant.\n *\n * @remarks\n * If no tenant ID is set on the `Auth` instance, then this method will use the password\n * policy configured for the project. Otherwise, this method will use the policy configured\n * for the tenant. If a password policy has not been configured, then the default policy\n * configured for all projects will be used.\n *\n * If an auth flow fails because a submitted password does not meet the password policy\n * requirements and this method has previously been called, then this method will use the\n * most recent policy available when called again.\n *\n * @example\n * ```javascript\n * validatePassword(auth, 'some-password');\n * ```\n *\n * @param auth The {@link Auth} instance.\n * @param password The password to validate.\n *\n * @public\n */\nasync function validatePassword(auth, password) {\n  const authInternal = _castAuth(auth);\n  return authInternal.validatePassword(password);\n}\n/**\n * Adds an observer for changes to the signed-in user's ID token.\n *\n * @remarks\n * This includes sign-in, sign-out, and token refresh events.\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nfunction onIdTokenChanged(auth, nextOrObserver, error, completed) {\n  return getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);\n}\n/**\n * Adds a blocking callback that runs before an auth state change\n * sets a new user.\n *\n * @param auth - The {@link Auth} instance.\n * @param callback - callback triggered before new user value is set.\n *   If this throws, it blocks the user from being set.\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n *   callback throws, allowing you to undo any side effects.\n */\nfunction beforeAuthStateChanged(auth, callback, onAbort) {\n  return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\n * Adds an observer for changes to the user's sign-in state.\n *\n * @remarks\n * To keep the old behavior, see {@link onIdTokenChanged}.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nfunction onAuthStateChanged(auth, nextOrObserver, error, completed) {\n  return getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);\n}\n/**\n * Sets the current language to the default device/browser preference.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nfunction useDeviceLanguage(auth) {\n  getModularInstance(auth).useDeviceLanguage();\n}\n/**\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n * {@link Auth} instance.\n *\n * @remarks\n * A new instance copy of the user provided will be made and set as currentUser.\n *\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n * like other sign in methods.\n *\n * The operation fails with an error if the user to be updated belongs to a different Firebase\n * project.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param user - The new {@link User}.\n *\n * @public\n */\nfunction updateCurrentUser(auth, user) {\n  return getModularInstance(auth).updateCurrentUser(user);\n}\n/**\n * Signs out the current user.\n *\n * @remarks\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nfunction signOut(auth) {\n  return getModularInstance(auth).signOut();\n}\n/**\n * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n *\n * @param auth - The {@link Auth} instance.\n * @param token - The Apple OAuth access token.\n *\n * @public\n */\nfunction revokeAccessToken(auth, token) {\n  const authInternal = _castAuth(auth);\n  return authInternal.revokeAccessToken(token);\n}\n/**\n * Deletes and signs out the user.\n *\n * @remarks\n * Important: this is a security-sensitive operation that requires the user to have recently\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @public\n */\nasync function deleteUser(user) {\n  return getModularInstance(user).delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MultiFactorSessionImpl {\n  constructor(type, credential, user) {\n    this.type = type;\n    this.credential = credential;\n    this.user = user;\n  }\n  static _fromIdtoken(idToken, user) {\n    return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\n  }\n  static _fromMfaPendingCredential(mfaPendingCredential) {\n    return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n  }\n  toJSON() {\n    const key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ ? 'idToken' : 'pendingCredential';\n    return {\n      multiFactorSession: {\n        [key]: this.credential\n      }\n    };\n  }\n  static fromJSON(obj) {\n    var _a, _b;\n    if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {\n      if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {\n        return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n      } else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {\n        return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n      }\n    }\n    return null;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MultiFactorResolverImpl {\n  constructor(session, hints, signInResolver) {\n    this.session = session;\n    this.hints = hints;\n    this.signInResolver = signInResolver;\n  }\n  /** @internal */\n  static _fromError(authExtern, error) {\n    const auth = _castAuth(authExtern);\n    const serverResponse = error.customData._serverResponse;\n    const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n    _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n    return new MultiFactorResolverImpl(session, hints, async assertion => {\n      const mfaResponse = await assertion._process(auth, session);\n      // Clear out the unneeded fields from the old login response\n      delete serverResponse.mfaInfo;\n      delete serverResponse.mfaPendingCredential;\n      // Use in the new token & refresh token in the old response\n      const idTokenResponse = Object.assign(Object.assign({}, serverResponse), {\n        idToken: mfaResponse.idToken,\n        refreshToken: mfaResponse.refreshToken\n      });\n      // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n      switch (error.operationType) {\n        case \"signIn\" /* OperationType.SIGN_IN */:\n          const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n          await auth._updateCurrentUser(userCredential.user);\n          return userCredential;\n        case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\n          _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    });\n  }\n  async resolveSignIn(assertionExtern) {\n    const assertion = assertionExtern;\n    return this.signInResolver(assertion);\n  }\n}\n/**\n * Provides a {@link MultiFactorResolver} suitable for completion of a\n * multi-factor flow.\n *\n * @param auth - The {@link Auth} instance.\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\n * reauthentication operation.\n *\n * @public\n */\nfunction getMultiFactorResolver(auth, error) {\n  var _a;\n  const authModular = getModularInstance(auth);\n  const errorInternal = error;\n  _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n  _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n  return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction startEnrollPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeEnrollPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction startEnrollTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeEnrollTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction withdrawMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n}\nclass MultiFactorUserImpl {\n  constructor(user) {\n    this.user = user;\n    this.enrolledFactors = [];\n    user._onReload(userInfo => {\n      if (userInfo.mfaInfo) {\n        this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n      }\n    });\n  }\n  static _fromUser(user) {\n    return new MultiFactorUserImpl(user);\n  }\n  async getSession() {\n    return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);\n  }\n  async enroll(assertionExtern, displayName) {\n    const assertion = assertionExtern;\n    const session = await this.getSession();\n    const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n    // New tokens will be issued after enrollment of the new second factors.\n    // They need to be updated on the user.\n    await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n    // The user needs to be reloaded to get the new multi-factor information\n    // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n    // will be updated.\n    return this.user.reload();\n  }\n  async unenroll(infoOrUid) {\n    const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n    const idToken = await this.user.getIdToken();\n    try {\n      const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n        idToken,\n        mfaEnrollmentId\n      }));\n      // Remove the second factor from the user's list.\n      this.enrolledFactors = this.enrolledFactors.filter(({\n        uid\n      }) => uid !== mfaEnrollmentId);\n      // Depending on whether the backend decided to revoke the user's session,\n      // the tokenResponse may be empty. If the tokens were not updated (and they\n      // are now invalid), reloading the user will discover this and invalidate\n      // the user's state accordingly.\n      await this.user._updateTokensIfNecessary(idTokenResponse);\n      await this.user.reload();\n    } catch (e) {\n      throw e;\n    }\n  }\n}\nconst multiFactorUserCache = new WeakMap();\n/**\n * The {@link MultiFactorUser} corresponding to the user.\n *\n * @remarks\n * This is used to access all multi-factor properties and operations related to the user.\n *\n * @param user - The user.\n *\n * @public\n */\nfunction multiFactor(user) {\n  const userModular = getModularInstance(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n  }\n  return multiFactorUserCache.get(userModular);\n}\nconst STORAGE_AVAILABLE_KEY = '__sak';\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// There are two different browser persistence types: local and session.\n// Both have the same implementation but use a different underlying storage\n// object.\nclass BrowserPersistenceClass {\n  constructor(storageRetriever, type) {\n    this.storageRetriever = storageRetriever;\n    this.type = type;\n  }\n  _isAvailable() {\n    try {\n      if (!this.storage) {\n        return Promise.resolve(false);\n      }\n      this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n      this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n      return Promise.resolve(true);\n    } catch (_a) {\n      return Promise.resolve(false);\n    }\n  }\n  _set(key, value) {\n    this.storage.setItem(key, JSON.stringify(value));\n    return Promise.resolve();\n  }\n  _get(key) {\n    const json = this.storage.getItem(key);\n    return Promise.resolve(json ? JSON.parse(json) : null);\n  }\n  _remove(key) {\n    this.storage.removeItem(key);\n    return Promise.resolve();\n  }\n  get storage() {\n    return this.storageRetriever();\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The polling period in case events are not supported\nconst _POLLING_INTERVAL_MS$1 = 1000;\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\nconst IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\nclass BrowserLocalPersistence extends BrowserPersistenceClass {\n  constructor() {\n    super(() => window.localStorage, \"LOCAL\" /* PersistenceType.LOCAL */);\n    this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);\n    this.listeners = {};\n    this.localCache = {};\n    // setTimeout return value is platform specific\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.pollTimer = null;\n    // Whether to use polling instead of depending on window events\n    this.fallbackToPolling = _isMobileBrowser();\n    this._shouldAllowMigration = true;\n  }\n  forAllChangedKeys(cb) {\n    // Check all keys with listeners on them.\n    for (const key of Object.keys(this.listeners)) {\n      // Get value from localStorage.\n      const newValue = this.storage.getItem(key);\n      const oldValue = this.localCache[key];\n      // If local map value does not match, trigger listener with storage event.\n      // Differentiate this simulated event from the real storage event.\n      if (newValue !== oldValue) {\n        cb(key, oldValue, newValue);\n      }\n    }\n  }\n  onStorageEvent(event, poll = false) {\n    // Key would be null in some situations, like when localStorage is cleared\n    if (!event.key) {\n      this.forAllChangedKeys((key, _oldValue, newValue) => {\n        this.notifyListeners(key, newValue);\n      });\n      return;\n    }\n    const key = event.key;\n    // Check the mechanism how this event was detected.\n    // The first event will dictate the mechanism to be used.\n    if (poll) {\n      // Environment detects storage changes via polling.\n      // Remove storage event listener to prevent possible event duplication.\n      this.detachListener();\n    } else {\n      // Environment detects storage changes via storage event listener.\n      // Remove polling listener to prevent possible event duplication.\n      this.stopPolling();\n    }\n    const triggerListeners = () => {\n      // Keep local map up to date in case storage event is triggered before\n      // poll.\n      const storedValue = this.storage.getItem(key);\n      if (!poll && this.localCache[key] === storedValue) {\n        // Real storage event which has already been detected, do nothing.\n        // This seems to trigger in some IE browsers for some reason.\n        return;\n      }\n      this.notifyListeners(key, storedValue);\n    };\n    const storedValue = this.storage.getItem(key);\n    if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {\n      // IE 10 has this weird bug where a storage event would trigger with the\n      // correct key, oldValue and newValue but localStorage.getItem(key) does\n      // not yield the updated value until a few milliseconds. This ensures\n      // this recovers from that situation.\n      setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n    } else {\n      triggerListeners();\n    }\n  }\n  notifyListeners(key, value) {\n    this.localCache[key] = value;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(value ? JSON.parse(value) : value);\n      }\n    }\n  }\n  startPolling() {\n    this.stopPolling();\n    this.pollTimer = setInterval(() => {\n      this.forAllChangedKeys((key, oldValue, newValue) => {\n        this.onStorageEvent(new StorageEvent('storage', {\n          key,\n          oldValue,\n          newValue\n        }), /* poll */true);\n      });\n    }, _POLLING_INTERVAL_MS$1);\n  }\n  stopPolling() {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n  attachListener() {\n    window.addEventListener('storage', this.boundEventHandler);\n  }\n  detachListener() {\n    window.removeEventListener('storage', this.boundEventHandler);\n  }\n  _addListener(key, listener) {\n    if (Object.keys(this.listeners).length === 0) {\n      // Whether browser can detect storage event when it had already been pushed to the background.\n      // This may happen in some mobile browsers. A localStorage change in the foreground window\n      // will not be detected in the background window via the storage event.\n      // This was detected in iOS 7.x mobile browsers\n      if (this.fallbackToPolling) {\n        this.startPolling();\n      } else {\n        this.attachListener();\n      }\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      this.localCache[key] = this.storage.getItem(key);\n    }\n    this.listeners[key].add(listener);\n  }\n  _removeListener(key, listener) {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n    if (Object.keys(this.listeners).length === 0) {\n      this.detachListener();\n      this.stopPolling();\n    }\n  }\n  // Update local cache on base operations:\n  async _set(key, value) {\n    await super._set(key, value);\n    this.localCache[key] = JSON.stringify(value);\n  }\n  async _get(key) {\n    const value = await super._get(key);\n    this.localCache[key] = JSON.stringify(value);\n    return value;\n  }\n  async _remove(key) {\n    await super._remove(key);\n    delete this.localCache[key];\n  }\n}\nBrowserLocalPersistence.type = 'LOCAL';\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\n * for the underlying storage.\n *\n * @public\n */\nconst browserLocalPersistence = BrowserLocalPersistence;\n\n/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst POLLING_INTERVAL_MS = 1000;\n// Pull a cookie value from document.cookie\nfunction getDocumentCookie(name) {\n  var _a, _b;\n  const escapedName = name.replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&');\n  const matcher = RegExp(`${escapedName}=([^;]+)`);\n  return (_b = (_a = document.cookie.match(matcher)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : null;\n}\n// Produce a sanitized cookie name from the persistence key\nfunction getCookieName(key) {\n  // __HOST- doesn't work in localhost https://issues.chromium.org/issues/40196122 but it has\n  // desirable security properties, so lets use a different cookie name while in dev-mode.\n  // Already checked isSecureContext in _isAvailable, so if it's http we're hitting local.\n  const isDevMode = window.location.protocol === 'http:';\n  return `${isDevMode ? '__dev_' : '__HOST-'}FIREBASE_${key.split(':')[3]}`;\n}\nclass CookiePersistence {\n  constructor() {\n    this.type = \"COOKIE\" /* PersistenceType.COOKIE */;\n    this.listenerUnsubscribes = new Map();\n  }\n  // used to get the URL to the backend to proxy to\n  _getFinalTarget(originalUrl) {\n    if (typeof window === undefined) {\n      return originalUrl;\n    }\n    const url = new URL(`${window.location.origin}/__cookies__`);\n    url.searchParams.set('finalTarget', originalUrl);\n    return url;\n  }\n  // To be a usable persistence method in a chain browserCookiePersistence ensures that\n  // prerequisites have been met, namely that we're in a secureContext, navigator and document are\n  // available and cookies are enabled. Not all UAs support these method, so fallback accordingly.\n  async _isAvailable() {\n    var _a;\n    if (typeof isSecureContext === 'boolean' && !isSecureContext) {\n      return false;\n    }\n    if (typeof navigator === 'undefined' || typeof document === 'undefined') {\n      return false;\n    }\n    return (_a = navigator.cookieEnabled) !== null && _a !== void 0 ? _a : true;\n  }\n  // Set should be a noop as we expect middleware to handle this\n  async _set(_key, _value) {\n    return;\n  }\n  // Attempt to get the cookie from cookieStore, fallback to document.cookie\n  async _get(key) {\n    if (!this._isAvailable()) {\n      return null;\n    }\n    const name = getCookieName(key);\n    if (window.cookieStore) {\n      const cookie = await window.cookieStore.get(name);\n      return cookie === null || cookie === void 0 ? void 0 : cookie.value;\n    }\n    return getDocumentCookie(name);\n  }\n  // Log out by overriding the idToken with a sentinel value of \"\"\n  async _remove(key) {\n    if (!this._isAvailable()) {\n      return;\n    }\n    // To make sure we don't hit signout over and over again, only do this operation if we need to\n    // with the logout sentinel value of \"\" this can cause race conditions. Unnecessary set-cookie\n    // headers will reduce CDN hit rates too.\n    const existingValue = await this._get(key);\n    if (!existingValue) {\n      return;\n    }\n    const name = getCookieName(key);\n    document.cookie = `${name}=;Max-Age=34560000;Partitioned;Secure;SameSite=Strict;Path=/;Priority=High`;\n    await fetch(`/__cookies__`, {\n      method: 'DELETE'\n    }).catch(() => undefined);\n  }\n  // Listen for cookie changes, both cookieStore and fallback to polling document.cookie\n  _addListener(key, listener) {\n    if (!this._isAvailable()) {\n      return;\n    }\n    const name = getCookieName(key);\n    if (window.cookieStore) {\n      const cb = event => {\n        const changedCookie = event.changed.find(change => change.name === name);\n        if (changedCookie) {\n          listener(changedCookie.value);\n        }\n        const deletedCookie = event.deleted.find(change => change.name === name);\n        if (deletedCookie) {\n          listener(null);\n        }\n      };\n      const unsubscribe = () => window.cookieStore.removeEventListener('change', cb);\n      this.listenerUnsubscribes.set(listener, unsubscribe);\n      return window.cookieStore.addEventListener('change', cb);\n    }\n    let lastValue = getDocumentCookie(name);\n    const interval = setInterval(() => {\n      const currentValue = getDocumentCookie(name);\n      if (currentValue !== lastValue) {\n        listener(currentValue);\n        lastValue = currentValue;\n      }\n    }, POLLING_INTERVAL_MS);\n    const unsubscribe = () => clearInterval(interval);\n    this.listenerUnsubscribes.set(listener, unsubscribe);\n  }\n  _removeListener(_key, listener) {\n    const unsubscribe = this.listenerUnsubscribes.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n    unsubscribe();\n    this.listenerUnsubscribes.delete(listener);\n  }\n}\nCookiePersistence.type = 'COOKIE';\n/**\n * An implementation of {@link Persistence} of type `COOKIE`, for use on the client side in\n * applications leveraging hybrid rendering and middleware.\n *\n * @remarks This persistence method requires companion middleware to function, such as that provided\n * by {@link https://firebaseopensource.com/projects/firebaseextended/reactfire/ | ReactFire} for\n * NextJS.\n * @beta\n */\nconst browserCookiePersistence = CookiePersistence;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass BrowserSessionPersistence extends BrowserPersistenceClass {\n  constructor() {\n    super(() => window.sessionStorage, \"SESSION\" /* PersistenceType.SESSION */);\n  }\n  _addListener(_key, _listener) {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n  _removeListener(_key, _listener) {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n}\nBrowserSessionPersistence.type = 'SESSION';\n/**\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\n * for the underlying storage.\n *\n * @public\n */\nconst browserSessionPersistence = BrowserSessionPersistence;\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\n *\n * @param promises - Array of promises to wait on.\n */\nfunction _allSettled(promises) {\n  return Promise.all(promises.map(async promise => {\n    try {\n      const value = await promise;\n      return {\n        fulfilled: true,\n        value\n      };\n    } catch (reason) {\n      return {\n        fulfilled: false,\n        reason\n      };\n    }\n  }));\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface class for receiving messages.\n *\n */\nclass Receiver {\n  constructor(eventTarget) {\n    this.eventTarget = eventTarget;\n    this.handlersMap = {};\n    this.boundEventHandler = this.handleEvent.bind(this);\n  }\n  /**\n   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n   *\n   * @param eventTarget - An event target (such as window or self) through which the underlying\n   * messages will be received.\n   */\n  static _getInstance(eventTarget) {\n    // The results are stored in an array since objects can't be keys for other\n    // objects. In addition, setting a unique property on an event target as a\n    // hash map key may not be allowed due to CORS restrictions.\n    const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));\n    if (existingInstance) {\n      return existingInstance;\n    }\n    const newInstance = new Receiver(eventTarget);\n    this.receivers.push(newInstance);\n    return newInstance;\n  }\n  isListeningto(eventTarget) {\n    return this.eventTarget === eventTarget;\n  }\n  /**\n   * Fans out a MessageEvent to the appropriate listeners.\n   *\n   * @remarks\n   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n   * finished processing.\n   *\n   * @param event - The MessageEvent.\n   *\n   */\n  async handleEvent(event) {\n    const messageEvent = event;\n    const {\n      eventId,\n      eventType,\n      data\n    } = messageEvent.data;\n    const handlers = this.handlersMap[eventType];\n    if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {\n      return;\n    }\n    messageEvent.ports[0].postMessage({\n      status: \"ack\" /* _Status.ACK */,\n      eventId,\n      eventType\n    });\n    const promises = Array.from(handlers).map(async handler => handler(messageEvent.origin, data));\n    const response = await _allSettled(promises);\n    messageEvent.ports[0].postMessage({\n      status: \"done\" /* _Status.DONE */,\n      eventId,\n      eventType,\n      response\n    });\n  }\n  /**\n   * Subscribe an event handler for a particular event.\n   *\n   * @param eventType - Event name to subscribe to.\n   * @param eventHandler - The event handler which should receive the events.\n   *\n   */\n  _subscribe(eventType, eventHandler) {\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.addEventListener('message', this.boundEventHandler);\n    }\n    if (!this.handlersMap[eventType]) {\n      this.handlersMap[eventType] = new Set();\n    }\n    this.handlersMap[eventType].add(eventHandler);\n  }\n  /**\n   * Unsubscribe an event handler from a particular event.\n   *\n   * @param eventType - Event name to unsubscribe from.\n   * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.\n   *\n   */\n  _unsubscribe(eventType, eventHandler) {\n    if (this.handlersMap[eventType] && eventHandler) {\n      this.handlersMap[eventType].delete(eventHandler);\n    }\n    if (!eventHandler || this.handlersMap[eventType].size === 0) {\n      delete this.handlersMap[eventType];\n    }\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.removeEventListener('message', this.boundEventHandler);\n    }\n  }\n}\nReceiver.receivers = [];\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _generateEventId(prefix = '', digits = 10) {\n  let random = '';\n  for (let i = 0; i < digits; i++) {\n    random += Math.floor(Math.random() * 10);\n  }\n  return prefix + random;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface for sending messages and waiting for a completion response.\n *\n */\nclass Sender {\n  constructor(target) {\n    this.target = target;\n    this.handlers = new Set();\n  }\n  /**\n   * Unsubscribe the handler and remove it from our tracking Set.\n   *\n   * @param handler - The handler to unsubscribe.\n   */\n  removeMessageHandler(handler) {\n    if (handler.messageChannel) {\n      handler.messageChannel.port1.removeEventListener('message', handler.onMessage);\n      handler.messageChannel.port1.close();\n    }\n    this.handlers.delete(handler);\n  }\n  /**\n   * Send a message to the Receiver located at {@link target}.\n   *\n   * @remarks\n   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n   * receiver has had a chance to fully process the event.\n   *\n   * @param eventType - Type of event to send.\n   * @param data - The payload of the event.\n   * @param timeout - Timeout for waiting on an ACK from the receiver.\n   *\n   * @returns An array of settled promises from all the handlers that were listening on the receiver.\n   */\n  async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */) {\n    const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\n    if (!messageChannel) {\n      throw new Error(\"connection_unavailable\" /* _MessageError.CONNECTION_UNAVAILABLE */);\n    }\n    // Node timers and browser timers return fundamentally different types.\n    // We don't actually care what the value is but TS won't accept unknown and\n    // we can't cast properly in both environments.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let completionTimer;\n    let handler;\n    return new Promise((resolve, reject) => {\n      const eventId = _generateEventId('', 20);\n      messageChannel.port1.start();\n      const ackTimer = setTimeout(() => {\n        reject(new Error(\"unsupported_event\" /* _MessageError.UNSUPPORTED_EVENT */));\n      }, timeout);\n      handler = {\n        messageChannel,\n        onMessage(event) {\n          const messageEvent = event;\n          if (messageEvent.data.eventId !== eventId) {\n            return;\n          }\n          switch (messageEvent.data.status) {\n            case \"ack\" /* _Status.ACK */:\n              // The receiver should ACK first.\n              clearTimeout(ackTimer);\n              completionTimer = setTimeout(() => {\n                reject(new Error(\"timeout\" /* _MessageError.TIMEOUT */));\n              }, 3000 /* _TimeoutDuration.COMPLETION */);\n              break;\n            case \"done\" /* _Status.DONE */:\n              // Once the receiver's handlers are finished we will get the results.\n              clearTimeout(completionTimer);\n              resolve(messageEvent.data.response);\n              break;\n            default:\n              clearTimeout(ackTimer);\n              clearTimeout(completionTimer);\n              reject(new Error(\"invalid_response\" /* _MessageError.INVALID_RESPONSE */));\n              break;\n          }\n        }\n      };\n      this.handlers.add(handler);\n      messageChannel.port1.addEventListener('message', handler.onMessage);\n      this.target.postMessage({\n        eventType,\n        eventId,\n        data\n      }, [messageChannel.port2]);\n    }).finally(() => {\n      if (handler) {\n        this.removeMessageHandler(handler);\n      }\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Lazy accessor for window, since the compat layer won't tree shake this out,\n * we need to make sure not to mess with window unless we have to\n */\nfunction _window() {\n  return window;\n}\nfunction _setWindowLocation(url) {\n  _window().location.href = url;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _isWorker() {\n  return typeof _window()['WorkerGlobalScope'] !== 'undefined' && typeof _window()['importScripts'] === 'function';\n}\nasync function _getActiveServiceWorker() {\n  if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {\n    return null;\n  }\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    return registration.active;\n  } catch (_a) {\n    return null;\n  }\n}\nfunction _getServiceWorkerController() {\n  var _a;\n  return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;\n}\nfunction _getWorkerGlobalScope() {\n  return _isWorker() ? self : null;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DB_NAME = 'firebaseLocalStorageDb';\nconst DB_VERSION = 1;\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\nconst DB_DATA_KEYPATH = 'fbase_key';\n/**\n * Promise wrapper for IDBRequest\n *\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\n *\n */\nclass DBPromise {\n  constructor(request) {\n    this.request = request;\n  }\n  toPromise() {\n    return new Promise((resolve, reject) => {\n      this.request.addEventListener('success', () => {\n        resolve(this.request.result);\n      });\n      this.request.addEventListener('error', () => {\n        reject(this.request.error);\n      });\n    });\n  }\n}\nfunction getObjectStore(db, isReadWrite) {\n  return db.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly').objectStore(DB_OBJECTSTORE_NAME);\n}\nfunction _deleteDatabase() {\n  const request = indexedDB.deleteDatabase(DB_NAME);\n  return new DBPromise(request).toPromise();\n}\nfunction _openDatabase() {\n  const request = indexedDB.open(DB_NAME, DB_VERSION);\n  return new Promise((resolve, reject) => {\n    request.addEventListener('error', () => {\n      reject(request.error);\n    });\n    request.addEventListener('upgradeneeded', () => {\n      const db = request.result;\n      try {\n        db.createObjectStore(DB_OBJECTSTORE_NAME, {\n          keyPath: DB_DATA_KEYPATH\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n    request.addEventListener('success', async () => {\n      const db = request.result;\n      // Strange bug that occurs in Firefox when multiple tabs are opened at the\n      // same time. The only way to recover seems to be deleting the database\n      // and re-initializing it.\n      // https://github.com/firebase/firebase-js-sdk/issues/634\n      if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n        // Need to close the database or else you get a `blocked` event\n        db.close();\n        await _deleteDatabase();\n        resolve(await _openDatabase());\n      } else {\n        resolve(db);\n      }\n    });\n  });\n}\nasync function _putObject(db, key, value) {\n  const request = getObjectStore(db, true).put({\n    [DB_DATA_KEYPATH]: key,\n    value\n  });\n  return new DBPromise(request).toPromise();\n}\nasync function getObject(db, key) {\n  const request = getObjectStore(db, false).get(key);\n  const data = await new DBPromise(request).toPromise();\n  return data === undefined ? null : data.value;\n}\nfunction _deleteObject(db, key) {\n  const request = getObjectStore(db, true).delete(key);\n  return new DBPromise(request).toPromise();\n}\nconst _POLLING_INTERVAL_MS = 800;\nconst _TRANSACTION_RETRY_COUNT = 3;\nclass IndexedDBLocalPersistence {\n  constructor() {\n    this.type = \"LOCAL\" /* PersistenceType.LOCAL */;\n    this._shouldAllowMigration = true;\n    this.listeners = {};\n    this.localCache = {};\n    // setTimeout return value is platform specific\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.pollTimer = null;\n    this.pendingWrites = 0;\n    this.receiver = null;\n    this.sender = null;\n    this.serviceWorkerReceiverAvailable = false;\n    this.activeServiceWorker = null;\n    // Fire & forget the service worker registration as it may never resolve\n    this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {}, () => {});\n  }\n  async _openDb() {\n    if (this.db) {\n      return this.db;\n    }\n    this.db = await _openDatabase();\n    return this.db;\n  }\n  async _withRetries(op) {\n    let numAttempts = 0;\n    while (true) {\n      try {\n        const db = await this._openDb();\n        return await op(db);\n      } catch (e) {\n        if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n          throw e;\n        }\n        if (this.db) {\n          this.db.close();\n          this.db = undefined;\n        }\n        // TODO: consider adding exponential backoff\n      }\n    }\n  }\n  /**\n   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n   * postMessage interface to send these events to the worker ourselves.\n   */\n  async initializeServiceWorkerMessaging() {\n    return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n  }\n  /**\n   * As the worker we should listen to events from the main window.\n   */\n  async initializeReceiver() {\n    this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\n    // Refresh from persistence if we receive a KeyChanged message.\n    this.receiver._subscribe(\"keyChanged\" /* _EventType.KEY_CHANGED */, async (_origin, data) => {\n      const keys = await this._poll();\n      return {\n        keyProcessed: keys.includes(data.key)\n      };\n    });\n    // Let the sender know that we are listening so they give us more timeout.\n    this.receiver._subscribe(\"ping\" /* _EventType.PING */, async (_origin, _data) => {\n      return [\"keyChanged\" /* _EventType.KEY_CHANGED */];\n    });\n  }\n  /**\n   * As the main window, we should let the worker know when keys change (set and remove).\n   *\n   * @remarks\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n   * may not resolve.\n   */\n  async initializeSender() {\n    var _a, _b;\n    // Check to see if there's an active service worker.\n    this.activeServiceWorker = await _getActiveServiceWorker();\n    if (!this.activeServiceWorker) {\n      return;\n    }\n    this.sender = new Sender(this.activeServiceWorker);\n    // Ping the service worker to check what events they can handle.\n    const results = await this.sender._send(\"ping\" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);\n    if (!results) {\n      return;\n    }\n    if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(\"keyChanged\" /* _EventType.KEY_CHANGED */))) {\n      this.serviceWorkerReceiverAvailable = true;\n    }\n  }\n  /**\n   * Let the worker know about a changed key, the exact key doesn't technically matter since the\n   * worker will just trigger a full sync anyway.\n   *\n   * @remarks\n   * For now, we only support one service worker per page.\n   *\n   * @param key - Storage key which changed.\n   */\n  async notifyServiceWorker(key) {\n    if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {\n      return;\n    }\n    try {\n      await this.sender._send(\"keyChanged\" /* _EventType.KEY_CHANGED */, {\n        key\n      },\n      // Use long timeout if receiver has previously responded to a ping from us.\n      this.serviceWorkerReceiverAvailable ? 800 /* _TimeoutDuration.LONG_ACK */ : 50 /* _TimeoutDuration.ACK */);\n    } catch (_a) {\n      // This is a best effort approach. Ignore errors.\n    }\n  }\n  async _isAvailable() {\n    try {\n      if (!indexedDB) {\n        return false;\n      }\n      const db = await _openDatabase();\n      await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\n      await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n      return true;\n    } catch (_a) {}\n    return false;\n  }\n  async _withPendingWrite(write) {\n    this.pendingWrites++;\n    try {\n      await write();\n    } finally {\n      this.pendingWrites--;\n    }\n  }\n  async _set(key, value) {\n    return this._withPendingWrite(async () => {\n      await this._withRetries(db => _putObject(db, key, value));\n      this.localCache[key] = value;\n      return this.notifyServiceWorker(key);\n    });\n  }\n  async _get(key) {\n    const obj = await this._withRetries(db => getObject(db, key));\n    this.localCache[key] = obj;\n    return obj;\n  }\n  async _remove(key) {\n    return this._withPendingWrite(async () => {\n      await this._withRetries(db => _deleteObject(db, key));\n      delete this.localCache[key];\n      return this.notifyServiceWorker(key);\n    });\n  }\n  async _poll() {\n    // TODO: check if we need to fallback if getAll is not supported\n    const result = await this._withRetries(db => {\n      const getAllRequest = getObjectStore(db, false).getAll();\n      return new DBPromise(getAllRequest).toPromise();\n    });\n    if (!result) {\n      return [];\n    }\n    // If we have pending writes in progress abort, we'll get picked up on the next poll\n    if (this.pendingWrites !== 0) {\n      return [];\n    }\n    const keys = [];\n    const keysInResult = new Set();\n    if (result.length !== 0) {\n      for (const {\n        fbase_key: key,\n        value\n      } of result) {\n        keysInResult.add(key);\n        if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n          this.notifyListeners(key, value);\n          keys.push(key);\n        }\n      }\n    }\n    for (const localKey of Object.keys(this.localCache)) {\n      if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n        // Deleted\n        this.notifyListeners(localKey, null);\n        keys.push(localKey);\n      }\n    }\n    return keys;\n  }\n  notifyListeners(key, newValue) {\n    this.localCache[key] = newValue;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(newValue);\n      }\n    }\n  }\n  startPolling() {\n    this.stopPolling();\n    this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\n  }\n  stopPolling() {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n  _addListener(key, listener) {\n    if (Object.keys(this.listeners).length === 0) {\n      this.startPolling();\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      void this._get(key); // This can happen in the background async and we can return immediately.\n    }\n    this.listeners[key].add(listener);\n  }\n  _removeListener(key, listener) {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n    if (Object.keys(this.listeners).length === 0) {\n      this.stopPolling();\n    }\n  }\n}\nIndexedDBLocalPersistence.type = 'LOCAL';\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\n * for the underlying storage.\n *\n * @public\n */\nconst indexedDBLocalPersistence = IndexedDBLocalPersistence;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction startSignInPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeSignInPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeSignInTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// ReCaptcha will load using the same callback, so the callback function needs\n// to be kept around\nconst _JSLOAD_CALLBACK = _generateCallbackName('rcb');\nconst NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\n/**\n * Loader for the GReCaptcha library. There should only ever be one of this.\n */\nclass ReCaptchaLoaderImpl {\n  constructor() {\n    var _a;\n    this.hostLanguage = '';\n    this.counter = 0;\n    /**\n     * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n     * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n     * `window.grecaptcha.render()` will not. Another load will add it.\n     */\n    this.librarySeparatelyLoaded = !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);\n  }\n  load(auth, hl = '') {\n    _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n      return Promise.resolve(_window().grecaptcha);\n    }\n    return new Promise((resolve, reject) => {\n      const networkTimeout = _window().setTimeout(() => {\n        reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n      }, NETWORK_TIMEOUT_DELAY.get());\n      _window()[_JSLOAD_CALLBACK] = () => {\n        _window().clearTimeout(networkTimeout);\n        delete _window()[_JSLOAD_CALLBACK];\n        const recaptcha = _window().grecaptcha;\n        if (!recaptcha || !isV2(recaptcha)) {\n          reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n          return;\n        }\n        // Wrap the recaptcha render function so that we know if the developer has\n        // called it separately\n        const render = recaptcha.render;\n        recaptcha.render = (container, params) => {\n          const widgetId = render(container, params);\n          this.counter++;\n          return widgetId;\n        };\n        this.hostLanguage = hl;\n        resolve(recaptcha);\n      };\n      const url = `${_recaptchaV2ScriptUrl()}?${querystring({\n        onload: _JSLOAD_CALLBACK,\n        render: 'explicit',\n        hl\n      })}`;\n      _loadJS(url).catch(() => {\n        clearTimeout(networkTimeout);\n        reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n      });\n    });\n  }\n  clearedOneInstance() {\n    this.counter--;\n  }\n  shouldResolveImmediately(hl) {\n    var _a;\n    // We can resolve immediately if:\n    //   • grecaptcha is already defined AND (\n    //     1. the requested language codes are the same OR\n    //     2. there exists already a ReCaptcha on the page\n    //     3. the library was already loaded by the app\n    // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n    // that are already in the page\n    return !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);\n  }\n}\nfunction isHostLanguageValid(hl) {\n  return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\nclass MockReCaptchaLoaderImpl {\n  async load(auth) {\n    return new MockReCaptcha(auth);\n  }\n  clearedOneInstance() {}\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\nconst DEFAULT_PARAMS = {\n  theme: 'light',\n  type: 'image'\n};\n/**\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n *\n * @remarks\n * `RecaptchaVerifier` does not work in a Node.js environment.\n *\n * @public\n */\nclass RecaptchaVerifier {\n  /**\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   * @param containerOrId - The reCAPTCHA container parameter.\n   *\n   * @remarks\n   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n   * an element ID. The corresponding element must also must be in the DOM at the time of\n   * initialization.\n   *\n   * @param parameters - The optional reCAPTCHA parameters.\n   *\n   * @remarks\n   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n   * 'invisible'.\n   */\n  constructor(authExtern, containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS)) {\n    this.parameters = parameters;\n    /**\n     * The application verifier type.\n     *\n     * @remarks\n     * For a reCAPTCHA verifier, this is 'recaptcha'.\n     */\n    this.type = RECAPTCHA_VERIFIER_TYPE;\n    this.destroyed = false;\n    this.widgetId = null;\n    this.tokenChangeListeners = new Set();\n    this.renderPromise = null;\n    this.recaptcha = null;\n    this.auth = _castAuth(authExtern);\n    this.isInvisible = this.parameters.size === 'invisible';\n    _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n    _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    this.container = container;\n    this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n    this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();\n    this.validateStartingState();\n    // TODO: Figure out if sdk version is needed\n  }\n  /**\n   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n   *\n   * @returns A Promise for the reCAPTCHA token.\n   */\n  async verify() {\n    this.assertNotDestroyed();\n    const id = await this.render();\n    const recaptcha = this.getAssertedRecaptcha();\n    const response = recaptcha.getResponse(id);\n    if (response) {\n      return response;\n    }\n    return new Promise(resolve => {\n      const tokenChange = token => {\n        if (!token) {\n          return; // Ignore token expirations.\n        }\n        this.tokenChangeListeners.delete(tokenChange);\n        resolve(token);\n      };\n      this.tokenChangeListeners.add(tokenChange);\n      if (this.isInvisible) {\n        recaptcha.execute(id);\n      }\n    });\n  }\n  /**\n   * Renders the reCAPTCHA widget on the page.\n   *\n   * @returns A Promise that resolves with the reCAPTCHA widget ID.\n   */\n  render() {\n    try {\n      this.assertNotDestroyed();\n    } catch (e) {\n      // This method returns a promise. Since it's not async (we want to return the\n      // _same_ promise if rendering is still occurring), the API surface should\n      // reject with the error rather than just throw\n      return Promise.reject(e);\n    }\n    if (this.renderPromise) {\n      return this.renderPromise;\n    }\n    this.renderPromise = this.makeRenderPromise().catch(e => {\n      this.renderPromise = null;\n      throw e;\n    });\n    return this.renderPromise;\n  }\n  /** @internal */\n  _reset() {\n    this.assertNotDestroyed();\n    if (this.widgetId !== null) {\n      this.getAssertedRecaptcha().reset(this.widgetId);\n    }\n  }\n  /**\n   * Clears the reCAPTCHA widget from the page and destroys the instance.\n   */\n  clear() {\n    this.assertNotDestroyed();\n    this.destroyed = true;\n    this._recaptchaLoader.clearedOneInstance();\n    if (!this.isInvisible) {\n      this.container.childNodes.forEach(node => {\n        this.container.removeChild(node);\n      });\n    }\n  }\n  validateStartingState() {\n    _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n  }\n  makeTokenCallback(existing) {\n    return token => {\n      this.tokenChangeListeners.forEach(listener => listener(token));\n      if (typeof existing === 'function') {\n        existing(token);\n      } else if (typeof existing === 'string') {\n        const globalFunc = _window()[existing];\n        if (typeof globalFunc === 'function') {\n          globalFunc(token);\n        }\n      }\n    };\n  }\n  assertNotDestroyed() {\n    _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  }\n  async makeRenderPromise() {\n    await this.init();\n    if (!this.widgetId) {\n      let container = this.container;\n      if (!this.isInvisible) {\n        const guaranteedEmpty = document.createElement('div');\n        container.appendChild(guaranteedEmpty);\n        container = guaranteedEmpty;\n      }\n      this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\n    }\n    return this.widgetId;\n  }\n  async init() {\n    _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    await domReady();\n    this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);\n    const siteKey = await getRecaptchaParams(this.auth);\n    _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    this.parameters.sitekey = siteKey;\n  }\n  getAssertedRecaptcha() {\n    _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return this.recaptcha;\n  }\n}\nfunction domReady() {\n  let resolver = null;\n  return new Promise(resolve => {\n    if (document.readyState === 'complete') {\n      resolve();\n      return;\n    }\n    // Document not ready, wait for load before resolving.\n    // Save resolver, so we can remove listener in case it was externally\n    // cancelled.\n    resolver = () => resolve();\n    window.addEventListener('load', resolver);\n  }).catch(e => {\n    if (resolver) {\n      window.removeEventListener('load', resolver);\n    }\n    throw e;\n  });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ConfirmationResultImpl {\n  constructor(verificationId, onConfirmation) {\n    this.verificationId = verificationId;\n    this.onConfirmation = onConfirmation;\n  }\n  confirm(verificationCode) {\n    const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\n    return this.onConfirmation(authCredential);\n  }\n}\n/**\n * Asynchronously signs in using a phone number.\n *\n * @remarks\n * This method sends a code via SMS to the given\n * phone number, and returns a {@link ConfirmationResult}. After the user\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n * with the code to sign the user in.\n *\n * For abuse prevention, this method requires a {@link ApplicationVerifier}.\n * This SDK includes an implementation based on reCAPTCHA v2, {@link RecaptchaVerifier}.\n * This function can work on other platforms that do not support the\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\n * third-party {@link ApplicationVerifier} implementation.\n *\n * If you've enabled project-level reCAPTCHA Enterprise bot protection in\n * Enforce mode, you can omit the {@link ApplicationVerifier}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain a verificationCode from the user.\n * const credential = await confirmationResult.confirm(verificationCode);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nasync function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  const authInternal = _castAuth(auth);\n  const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, getModularInstance(appVerifier));\n  return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));\n}\n/**\n * Links the user account with the given phone number.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nasync function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n  const userInternal = getModularInstance(user);\n  await _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */);\n  const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));\n  return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));\n}\n/**\n * Re-authenticates a user using a fresh phone credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n *\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nasync function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n  const userInternal = getModularInstance(user);\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n  }\n  const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));\n  return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));\n}\n/**\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n *\n */\nasync function _verifyPhoneNumber(auth, options, verifier) {\n  var _a;\n  if (!auth._getRecaptchaConfig()) {\n    try {\n      await _initializeRecaptchaConfig(auth);\n    } catch (error) {\n      // If an error occurs while fetching the config, there is no way to know the enablement state\n      // of Phone provider, so we proceed with recaptcha V2 verification.\n      // The error is likely \"recaptchaKey undefined\", as reCAPTCHA Enterprise is not\n      // enabled for any provider.\n      console.log('Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.');\n    }\n  }\n  try {\n    let phoneInfoOptions;\n    if (typeof options === 'string') {\n      phoneInfoOptions = {\n        phoneNumber: options\n      };\n    } else {\n      phoneInfoOptions = options;\n    }\n    if ('session' in phoneInfoOptions) {\n      const session = phoneInfoOptions.session;\n      if ('phoneNumber' in phoneInfoOptions) {\n        _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        const startPhoneMfaEnrollmentRequest = {\n          idToken: session.credential,\n          phoneEnrollmentInfo: {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          }\n        };\n        const startEnrollPhoneMfaActionCallback = async (authInstance, request) => {\n          // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n          if (request.phoneEnrollmentInfo.captchaResponse === FAKE_TOKEN) {\n            _assert((verifier === null || verifier === void 0 ? void 0 : verifier.type) === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n            return startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);\n          }\n          return startEnrollPhoneMfa(authInstance, request);\n        };\n        const startPhoneMfaEnrollmentResponse = handleRecaptchaFlow(auth, startPhoneMfaEnrollmentRequest, \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */, startEnrollPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n        const response = await startPhoneMfaEnrollmentResponse.catch(error => {\n          return Promise.reject(error);\n        });\n        return response.phoneSessionInfo.sessionInfo;\n      } else {\n        _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;\n        _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\n        const startPhoneMfaSignInRequest = {\n          mfaPendingCredential: session.credential,\n          mfaEnrollmentId,\n          phoneSignInInfo: {\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          }\n        };\n        const startSignInPhoneMfaActionCallback = async (authInstance, request) => {\n          // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n          if (request.phoneSignInInfo.captchaResponse === FAKE_TOKEN) {\n            _assert((verifier === null || verifier === void 0 ? void 0 : verifier.type) === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n            return startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);\n          }\n          return startSignInPhoneMfa(authInstance, request);\n        };\n        const startPhoneMfaSignInResponse = handleRecaptchaFlow(auth, startPhoneMfaSignInRequest, \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */, startSignInPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n        const response = await startPhoneMfaSignInResponse.catch(error => {\n          return Promise.reject(error);\n        });\n        return response.phoneResponseInfo.sessionInfo;\n      }\n    } else {\n      const sendPhoneVerificationCodeRequest = {\n        phoneNumber: phoneInfoOptions.phoneNumber,\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n      };\n      const sendPhoneVerificationCodeActionCallback = async (authInstance, request) => {\n        // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n        if (request.captchaResponse === FAKE_TOKEN) {\n          _assert((verifier === null || verifier === void 0 ? void 0 : verifier.type) === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n          const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n          return sendPhoneVerificationCode(authInstance, requestWithRecaptchaV2);\n        }\n        return sendPhoneVerificationCode(authInstance, request);\n      };\n      const sendPhoneVerificationCodeResponse = handleRecaptchaFlow(auth, sendPhoneVerificationCodeRequest, \"sendVerificationCode\" /* RecaptchaActionName.SEND_VERIFICATION_CODE */, sendPhoneVerificationCodeActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n      const response = await sendPhoneVerificationCodeResponse.catch(error => {\n        return Promise.reject(error);\n      });\n      return response.sessionInfo;\n    }\n  } finally {\n    verifier === null || verifier === void 0 ? void 0 : verifier._reset();\n  }\n}\n/**\n * Updates the user's phone number.\n *\n * @remarks\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * await updatePhoneNumber(user, phoneCredential);\n * ```\n *\n * @param user - The user.\n * @param credential - A credential authenticating the new phone number.\n *\n * @public\n */\nasync function updatePhoneNumber(user, credential) {\n  const userInternal = getModularInstance(user);\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n  }\n  await _link$1(userInternal, credential);\n}\n// Helper function that fetches and injects a reCAPTCHA v2 token into the request.\nasync function injectRecaptchaV2Token(auth, request, recaptchaV2Verifier) {\n  _assert(recaptchaV2Verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n  const recaptchaV2Token = await recaptchaV2Verifier.verify();\n  _assert(typeof recaptchaV2Token === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n  const newRequest = Object.assign({}, request);\n  if ('phoneEnrollmentInfo' in newRequest) {\n    const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n    const captchaResponse = newRequest.phoneEnrollmentInfo.captchaResponse;\n    const clientType = newRequest.phoneEnrollmentInfo.clientType;\n    const recaptchaVersion = newRequest.phoneEnrollmentInfo.recaptchaVersion;\n    Object.assign(newRequest, {\n      'phoneEnrollmentInfo': {\n        phoneNumber,\n        recaptchaToken: recaptchaV2Token,\n        captchaResponse,\n        clientType,\n        recaptchaVersion\n      }\n    });\n    return newRequest;\n  } else if ('phoneSignInInfo' in newRequest) {\n    const captchaResponse = newRequest.phoneSignInInfo.captchaResponse;\n    const clientType = newRequest.phoneSignInInfo.clientType;\n    const recaptchaVersion = newRequest.phoneSignInInfo.recaptchaVersion;\n    Object.assign(newRequest, {\n      'phoneSignInInfo': {\n        recaptchaToken: recaptchaV2Token,\n        captchaResponse,\n        clientType,\n        recaptchaVersion\n      }\n    });\n    return newRequest;\n  } else {\n    Object.assign(newRequest, {\n      'recaptchaToken': recaptchaV2Token\n    });\n    return newRequest;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating an {@link PhoneAuthCredential}.\n *\n * @remarks\n * `PhoneAuthProvider` does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const userCredential = await signInWithCredential(auth, phoneCredential);\n * ```\n *\n * @public\n */\nclass PhoneAuthProvider {\n  /**\n   * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n   *\n   */\n  constructor(auth) {\n    /** Always set to {@link ProviderId}.PHONE. */\n    this.providerId = PhoneAuthProvider.PROVIDER_ID;\n    this.auth = _castAuth(auth);\n  }\n  /**\n   *\n   * Starts a phone number authentication flow by sending a verification code to the given phone\n   * number.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n   * E.164 format (e.g. +16505550101).\n   * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents\n   * requests from unauthorized clients. This SDK includes an implementation\n   * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled\n   * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is\n   * optional; in all other configurations, the parameter is required.\n   *\n   * @returns A Promise for a verification ID that can be passed to\n   * {@link PhoneAuthProvider.credential} to identify this flow.\n   */\n  verifyPhoneNumber(phoneOptions, applicationVerifier) {\n    return _verifyPhoneNumber(this.auth, phoneOptions, getModularInstance(applicationVerifier));\n  }\n  /**\n   * Creates a phone auth credential, given the verification ID from\n   * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n   * mobile device.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n   * @param verificationCode - The verification code sent to the user's mobile device.\n   *\n   * @returns The auth provider credential.\n   */\n  static credential(verificationId, verificationCode) {\n    return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\n  }\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential}.\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    const credential = userCredential;\n    return PhoneAuthProvider.credentialFromTaggedObject(credential);\n  }\n  /**\n   * Returns an {@link AuthCredential} when passed an error.\n   *\n   * @remarks\n   *\n   * This method works for errors like\n   * `auth/account-exists-with-different-credentials`. This is useful for\n   * recovering when attempting to set a user's phone number but the number\n   * in question is already tied to another account. For example, the following\n   * code tries to update the current user's phone number, and if that\n   * fails, links the user with the account associated with that number:\n   *\n   * ```js\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n   * try {\n   *   const code = ''; // Prompt the user for the verification code\n   *   await updatePhoneNumber(\n   *       auth.currentUser,\n   *       PhoneAuthProvider.credential(verificationId, code));\n   * } catch (e) {\n   *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n   *     const cred = PhoneAuthProvider.credentialFromError(e);\n   *     await linkWithCredential(auth.currentUser, cred);\n   *   }\n   * }\n   *\n   * // At this point, auth.currentUser.phoneNumber === number.\n   * ```\n   *\n   * @param error - The error to generate a credential from.\n   */\n  static credentialFromError(error) {\n    return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const {\n      phoneNumber,\n      temporaryProof\n    } = tokenResponse;\n    if (phoneNumber && temporaryProof) {\n      return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\n    }\n    return null;\n  }\n}\n/** Always set to {@link ProviderId}.PHONE. */\nPhoneAuthProvider.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */;\n/** Always set to {@link SignInMethod}.PHONE. */\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */;\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Chooses a popup/redirect resolver to use. This prefers the override (which\n * is directly passed in), and falls back to the property set on the auth\n * object. If neither are available, this function errors w/ an argument error.\n */\nfunction _withDefaultResolver(auth, resolverOverride) {\n  if (resolverOverride) {\n    return _getInstance(resolverOverride);\n  }\n  _assert(auth._popupRedirectResolver, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n  return auth._popupRedirectResolver;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass IdpCredential extends AuthCredential {\n  constructor(params) {\n    super(\"custom\" /* ProviderId.CUSTOM */, \"custom\" /* ProviderId.CUSTOM */);\n    this.params = params;\n  }\n  _getIdTokenResponse(auth) {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n  _linkToIdToken(auth, idToken) {\n    return signInWithIdp(auth, this._buildIdpRequest(idToken));\n  }\n  _getReauthenticationResolver(auth) {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n  _buildIdpRequest(idToken) {\n    const request = {\n      requestUri: this.params.requestUri,\n      sessionId: this.params.sessionId,\n      postBody: this.params.postBody,\n      tenantId: this.params.tenantId,\n      pendingToken: this.params.pendingToken,\n      returnSecureToken: true,\n      returnIdpCredential: true\n    };\n    if (idToken) {\n      request.idToken = idToken;\n    }\n    return request;\n  }\n}\nfunction _signIn(params) {\n  return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);\n}\nfunction _reauth(params) {\n  const {\n    auth,\n    user\n  } = params;\n  _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);\n}\nasync function _link(params) {\n  const {\n    auth,\n    user\n  } = params;\n  _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  return _link$1(user, new IdpCredential(params), params.bypassAuthState);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n */\nclass AbstractPopupRedirectOperation {\n  constructor(auth, filter, resolver, user, bypassAuthState = false) {\n    this.auth = auth;\n    this.resolver = resolver;\n    this.user = user;\n    this.bypassAuthState = bypassAuthState;\n    this.pendingPromise = null;\n    this.eventManager = null;\n    this.filter = Array.isArray(filter) ? filter : [filter];\n  }\n  execute() {\n    return new Promise(async (resolve, reject) => {\n      this.pendingPromise = {\n        resolve,\n        reject\n      };\n      try {\n        this.eventManager = await this.resolver._initialize(this.auth);\n        await this.onExecution();\n        this.eventManager.registerConsumer(this);\n      } catch (e) {\n        this.reject(e);\n      }\n    });\n  }\n  async onAuthEvent(event) {\n    const {\n      urlResponse,\n      sessionId,\n      postBody,\n      tenantId,\n      error,\n      type\n    } = event;\n    if (error) {\n      this.reject(error);\n      return;\n    }\n    const params = {\n      auth: this.auth,\n      requestUri: urlResponse,\n      sessionId: sessionId,\n      tenantId: tenantId || undefined,\n      postBody: postBody || undefined,\n      user: this.user,\n      bypassAuthState: this.bypassAuthState\n    };\n    try {\n      this.resolve(await this.getIdpTask(type)(params));\n    } catch (e) {\n      this.reject(e);\n    }\n  }\n  onError(error) {\n    this.reject(error);\n  }\n  getIdpTask(type) {\n    switch (type) {\n      case \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */:\n      case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\n        return _signIn;\n      case \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */:\n      case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\n        return _link;\n      case \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */:\n      case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\n        return _reauth;\n      default:\n        _fail(this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n  }\n  resolve(cred) {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.resolve(cred);\n    this.unregisterAndCleanUp();\n  }\n  reject(error) {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.reject(error);\n    this.unregisterAndCleanUp();\n  }\n  unregisterAndCleanUp() {\n    if (this.eventManager) {\n      this.eventManager.unregisterConsumer(this);\n    }\n    this.pendingPromise = null;\n    this.cleanUp();\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\n/**\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n *\n * @remarks\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was\n * unsuccessful, returns an error object containing additional information about the error.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nasync function signInWithPopup(auth, provider, resolver) {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_createError(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */));\n  }\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  const action = new PopupOperation(authInternal, \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */, provider, resolverInternal);\n  return action.executeNotNull();\n}\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\n * OAuth flow.\n *\n * @remarks\n * If the reauthentication is successful, the returned result will contain the user and the\n * provider's credential.\n *\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n * // Reauthenticate using a popup.\n * await reauthenticateWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nasync function reauthenticateWithPopup(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(_createError(userInternal.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */));\n  }\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  const action = new PopupOperation(userInternal.auth, \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);\n  return action.executeNotNull();\n}\n/**\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n *\n * @remarks\n * If the linking is successful, the returned result will contain the user and the provider's credential.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a popup.\n * const provider = new FacebookAuthProvider();\n * await linkWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nasync function linkWithPopup(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  const action = new PopupOperation(userInternal.auth, \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */, provider, resolverInternal, userInternal);\n  return action.executeNotNull();\n}\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n *\n */\nclass PopupOperation extends AbstractPopupRedirectOperation {\n  constructor(auth, filter, provider, resolver, user) {\n    super(auth, filter, resolver, user);\n    this.provider = provider;\n    this.authWindow = null;\n    this.pollId = null;\n    if (PopupOperation.currentPopupAction) {\n      PopupOperation.currentPopupAction.cancel();\n    }\n    PopupOperation.currentPopupAction = this;\n  }\n  async executeNotNull() {\n    const result = await this.execute();\n    _assert(result, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return result;\n  }\n  async onExecution() {\n    debugAssert(this.filter.length === 1, 'Popup operations only handle one event');\n    const eventId = _generateEventId();\n    this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0],\n    // There's always one, see constructor\n    eventId);\n    this.authWindow.associatedEvent = eventId;\n    // Check for web storage support and origin validation _after_ the popup is\n    // loaded. These operations are slow (~1 second or so) Rather than\n    // waiting on them before opening the window, optimistically open the popup\n    // and check for storage support at the same time. If storage support is\n    // not available, this will cause the whole thing to reject properly. It\n    // will also close the popup, but since the promise has already rejected,\n    // the popup closed by user poll will reject into the void.\n    this.resolver._originValidation(this.auth).catch(e => {\n      this.reject(e);\n    });\n    this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\n      if (!isSupported) {\n        this.reject(_createError(this.auth, \"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));\n      }\n    });\n    // Handle user closure. Notice this does *not* use await\n    this.pollUserCancellation();\n  }\n  get eventId() {\n    var _a;\n    return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;\n  }\n  cancel() {\n    this.reject(_createError(this.auth, \"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));\n  }\n  cleanUp() {\n    if (this.authWindow) {\n      this.authWindow.close();\n    }\n    if (this.pollId) {\n      window.clearTimeout(this.pollId);\n    }\n    this.authWindow = null;\n    this.pollId = null;\n    PopupOperation.currentPopupAction = null;\n  }\n  pollUserCancellation() {\n    const poll = () => {\n      var _a, _b;\n      if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {\n        // Make sure that there is sufficient time for whatever action to\n        // complete. The window could have closed but the sign in network\n        // call could still be in flight. This is specifically true for\n        // Firefox or if the opener is in an iframe, in which case the oauth\n        // helper closes the popup.\n        this.pollId = window.setTimeout(() => {\n          this.pollId = null;\n          this.reject(_createError(this.auth, \"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));\n        }, 8000 /* _Timeout.AUTH_EVENT */);\n        return;\n      }\n      this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n    };\n    poll();\n  }\n}\n// Only one popup is ever shown at once. The lifecycle of the current popup\n// can be managed / cancelled by the constructor.\nPopupOperation.currentPopupAction = null;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PENDING_REDIRECT_KEY = 'pendingRedirect';\n// We only get one redirect outcome for any one auth, so just store it\n// in here.\nconst redirectOutcomeMap = new Map();\nclass RedirectAction extends AbstractPopupRedirectOperation {\n  constructor(auth, resolver, bypassAuthState = false) {\n    super(auth, [\"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, \"unknown\" /* AuthEventType.UNKNOWN */], resolver, undefined, bypassAuthState);\n    this.eventId = null;\n  }\n  /**\n   * Override the execute function; if we already have a redirect result, then\n   * just return it.\n   */\n  async execute() {\n    let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n    if (!readyOutcome) {\n      try {\n        const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);\n        const result = hasPendingRedirect ? await super.execute() : null;\n        readyOutcome = () => Promise.resolve(result);\n      } catch (e) {\n        readyOutcome = () => Promise.reject(e);\n      }\n      redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n    }\n    // If we're not bypassing auth state, the ready outcome should be set to\n    // null.\n    if (!this.bypassAuthState) {\n      redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n    }\n    return readyOutcome();\n  }\n  async onAuthEvent(event) {\n    if (event.type === \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {\n      return super.onAuthEvent(event);\n    } else if (event.type === \"unknown\" /* AuthEventType.UNKNOWN */) {\n      // This is a sentinel value indicating there's no pending redirect\n      this.resolve(null);\n      return;\n    }\n    if (event.eventId) {\n      const user = await this.auth._redirectUserForId(event.eventId);\n      if (user) {\n        this.user = user;\n        return super.onAuthEvent(event);\n      } else {\n        this.resolve(null);\n      }\n    }\n  }\n  async onExecution() {}\n  cleanUp() {}\n}\nasync function _getAndClearPendingRedirectStatus(resolver, auth) {\n  const key = pendingRedirectKey(auth);\n  const persistence = resolverPersistence(resolver);\n  if (!(await persistence._isAvailable())) {\n    return false;\n  }\n  const hasPendingRedirect = (await persistence._get(key)) === 'true';\n  await persistence._remove(key);\n  return hasPendingRedirect;\n}\nasync function _setPendingRedirectStatus(resolver, auth) {\n  return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\n}\nfunction _clearRedirectOutcomes() {\n  redirectOutcomeMap.clear();\n}\nfunction _overrideRedirectResult(auth, result) {\n  redirectOutcomeMap.set(auth._key(), result);\n}\nfunction resolverPersistence(resolver) {\n  return _getInstance(resolver._redirectPersistence);\n}\nfunction pendingRedirectKey(auth) {\n  return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Authenticates a Firebase client using a full-page redirect flow.\n *\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link signInWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nfunction signInWithRedirect(auth, provider, resolver) {\n  return _signInWithRedirect(auth, provider, resolver);\n}\nasync function _signInWithRedirect(auth, provider, resolver) {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await authInternal._initializationPromise;\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  await _setPendingRedirectStatus(resolverInternal, authInternal);\n  return resolverInternal._openRedirect(authInternal, provider, \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */);\n}\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link reauthenticateWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * // Reauthenticate using a redirect.\n * await reauthenticateWithRedirect(result.user, provider);\n * // This will again trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nfunction reauthenticateWithRedirect(user, provider, resolver) {\n  return _reauthenticateWithRedirect(user, provider, resolver);\n}\nasync function _reauthenticateWithRedirect(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n  }\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, eventId);\n}\n/**\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link linkWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a redirect.\n * const provider = new FacebookAuthProvider();\n * await linkWithRedirect(result.user, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nfunction linkWithRedirect(user, provider, resolver) {\n  return _linkWithRedirect(user, provider, resolver);\n}\nasync function _linkWithRedirect(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _assertLinkedStatus(false, userInternal, provider.providerId);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, eventId);\n}\n/**\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n *\n * @remarks\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\n * error. If no redirect operation was called, returns `null`.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nasync function getRedirectResult(auth, resolver) {\n  await _castAuth(auth)._initializationPromise;\n  return _getRedirectResult(auth, resolver, false);\n}\nasync function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  const authInternal = _castAuth(auth);\n  const resolver = _withDefaultResolver(authInternal, resolverExtern);\n  const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n  const result = await action.execute();\n  if (result && !bypassAuthState) {\n    delete result.user._redirectEventId;\n    await authInternal._persistUserIfCurrent(result.user);\n    await authInternal._setRedirectUser(null, resolverExtern);\n  }\n  return result;\n}\nasync function prepareUserForRedirect(user) {\n  const eventId = _generateEventId(`${user.uid}:::`);\n  user._redirectEventId = eventId;\n  await user.auth._setRedirectUser(user);\n  await user.auth._persistUserIfCurrent(user);\n  return eventId;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The amount of time to store the UIDs of seen events; this is\n// set to 10 min by default\nconst EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\nclass AuthEventManager {\n  constructor(auth) {\n    this.auth = auth;\n    this.cachedEventUids = new Set();\n    this.consumers = new Set();\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n    this.lastProcessedEventTime = Date.now();\n  }\n  registerConsumer(authEventConsumer) {\n    this.consumers.add(authEventConsumer);\n    if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\n      this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n      this.saveEventToCache(this.queuedRedirectEvent);\n      this.queuedRedirectEvent = null;\n    }\n  }\n  unregisterConsumer(authEventConsumer) {\n    this.consumers.delete(authEventConsumer);\n  }\n  onEvent(event) {\n    // Check if the event has already been handled\n    if (this.hasEventBeenHandled(event)) {\n      return false;\n    }\n    let handled = false;\n    this.consumers.forEach(consumer => {\n      if (this.isEventForConsumer(event, consumer)) {\n        handled = true;\n        this.sendToConsumer(event, consumer);\n        this.saveEventToCache(event);\n      }\n    });\n    if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n      // If we've already seen a redirect before, or this is a popup event,\n      // bail now\n      return handled;\n    }\n    this.hasHandledPotentialRedirect = true;\n    // If the redirect wasn't handled, hang on to it\n    if (!handled) {\n      this.queuedRedirectEvent = event;\n      handled = true;\n    }\n    return handled;\n  }\n  sendToConsumer(event, consumer) {\n    var _a;\n    if (event.error && !isNullRedirectEvent(event)) {\n      const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) || \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */;\n      consumer.onError(_createError(this.auth, code));\n    } else {\n      consumer.onAuthEvent(event);\n    }\n  }\n  isEventForConsumer(event, consumer) {\n    const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;\n    return consumer.filter.includes(event.type) && eventIdMatches;\n  }\n  hasEventBeenHandled(event) {\n    if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {\n      this.cachedEventUids.clear();\n    }\n    return this.cachedEventUids.has(eventUid(event));\n  }\n  saveEventToCache(event) {\n    this.cachedEventUids.add(eventUid(event));\n    this.lastProcessedEventTime = Date.now();\n  }\n}\nfunction eventUid(e) {\n  return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\n}\nfunction isNullRedirectEvent({\n  type,\n  error\n}) {\n  return type === \"unknown\" /* AuthEventType.UNKNOWN */ && (error === null || error === void 0 ? void 0 : error.code) === `auth/${\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */}`;\n}\nfunction isRedirectEvent(event) {\n  switch (event.type) {\n    case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\n    case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\n    case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\n      return true;\n    case \"unknown\" /* AuthEventType.UNKNOWN */:\n      return isNullRedirectEvent(event);\n    default:\n      return false;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function _getProjectConfig(auth, request = {}) {\n  return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/projects\" /* Endpoint.GET_PROJECT_CONFIG */, request);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\nconst HTTP_REGEX = /^https?/;\nasync function _validateOrigin(auth) {\n  // Skip origin validation if we are in an emulated environment\n  if (auth.config.emulator) {\n    return;\n  }\n  const {\n    authorizedDomains\n  } = await _getProjectConfig(auth);\n  for (const domain of authorizedDomains) {\n    try {\n      if (matchDomain(domain)) {\n        return;\n      }\n    } catch (_a) {\n      // Do nothing if there's a URL error; just continue searching\n    }\n  }\n  // In the old SDK, this error also provides helpful messages.\n  _fail(auth, \"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */);\n}\nfunction matchDomain(expected) {\n  const currentUrl = _getCurrentUrl();\n  const {\n    protocol,\n    hostname\n  } = new URL(currentUrl);\n  if (expected.startsWith('chrome-extension://')) {\n    const ceUrl = new URL(expected);\n    if (ceUrl.hostname === '' && hostname === '') {\n      // For some reason we're not parsing chrome URLs properly\n      return protocol === 'chrome-extension:' && expected.replace('chrome-extension://', '') === currentUrl.replace('chrome-extension://', '');\n    }\n    return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\n  }\n  if (!HTTP_REGEX.test(protocol)) {\n    return false;\n  }\n  if (IP_ADDRESS_REGEX.test(expected)) {\n    // The domain has to be exactly equal to the pattern, as an IP domain will\n    // only contain the IP, no extra character.\n    return hostname === expected;\n  }\n  // Dots in pattern should be escaped.\n  const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\n  // Non ip address domains.\n  // domain.com = *.domain.com OR domain.com\n  const re = new RegExp('^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');\n  return re.test(hostname);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst NETWORK_TIMEOUT = new Delay(30000, 60000);\n/**\n * Reset unloaded GApi modules. If gapi.load fails due to a network error,\n * it will stop working after a retrial. This is a hack to fix this issue.\n */\nfunction resetUnloadedGapiModules() {\n  // Clear last failed gapi.load state to force next gapi.load to first\n  // load the failed gapi.iframes module.\n  // Get gapix.beacon context.\n  const beacon = _window().___jsl;\n  // Get current hint.\n  if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {\n    // Get gapi hint.\n    for (const hint of Object.keys(beacon.H)) {\n      // Requested modules.\n      beacon.H[hint].r = beacon.H[hint].r || [];\n      // Loaded modules.\n      beacon.H[hint].L = beacon.H[hint].L || [];\n      // Set requested modules to a copy of the loaded modules.\n      beacon.H[hint].r = [...beacon.H[hint].L];\n      // Clear pending callbacks.\n      if (beacon.CP) {\n        for (let i = 0; i < beacon.CP.length; i++) {\n          // Remove all failed pending callbacks.\n          beacon.CP[i] = null;\n        }\n      }\n    }\n  }\n}\nfunction loadGapi(auth) {\n  return new Promise((resolve, reject) => {\n    var _a, _b, _c;\n    // Function to run when gapi.load is ready.\n    function loadGapiIframe() {\n      // The developer may have tried to previously run gapi.load and failed.\n      // Run this to fix that.\n      resetUnloadedGapiModules();\n      gapi.load('gapi.iframes', {\n        callback: () => {\n          resolve(gapi.iframes.getContext());\n        },\n        ontimeout: () => {\n          // The above reset may be sufficient, but having this reset after\n          // failure ensures that if the developer calls gapi.load after the\n          // connection is re-established and before another attempt to embed\n          // the iframe, it would work and would not be broken because of our\n          // failed attempt.\n          // Timeout when gapi.iframes.Iframe not loaded.\n          resetUnloadedGapiModules();\n          reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        },\n        timeout: NETWORK_TIMEOUT.get()\n      });\n    }\n    if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {\n      // If gapi.iframes.Iframe available, resolve.\n      resolve(gapi.iframes.getContext());\n    } else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {\n      // Gapi loader ready, load gapi.iframes.\n      loadGapiIframe();\n    } else {\n      // Create a new iframe callback when this is called so as not to overwrite\n      // any previous defined callback. This happens if this method is called\n      // multiple times in parallel and could result in the later callback\n      // overwriting the previous one. This would end up with a iframe\n      // timeout.\n      const cbName = _generateCallbackName('iframefcb');\n      // GApi loader not available, dynamically load platform.js.\n      _window()[cbName] = () => {\n        // GApi loader should be ready.\n        if (!!gapi.load) {\n          loadGapiIframe();\n        } else {\n          // Gapi loader failed, throw error.\n          reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }\n      };\n      // Load GApi loader.\n      return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`).catch(e => reject(e));\n    }\n  }).catch(error => {\n    // Reset cached promise to allow for retrial.\n    cachedGApiLoader = null;\n    throw error;\n  });\n}\nlet cachedGApiLoader = null;\nfunction _loadGapi(auth) {\n  cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n  return cachedGApiLoader;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PING_TIMEOUT = new Delay(5000, 15000);\nconst IFRAME_PATH = '__/auth/iframe';\nconst EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\nconst IFRAME_ATTRIBUTES = {\n  style: {\n    position: 'absolute',\n    top: '-100px',\n    width: '1px',\n    height: '1px'\n  },\n  'aria-hidden': 'true',\n  tabindex: '-1'\n};\n// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\n// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\nconst EID_FROM_APIHOST = new Map([[\"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */, 'p'],\n// production\n['staging-identitytoolkit.sandbox.googleapis.com', 's'],\n// staging\n['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\n]);\nfunction getIframeUrl(auth) {\n  const config = auth.config;\n  _assert(config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\n  const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n  const params = {\n    apiKey: config.apiKey,\n    appName: auth.name,\n    v: SDK_VERSION\n  };\n  const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n  if (eid) {\n    params.eid = eid;\n  }\n  const frameworks = auth._getFrameworks();\n  if (frameworks.length) {\n    params.fw = frameworks.join(',');\n  }\n  return `${url}?${querystring(params).slice(1)}`;\n}\nasync function _openIframe(auth) {\n  const context = await _loadGapi(auth);\n  const gapi = _window().gapi;\n  _assert(gapi, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  return context.open({\n    where: document.body,\n    url: getIframeUrl(auth),\n    messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n    attributes: IFRAME_ATTRIBUTES,\n    dontclear: true\n  }, iframe => new Promise(async (resolve, reject) => {\n    await iframe.restyle({\n      // Prevent iframe from closing on mouse out.\n      setHideOnLeave: false\n    });\n    const networkError = _createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);\n    // Confirm iframe is correctly loaded.\n    // To fallback on failure, set a timeout.\n    const networkErrorTimer = _window().setTimeout(() => {\n      reject(networkError);\n    }, PING_TIMEOUT.get());\n    // Clear timer and resolve pending iframe ready promise.\n    function clearTimerAndResolve() {\n      _window().clearTimeout(networkErrorTimer);\n      resolve(iframe);\n    }\n    // This returns an IThenable. However the reject part does not call\n    // when the iframe is not loaded.\n    iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n      reject(networkError);\n    });\n  }));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst BASE_POPUP_OPTIONS = {\n  location: 'yes',\n  resizable: 'yes',\n  statusbar: 'yes',\n  toolbar: 'no'\n};\nconst DEFAULT_WIDTH = 500;\nconst DEFAULT_HEIGHT = 600;\nconst TARGET_BLANK = '_blank';\nconst FIREFOX_EMPTY_URL = 'http://localhost';\nclass AuthPopup {\n  constructor(window) {\n    this.window = window;\n    this.associatedEvent = null;\n  }\n  close() {\n    if (this.window) {\n      try {\n        this.window.close();\n      } catch (e) {}\n    }\n  }\n}\nfunction _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\n  const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n  const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n  let target = '';\n  const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {\n    width: width.toString(),\n    height: height.toString(),\n    top,\n    left\n  });\n  // Chrome iOS 7 and 8 is returning an undefined popup win when target is\n  // specified, even though the popup is not necessarily blocked.\n  const ua = getUA().toLowerCase();\n  if (name) {\n    target = _isChromeIOS(ua) ? TARGET_BLANK : name;\n  }\n  if (_isFirefox(ua)) {\n    // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\n    url = url || FIREFOX_EMPTY_URL;\n    // Firefox disables by default scrolling on popup windows, which can create\n    // issues when the user has many Google accounts, for instance.\n    options.scrollbars = 'yes';\n  }\n  const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');\n  if (_isIOSStandalone(ua) && target !== '_self') {\n    openAsNewWindowIOS(url || '', target);\n    return new AuthPopup(null);\n  }\n  // about:blank getting sanitized causing browsers like IE/Edge to display\n  // brief error message before redirecting to handler.\n  const newWin = window.open(url || '', target, optionsString);\n  _assert(newWin, auth, \"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */);\n  // Flaky on IE edge, encapsulate with a try and catch.\n  try {\n    newWin.focus();\n  } catch (e) {}\n  return new AuthPopup(newWin);\n}\nfunction openAsNewWindowIOS(url, target) {\n  const el = document.createElement('a');\n  el.href = url;\n  el.target = target;\n  const click = document.createEvent('MouseEvent');\n  click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\n  el.dispatchEvent(click);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * URL for Authentication widget which will initiate the OAuth handshake\n *\n * @internal\n */\nconst WIDGET_PATH = '__/auth/handler';\n/**\n * URL for emulated environment\n *\n * @internal\n */\nconst EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\n/**\n * Fragment name for the App Check token that gets passed to the widget\n *\n * @internal\n */\nconst FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\nasync function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {\n  _assert(auth.config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\n  _assert(auth.config.apiKey, auth, \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */);\n  const params = {\n    apiKey: auth.config.apiKey,\n    appName: auth.name,\n    authType,\n    redirectUrl,\n    v: SDK_VERSION,\n    eventId\n  };\n  if (provider instanceof FederatedAuthProvider) {\n    provider.setDefaultLanguage(auth.languageCode);\n    params.providerId = provider.providerId || '';\n    if (!isEmpty(provider.getCustomParameters())) {\n      params.customParameters = JSON.stringify(provider.getCustomParameters());\n    }\n    // TODO set additionalParams from the provider as well?\n    for (const [key, value] of Object.entries(additionalParams || {})) {\n      params[key] = value;\n    }\n  }\n  if (provider instanceof BaseOAuthProvider) {\n    const scopes = provider.getScopes().filter(scope => scope !== '');\n    if (scopes.length > 0) {\n      params.scopes = scopes.join(',');\n    }\n  }\n  if (auth.tenantId) {\n    params.tid = auth.tenantId;\n  }\n  // TODO: maybe set eid as endpointId\n  // TODO: maybe set fw as Frameworks.join(\",\")\n  const paramsDict = params;\n  for (const key of Object.keys(paramsDict)) {\n    if (paramsDict[key] === undefined) {\n      delete paramsDict[key];\n    }\n  }\n  // Sets the App Check token to pass to the widget\n  const appCheckToken = await auth._getAppCheckToken();\n  const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : '';\n  // Start at index 1 to skip the leading '&' in the query string\n  return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;\n}\nfunction getHandlerBase({\n  config\n}) {\n  if (!config.emulator) {\n    return `https://${config.authDomain}/${WIDGET_PATH}`;\n  }\n  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The special web storage event\n *\n */\nconst WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\nclass BrowserPopupRedirectResolver {\n  constructor() {\n    this.eventManagers = {};\n    this.iframes = {};\n    this.originValidationPromises = {};\n    this._redirectPersistence = browserSessionPersistence;\n    this._completeRedirectFn = _getRedirectResult;\n    this._overrideRedirectResult = _overrideRedirectResult;\n  }\n  // Wrapping in async even though we don't await anywhere in order\n  // to make sure errors are raised as promise rejections\n  async _openPopup(auth, provider, authType, eventId) {\n    var _a;\n    debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');\n    const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n    return _open(auth, url, _generateEventId());\n  }\n  async _openRedirect(auth, provider, authType, eventId) {\n    await this._originValidation(auth);\n    const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n    _setWindowLocation(url);\n    return new Promise(() => {});\n  }\n  _initialize(auth) {\n    const key = auth._key();\n    if (this.eventManagers[key]) {\n      const {\n        manager,\n        promise\n      } = this.eventManagers[key];\n      if (manager) {\n        return Promise.resolve(manager);\n      } else {\n        debugAssert(promise, 'If manager is not set, promise should be');\n        return promise;\n      }\n    }\n    const promise = this.initAndGetManager(auth);\n    this.eventManagers[key] = {\n      promise\n    };\n    // If the promise is rejected, the key should be removed so that the\n    // operation can be retried later.\n    promise.catch(() => {\n      delete this.eventManagers[key];\n    });\n    return promise;\n  }\n  async initAndGetManager(auth) {\n    const iframe = await _openIframe(auth);\n    const manager = new AuthEventManager(auth);\n    iframe.register('authEvent', iframeEvent => {\n      _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, \"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */);\n      // TODO: Consider splitting redirect and popup events earlier on\n      const handled = manager.onEvent(iframeEvent.authEvent);\n      return {\n        status: handled ? \"ACK\" /* GapiOutcome.ACK */ : \"ERROR\" /* GapiOutcome.ERROR */\n      };\n    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n    this.eventManagers[auth._key()] = {\n      manager\n    };\n    this.iframes[auth._key()] = iframe;\n    return manager;\n  }\n  _isIframeWebStorageSupported(auth, cb) {\n    const iframe = this.iframes[auth._key()];\n    iframe.send(WEB_STORAGE_SUPPORT_KEY, {\n      type: WEB_STORAGE_SUPPORT_KEY\n    }, result => {\n      var _a;\n      const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];\n      if (isSupported !== undefined) {\n        cb(!!isSupported);\n      }\n      _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n  }\n  _originValidation(auth) {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n    return this.originValidationPromises[key];\n  }\n  get _shouldInitProactively() {\n    // Mobile browsers and Safari need to optimistically initialize\n    return _isMobileBrowser() || _isSafari() || _isIOS();\n  }\n}\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for browser\n * based applications.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @public\n */\nconst browserPopupRedirectResolver = BrowserPopupRedirectResolver;\nclass MultiFactorAssertionImpl {\n  constructor(factorId) {\n    this.factorId = factorId;\n  }\n  _process(auth, session, displayName) {\n    switch (session.type) {\n      case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n        return this._finalizeEnroll(auth, session.credential, displayName);\n      case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n        return this._finalizeSignIn(auth, session.credential);\n      default:\n        return debugFail('unexpected MultiFactorSessionType');\n    }\n  }\n}\n\n/**\n * {@inheritdoc PhoneMultiFactorAssertion}\n *\n * @public\n */\nclass PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n  constructor(credential) {\n    super(\"phone\" /* FactorId.PHONE */);\n    this.credential = credential;\n  }\n  /** @internal */\n  static _fromCredential(credential) {\n    return new PhoneMultiFactorAssertionImpl(credential);\n  }\n  /** @internal */\n  _finalizeEnroll(auth, idToken, displayName) {\n    return finalizeEnrollPhoneMfa(auth, {\n      idToken,\n      displayName,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n  /** @internal */\n  _finalizeSignIn(auth, mfaPendingCredential) {\n    return finalizeSignInPhoneMfa(auth, {\n      mfaPendingCredential,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n}\n/**\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\n *\n * @public\n */\nclass PhoneMultiFactorGenerator {\n  constructor() {}\n  /**\n   * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n   * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}\n   */\n  static assertion(credential) {\n    return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n  }\n}\n/**\n * The identifier of the phone second factor: `phone`.\n */\nPhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * @public\n */\nclass TotpMultiFactorGenerator {\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n   * the TOTP (time-based one-time password) second factor.\n   * This assertion is used to complete enrollment in TOTP second factor.\n   *\n   * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorUser.enroll}.\n   */\n  static assertionForEnrollment(secret, oneTimePassword) {\n    return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n  }\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n   * This assertion is used to complete signIn with TOTP as the second factor.\n   *\n   * @param enrollmentId identifies the enrolled TOTP second factor.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}.\n   */\n  static assertionForSignIn(enrollmentId, oneTimePassword) {\n    return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n  }\n  /**\n   * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n   * Creates a TOTP secret as part of enrolling a TOTP second factor.\n   * Used for generating a QR code URL or inputting into a TOTP app.\n   * This method uses the auth instance corresponding to the user in the multiFactorSession.\n   *\n   * @param session The {@link MultiFactorSession} that the user is part of.\n   * @returns A promise to {@link TotpSecret}.\n   */\n  static async generateSecret(session) {\n    var _a;\n    const mfaSession = session;\n    _assert(typeof ((_a = mfaSession.user) === null || _a === void 0 ? void 0 : _a.auth) !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n      idToken: mfaSession.credential,\n      totpEnrollmentInfo: {}\n    });\n    return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n  }\n}\n/**\n * The identifier of the TOTP second factor: `totp`.\n */\nTotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\nclass TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n  constructor(otp, enrollmentId, secret) {\n    super(\"totp\" /* FactorId.TOTP */);\n    this.otp = otp;\n    this.enrollmentId = enrollmentId;\n    this.secret = secret;\n  }\n  /** @internal */\n  static _fromSecret(secret, otp) {\n    return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n  }\n  /** @internal */\n  static _fromEnrollmentId(enrollmentId, otp) {\n    return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n  }\n  /** @internal */\n  async _finalizeEnroll(auth, idToken, displayName) {\n    _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return finalizeEnrollTotpMfa(auth, {\n      idToken,\n      displayName,\n      totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n    });\n  }\n  /** @internal */\n  async _finalizeSignIn(auth, mfaPendingCredential) {\n    _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    const totpVerificationInfo = {\n      verificationCode: this.otp\n    };\n    return finalizeSignInTotpMfa(auth, {\n      mfaPendingCredential,\n      mfaEnrollmentId: this.enrollmentId,\n      totpVerificationInfo\n    });\n  }\n}\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * Stores the shared secret key and other parameters to generate time-based OTPs.\n * Implements methods to retrieve the shared secret key and generate a QR code URL.\n * @public\n */\nclass TotpSecret {\n  // The public members are declared outside the constructor so the docs can be generated.\n  constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n    this.sessionInfo = sessionInfo;\n    this.auth = auth;\n    this.secretKey = secretKey;\n    this.hashingAlgorithm = hashingAlgorithm;\n    this.codeLength = codeLength;\n    this.codeIntervalSeconds = codeIntervalSeconds;\n    this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n  }\n  /** @internal */\n  static _fromStartTotpMfaEnrollmentResponse(response, auth) {\n    return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n  }\n  /** @internal */\n  _makeTotpVerificationInfo(otp) {\n    return {\n      sessionInfo: this.sessionInfo,\n      verificationCode: otp\n    };\n  }\n  /**\n   * Returns a QR code URL as described in\n   * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n   * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n   * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n   *\n   * @param accountName the name of the account/app along with a user identifier.\n   * @param issuer issuer of the TOTP (likely the app name).\n   * @returns A QR code URL string.\n   */\n  generateQrCodeUrl(accountName, issuer) {\n    var _a;\n    let useDefaults = false;\n    if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n      useDefaults = true;\n    }\n    if (useDefaults) {\n      if (_isEmptyString(accountName)) {\n        accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || 'unknownuser';\n      }\n      if (_isEmptyString(issuer)) {\n        issuer = this.auth.name;\n      }\n    }\n    return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n  }\n}\n/** @internal */\nfunction _isEmptyString(input) {\n  return typeof input === 'undefined' || (input === null || input === void 0 ? void 0 : input.length) === 0;\n}\nvar name = \"@firebase/auth\";\nvar version = \"1.10.4\";\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AuthInterop {\n  constructor(auth) {\n    this.auth = auth;\n    this.internalListeners = new Map();\n  }\n  getUid() {\n    var _a;\n    this.assertAuthConfigured();\n    return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;\n  }\n  async getToken(forceRefresh) {\n    this.assertAuthConfigured();\n    await this.auth._initializationPromise;\n    if (!this.auth.currentUser) {\n      return null;\n    }\n    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n    return {\n      accessToken\n    };\n  }\n  addAuthTokenListener(listener) {\n    this.assertAuthConfigured();\n    if (this.internalListeners.has(listener)) {\n      return;\n    }\n    const unsubscribe = this.auth.onIdTokenChanged(user => {\n      listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);\n    });\n    this.internalListeners.set(listener, unsubscribe);\n    this.updateProactiveRefresh();\n  }\n  removeAuthTokenListener(listener) {\n    this.assertAuthConfigured();\n    const unsubscribe = this.internalListeners.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n    this.internalListeners.delete(listener);\n    unsubscribe();\n    this.updateProactiveRefresh();\n  }\n  assertAuthConfigured() {\n    _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n  }\n  updateProactiveRefresh() {\n    if (this.internalListeners.size > 0) {\n      this.auth._startProactiveRefresh();\n    } else {\n      this.auth._stopProactiveRefresh();\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction getVersionForPlatform(clientPlatform) {\n  switch (clientPlatform) {\n    case \"Node\" /* ClientPlatform.NODE */:\n      return 'node';\n    case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n      return 'rn';\n    case \"Worker\" /* ClientPlatform.WORKER */:\n      return 'webworker';\n    case \"Cordova\" /* ClientPlatform.CORDOVA */:\n      return 'cordova';\n    case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\n      return 'web-extension';\n    default:\n      return undefined;\n  }\n}\n/** @internal */\nfunction registerAuth(clientPlatform) {\n  _registerComponent(new Component(\"auth\" /* _ComponentName.AUTH */, (container, {\n    options: deps\n  }) => {\n    const app = container.getProvider('app').getImmediate();\n    const heartbeatServiceProvider = container.getProvider('heartbeat');\n    const appCheckServiceProvider = container.getProvider('app-check-internal');\n    const {\n      apiKey,\n      authDomain\n    } = app.options;\n    _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, {\n      appName: app.name\n    });\n    const config = {\n      apiKey,\n      authDomain,\n      clientPlatform,\n      apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n      tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n      apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n      sdkClientVersion: _getClientVersion(clientPlatform)\n    };\n    const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n    _initializeAuthInstance(authInstance, deps);\n    return authInstance;\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n  /**\n   * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n   * For why we do this, See go/firebase-next-auth-init\n   */.setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n  /**\n   * Because all firebase products that depend on auth depend on auth-internal directly,\n   * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n   */.setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n    const authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n    authInternalProvider.initialize();\n  }));\n  _registerComponent(new Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\n    const auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n    return (auth => new AuthInterop(auth))(auth);\n  }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n  registerVersion(name, version, getVersionForPlatform(clientPlatform));\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\nconst authIdTokenMaxAge = getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\nlet lastPostedIdToken = null;\nconst mintCookieFactory = url => async user => {\n  const idTokenResult = user && (await user.getIdTokenResult());\n  const idTokenAge = idTokenResult && (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;\n  if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n    return;\n  }\n  // Specifically trip null => undefined when logged out, to delete any existing cookie\n  const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;\n  if (lastPostedIdToken === idToken) {\n    return;\n  }\n  lastPostedIdToken = idToken;\n  await fetch(url, {\n    method: idToken ? 'POST' : 'DELETE',\n    headers: idToken ? {\n      'Authorization': `Bearer ${idToken}`\n    } : {}\n  });\n};\n/**\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\n * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\n *\n * @param app - The Firebase App.\n *\n * @public\n */\nfunction getAuth(app = getApp()) {\n  const provider = _getProvider(app, 'auth');\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n  const auth = initializeAuth(app, {\n    popupRedirectResolver: browserPopupRedirectResolver,\n    persistence: [indexedDBLocalPersistence, browserLocalPersistence, browserSessionPersistence]\n  });\n  const authTokenSyncPath = getExperimentalSetting('authTokenSyncURL');\n  // Only do the Cookie exchange in a secure context\n  if (authTokenSyncPath && typeof isSecureContext === 'boolean' && isSecureContext) {\n    // Don't allow urls (XSS possibility), only paths on the same domain\n    const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);\n    if (location.origin === authTokenSyncUrl.origin) {\n      const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());\n      beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));\n      onIdTokenChanged(auth, user => mintCookie(user));\n    }\n  }\n  const authEmulatorHost = getDefaultEmulatorHost('auth');\n  if (authEmulatorHost) {\n    connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n  } else {\n    updateEmulatorBanner('Auth', false);\n  }\n  return auth;\n}\nfunction getScriptParentElement() {\n  var _a, _b;\n  return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;\n}\n_setExternalJSProvider({\n  loadJS(url) {\n    // TODO: consider adding timeout support & cancellation\n    return new Promise((resolve, reject) => {\n      const el = document.createElement('script');\n      el.setAttribute('src', url);\n      el.onload = resolve;\n      el.onerror = e => {\n        const error = _createError(\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        error.customData = e;\n        reject(error);\n      };\n      el.type = 'text/javascript';\n      el.charset = 'UTF-8';\n      getScriptParentElement().appendChild(el);\n    });\n  },\n  gapiScript: 'https://apis.google.com/js/api.js',\n  recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',\n  recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='\n});\nregisterAuth(\"Browser\" /* ClientPlatform.BROWSER */);\nexport { SAMLAuthProvider as $, ActionCodeOperation as A, useDeviceLanguage as B, updateCurrentUser as C, signOut as D, revokeAccessToken as E, FactorId as F, deleteUser as G, debugErrorMap as H, prodErrorMap as I, AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY as J, initializeAuth as K, connectAuthEmulator as L, AuthCredential as M, EmailAuthCredential as N, OperationType as O, PhoneAuthProvider as P, OAuthCredential as Q, RecaptchaVerifier as R, SignInMethod as S, TotpMultiFactorGenerator as T, PhoneAuthCredential as U, inMemoryPersistence as V, EmailAuthProvider as W, FacebookAuthProvider as X, GoogleAuthProvider as Y, GithubAuthProvider as Z, OAuthProvider as _, browserCookiePersistence as a, TwitterAuthProvider as a0, signInAnonymously as a1, signInWithCredential as a2, linkWithCredential as a3, reauthenticateWithCredential as a4, signInWithCustomToken as a5, sendPasswordResetEmail as a6, confirmPasswordReset as a7, applyActionCode as a8, checkActionCode as a9, _getProjectConfig as aA, _isIOS7Or8 as aB, _createError as aC, _assert as aD, AuthEventManager as aE, _getInstance as aF, _persistenceKeyName as aG, _getRedirectResult as aH, _overrideRedirectResult as aI, _clearRedirectOutcomes as aJ, _castAuth as aK, UserImpl as aL, AuthImpl as aM, _getClientVersion as aN, _generateEventId as aO, AuthPopup as aP, FetchProvider as aQ, SAMLAuthCredential as aR, verifyPasswordResetCode as aa, createUserWithEmailAndPassword as ab, signInWithEmailAndPassword as ac, sendSignInLinkToEmail as ad, isSignInWithEmailLink as ae, signInWithEmailLink as af, fetchSignInMethodsForEmail as ag, sendEmailVerification as ah, verifyBeforeUpdateEmail as ai, ActionCodeURL as aj, parseActionCodeURL as ak, updateProfile as al, updateEmail as am, updatePassword as an, getIdToken as ao, getIdTokenResult as ap, unlink as aq, getAdditionalUserInfo as ar, reload as as, getMultiFactorResolver as at, multiFactor as au, debugAssert as av, _isIOS as aw, _isAndroid as ax, _fail as ay, _getRedirectUrl as az, browserLocalPersistence as b, browserSessionPersistence as c, signInWithPopup as d, linkWithPopup as e, reauthenticateWithPopup as f, signInWithRedirect as g, linkWithRedirect as h, indexedDBLocalPersistence as i, reauthenticateWithRedirect as j, getRedirectResult as k, linkWithPhoneNumber as l, browserPopupRedirectResolver as m, PhoneMultiFactorGenerator as n, TotpSecret as o, getAuth as p, ProviderId as q, reauthenticateWithPhoneNumber as r, signInWithPhoneNumber as s, setPersistence as t, updatePhoneNumber as u, initializeRecaptchaConfig as v, validatePassword as w, onIdTokenChanged as x, beforeAuthStateChanged as y, onAuthStateChanged as z };","map":{"version":3,"names":["SDK_VERSION","_isFirebaseServerApp","_getProvider","_registerComponent","registerVersion","getApp","ErrorFactory","isBrowserExtension","isMobileCordova","isReactNative","FirebaseError","querystring","isCloudflareWorker","isCloudWorkstation","getModularInstance","base64Decode","getUA","isIE","createSubscribe","deepEqual","updateEmulatorBanner","pingServer","querystringDecode","extractQuerystring","isEmpty","getExperimentalSetting","getDefaultEmulatorHost","Logger","LogLevel","__rest","Component","FactorId","PHONE","TOTP","ProviderId","FACEBOOK","GITHUB","GOOGLE","PASSWORD","TWITTER","SignInMethod","EMAIL_LINK","EMAIL_PASSWORD","OperationType","LINK","REAUTHENTICATE","SIGN_IN","ActionCodeOperation","EMAIL_SIGNIN","PASSWORD_RESET","RECOVER_EMAIL","REVERT_SECOND_FACTOR_ADDITION","VERIFY_AND_CHANGE_EMAIL","VERIFY_EMAIL","_debugErrorMap","_prodErrorMap","debugErrorMap","prodErrorMap","_DEFAULT_AUTH_ERROR_FACTORY","AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY","ADMIN_ONLY_OPERATION","ARGUMENT_ERROR","APP_NOT_AUTHORIZED","APP_NOT_INSTALLED","CAPTCHA_CHECK_FAILED","CODE_EXPIRED","CORDOVA_NOT_READY","CORS_UNSUPPORTED","CREDENTIAL_ALREADY_IN_USE","CREDENTIAL_MISMATCH","CREDENTIAL_TOO_OLD_LOGIN_AGAIN","DEPENDENT_SDK_INIT_BEFORE_AUTH","DYNAMIC_LINK_NOT_ACTIVATED","EMAIL_CHANGE_NEEDS_VERIFICATION","EMAIL_EXISTS","EMULATOR_CONFIG_FAILED","EXPIRED_OOB_CODE","EXPIRED_POPUP_REQUEST","INTERNAL_ERROR","INVALID_API_KEY","INVALID_APP_CREDENTIAL","INVALID_APP_ID","INVALID_AUTH","INVALID_AUTH_EVENT","INVALID_CERT_HASH","INVALID_CODE","INVALID_CONTINUE_URI","INVALID_CORDOVA_CONFIGURATION","INVALID_CUSTOM_TOKEN","INVALID_DYNAMIC_LINK_DOMAIN","INVALID_EMAIL","INVALID_EMULATOR_SCHEME","INVALID_IDP_RESPONSE","INVALID_LOGIN_CREDENTIALS","INVALID_MESSAGE_PAYLOAD","INVALID_MFA_SESSION","INVALID_OAUTH_CLIENT_ID","INVALID_OAUTH_PROVIDER","INVALID_OOB_CODE","INVALID_ORIGIN","INVALID_PASSWORD","INVALID_PERSISTENCE","INVALID_PHONE_NUMBER","INVALID_PROVIDER_ID","INVALID_RECIPIENT_EMAIL","INVALID_SENDER","INVALID_SESSION_INFO","INVALID_TENANT_ID","MFA_INFO_NOT_FOUND","MFA_REQUIRED","MISSING_ANDROID_PACKAGE_NAME","MISSING_APP_CREDENTIAL","MISSING_AUTH_DOMAIN","MISSING_CODE","MISSING_CONTINUE_URI","MISSING_IFRAME_START","MISSING_IOS_BUNDLE_ID","MISSING_OR_INVALID_NONCE","MISSING_MFA_INFO","MISSING_MFA_SESSION","MISSING_PHONE_NUMBER","MISSING_SESSION_INFO","MODULE_DESTROYED","NEED_CONFIRMATION","NETWORK_REQUEST_FAILED","NULL_USER","NO_AUTH_EVENT","NO_SUCH_PROVIDER","OPERATION_NOT_ALLOWED","OPERATION_NOT_SUPPORTED","POPUP_BLOCKED","POPUP_CLOSED_BY_USER","PROVIDER_ALREADY_LINKED","QUOTA_EXCEEDED","REDIRECT_CANCELLED_BY_USER","REDIRECT_OPERATION_PENDING","REJECTED_CREDENTIAL","SECOND_FACTOR_ALREADY_ENROLLED","SECOND_FACTOR_LIMIT_EXCEEDED","TENANT_ID_MISMATCH","TIMEOUT","TOKEN_EXPIRED","TOO_MANY_ATTEMPTS_TRY_LATER","UNAUTHORIZED_DOMAIN","UNSUPPORTED_FIRST_FACTOR","UNSUPPORTED_PERSISTENCE","UNSUPPORTED_TENANT_OPERATION","UNVERIFIED_EMAIL","USER_CANCELLED","USER_DELETED","USER_DISABLED","USER_MISMATCH","USER_SIGNED_OUT","WEAK_PASSWORD","WEB_STORAGE_UNSUPPORTED","ALREADY_INITIALIZED","RECAPTCHA_NOT_ENABLED","MISSING_RECAPTCHA_TOKEN","INVALID_RECAPTCHA_TOKEN","INVALID_RECAPTCHA_ACTION","MISSING_CLIENT_TYPE","MISSING_RECAPTCHA_VERSION","INVALID_RECAPTCHA_VERSION","INVALID_REQ_TYPE","INVALID_HOSTING_LINK_DOMAIN","logClient","_logWarn","msg","args","logLevel","WARN","warn","_logError","ERROR","error","_fail","authOrCode","rest","createErrorInternal","_createError","_errorWithCustomMessage","auth","code","message","errorMap","Object","assign","factory","create","appName","name","_serverAppCurrentUserOperationNotSupportedError","_assertInstanceOf","object","instance","constructorInstance","constructor","fullParams","slice","_errorFactory","_assert","assertion","debugFail","failure","Error","debugAssert","_getCurrentUrl","_a","self","location","href","_isHttpOrHttps","_getCurrentScheme","protocol","_isOnline","navigator","onLine","_getUserLanguage","navigatorLanguage","languages","language","Delay","shortDelay","longDelay","isMobile","get","Math","min","_emulatorUrl","config","path","emulator","url","startsWith","FetchProvider","initialize","fetchImpl","headersImpl","responseImpl","fetch","globalThis","headers","Headers","response","Response","SERVER_ERROR_MAP","CookieAuthProxiedEndpoints","DEFAULT_API_TIMEOUT_MS","_addTidIfNecessary","request","tenantId","_performApiRequest","method","customErrorMap","_performFetchWithErrorHandling","body","params","JSON","stringify","query","key","apiKey","_getAdditionalHeaders","languageCode","fetchArgs","referrerPolicy","emulatorConfig","host","credentials","_getFinalTarget","apiHost","fetchFn","_canInitEmulator","networkTimeout","NetworkTimeout","Promise","race","promise","clearNetworkTimeout","json","_makeTaggedError","ok","errorMessage","serverErrorCode","serverErrorMessage","split","authError","toLowerCase","replace","e","String","_performSignInRequest","serverResponse","_serverResponse","base","authInternal","finalTarget","apiScheme","includes","_persistenceManagerAvailable","_getPersistenceType","cookiePersistence","_getPersistence","toString","_parseEnforcementState","enforcementStateStr","clearTimeout","timer","_","reject","setTimeout","errorParams","email","phoneNumber","customData","_tokenResponse","isV2","grecaptcha","undefined","getResponse","isEnterprise","enterprise","RecaptchaConfig","siteKey","recaptchaEnforcementState","recaptchaKey","getProviderEnforcementState","providerStr","length","provider","enforcementState","isProviderEnabled","isAnyProviderEnabled","getRecaptchaParams","recaptchaSiteKey","getRecaptchaConfig","deleteAccount","deleteLinkedAccounts","getAccountInfo","utcTimestampToDateString","utcTimestamp","date","Date","Number","isNaN","getTime","toUTCString","getIdToken","user","forceRefresh","getIdTokenResult","userInternal","token","claims","_parseToken","exp","auth_time","iat","firebase","signInProvider","authTime","secondsStringToMilliseconds","issuedAtTime","expirationTime","signInSecondFactor","seconds","algorithm","payload","signature","decoded","parse","_tokenExpiresIn","parsedToken","_logoutIfInvalidated","bypassAuthState","isUserInvalidated","currentUser","signOut","ProactiveRefresh","isRunning","timerId","errorBackoff","_start","schedule","_stop","getInterval","wasError","interval","expTime","stsTokenManager","now","max","iteration","UserMetadata","createdAt","lastLoginAt","_initializeTime","lastSignInTime","creationTime","_copy","metadata","toJSON","_reloadWithoutSaving","idToken","users","coreAccount","_notifyReloadListener","newProviderData","providerUserInfo","extractProviderData","providerData","mergeProviderData","oldIsAnonymous","isAnonymous","newIsAnonymous","passwordHash","updates","uid","localId","displayName","photoURL","photoUrl","emailVerified","reload","_persistUserIfCurrent","_notifyListenersIfCurrent","original","newData","deduped","filter","o","some","n","providerId","providers","map","rawId","requestStsToken","refreshToken","tokenApiHost","accessToken","access_token","expiresIn","expires_in","refresh_token","revokeToken","StsTokenManager","isExpired","updateFromServerResponse","updateTokensAndExpiration","updateFromIdToken","getToken","refresh","clearRefreshToken","oldToken","expiresInSec","fromJSON","manager","_assign","_clone","_performRefresh","assertStringOrUndefined","UserImpl","opt","proactiveRefresh","reloadUserInfo","reloadListener","userInfo","newUser","_onReload","callback","_startProactiveRefresh","_stopProactiveRefresh","_updateTokensIfNecessary","tokensRefreshed","delete","app","_redirectEventId","_fromJSON","_b","_c","_d","_e","_f","_g","_h","plainObjectTokenManager","Array","isArray","_fromIdTokenResponse","idTokenResponse","_fromGetAccountInfoResponse","instanceCache","Map","_getInstance","cls","Function","set","InMemoryPersistence","type","storage","_isAvailable","_set","value","_get","_remove","_addListener","_key","_listener","_removeListener","inMemoryPersistence","_persistenceKeyName","PersistenceUserManager","persistence","userKey","fullUserKey","fullPersistenceKey","boundEventHandler","_onStorageEvent","bind","setCurrentUser","getCurrentUser","blob","catch","removeCurrentUser","savePersistenceForRedirect","setPersistence","newPersistence","persistenceHierarchy","availablePersistences","all","selectedPersistence","userToMigrate","migrationHierarchy","p","_shouldAllowMigration","_getBrowserName","userAgent","ua","_isIEMobile","_isFirefox","_isBlackBerry","_isWebOS","_isSafari","_isChromeIOS","_isAndroid","re","matches","match","test","_isIOS","_isIOS7Or8","_isIOSStandalone","window","standalone","_isIE10","document","documentMode","_isMobileBrowser","_getClientVersion","clientPlatform","frameworks","reportedPlatform","reportedFrameworks","join","AuthMiddlewareQueue","queue","pushCallback","onAbort","wrappedCallback","resolve","result","push","index","runMiddleware","nextUser","onAbortStack","beforeStateCallback","reverse","originalMessage","_getPasswordPolicy","MINIMUM_MIN_PASSWORD_LENGTH","PasswordPolicyImpl","responseOptions","customStrengthOptions","minPasswordLength","maxPasswordLength","containsLowercaseCharacter","containsLowercaseLetter","containsUppercaseCharacter","containsUppercaseLetter","containsNumericCharacter","containsNonAlphanumericCharacter","allowedNonAlphanumericCharacters","forceUpgradeOnSignin","schemaVersion","validatePassword","password","status","isValid","passwordPolicy","validatePasswordLengthOptions","validatePasswordCharacterOptions","meetsMinPasswordLength","meetsMaxPasswordLength","updatePasswordCharacterOptionsStatuses","passwordChar","i","charAt","AuthImpl","heartbeatServiceProvider","appCheckServiceProvider","operations","authStateSubscription","Subscription","idTokenSubscription","beforeStateQueue","redirectUser","isProactiveRefreshEnabled","EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION","_isInitialized","_deleted","_initializationPromise","_popupRedirectResolver","_agentRecaptchaConfig","_tenantRecaptchaConfigs","_projectPasswordPolicy","_tenantPasswordPolicies","_resolvePersistenceManagerAvailable","lastNotifiedUid","settings","appVerificationDisabledForTesting","clientVersion","sdkClientVersion","_initializeWithPersistence","popupRedirectResolver","persistenceManager","call","_shouldInitProactively","_initialize","initializeCurrentUser","assertedPersistence","_currentUser","_updateCurrentUser","initializeCurrentUserFromIdToken","directlySetCurrentUser","err","console","authIdToken","then","previouslyStoredUser","futureCurrentUser","needsTocheckMiddleware","authDomain","getOrInitRedirectPersistenceManager","redirectUserEventId","storedUserEventId","tryRedirectSignIn","_overrideRedirectResult","reloadAndSetCurrentUserOrClear","redirectResolver","_completeRedirectFn","_setRedirectUser","useDeviceLanguage","_delete","updateCurrentUser","userExtern","skipBeforeStateCallbacks","notifyAuthListeners","redirectPersistenceManager","_getRecaptchaConfig","_getPasswordPolicyInternal","_updatePasswordPolicy","_updateErrorMap","onAuthStateChanged","nextOrObserver","completed","registerStateListener","beforeAuthStateChanged","onIdTokenChanged","authStateReady","unsubscribe","revokeAccessToken","tokenType","redirectManager","resolver","_redirectPersistence","_redirectUserForId","id","next","currentUid","subscription","cb","isUnsubscribed","addObserver","action","_logFramework","framework","sort","_getFrameworks","options","appId","heartbeatsHeader","getImmediate","optional","getHeartbeatsHeader","appCheckToken","_getAppCheckToken","appCheckTokenResult","_castAuth","observer","externalJSProvider","loadJS","recaptchaV2Script","recaptchaEnterpriseScript","gapiScript","_setExternalJSProvider","_loadJS","_recaptchaV2ScriptUrl","_recaptchaEnterpriseScriptUrl","_gapiScriptUrl","_generateCallbackName","prefix","floor","random","_SOLVE_TIME_MS","_EXPIRATION_TIME_MS","_WIDGET_ID_START","MockReCaptcha","counter","_widgets","render","container","parameters","MockWidget","reset","optWidgetId","execute","MockGreCAPTCHATopLevel","MockGreCAPTCHA","ready","_siteKey","_options","_container","_parameters","containerOrId","deleted","responseToken","clickHandler","getElementById","isVisible","size","addEventListener","checkIfDeleted","removeEventListener","generateRandomAlphaNumericString","expiredCallback","len","chars","allowedChars","RECAPTCHA_ENTERPRISE_VERIFIER_TYPE","FAKE_TOKEN","RecaptchaEnterpriseVerifier","authExtern","verify","retrieveSiteKey","clientType","version","retrieveRecaptchaToken","mockRecaptcha","injectRecaptchaFields","isCaptchaResp","isFakeToken","verifier","captchaResponse","newRequest","phoneEnrollmentInfo","recaptchaToken","phoneSignInInfo","handleRecaptchaFlow","authInstance","actionName","actionMethod","recaptchaAuthProvider","requestWithRecaptcha","log","requestWithRecaptchaFields","_initializeRecaptchaConfig","initializeAuth","deps","isInitialized","initialOptions","getOptions","_initializeAuthInstance","hierarchy","connectAuthEmulator","disableWarnings","extractProtocol","port","extractHostAndPort","portStr","freeze","emitEmulatorWarning","protocolEnd","indexOf","substr","authority","exec","hostAndPort","pop","bracketedIPv6","parsePort","attachBanner","el","createElement","sty","style","innerText","position","width","backgroundColor","border","color","bottom","left","margin","zIndex","textAlign","classList","add","appendChild","info","readyState","AuthCredential","signInMethod","_getIdTokenResponse","_auth","_linkToIdToken","_idToken","_getReauthenticationResolver","resetPassword","updateEmailPassword","linkEmailPassword","applyActionCode$1","signInWithPassword","sendOobCode","sendEmailVerification$1","sendPasswordResetEmail$1","sendSignInLinkToEmail$1","verifyAndChangeEmail","signInWithEmailLink$1","signInWithEmailLinkForLinking","EmailAuthCredential","_email","_password","_tenantId","_fromEmailAndPassword","_fromEmailAndCode","oobCode","obj","returnSecureToken","signInWithIdp","IDP_REQUEST_URI$1","OAuthCredential","arguments","pendingToken","_fromParams","cred","nonce","oauthToken","oauthTokenSecret","secret","buildRequest","autoCreate","requestUri","postBody","sendPhoneVerificationCode","signInWithPhoneNumber$1","linkWithPhoneNumber$1","temporaryProof","VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_","verifyPhoneNumberForExisting","apiRequest","operation","PhoneAuthCredential","_fromVerification","verificationId","verificationCode","_fromTokenResponse","_makeVerificationRequest","sessionInfo","parseMode","mode","parseDeepLink","link","doubleDeepLink","iOSDeepLink","iOSDoubleDeepLink","ActionCodeURL","actionLink","searchParams","continueUrl","parseLink","parseActionCodeURL","EmailAuthProvider","PROVIDER_ID","credential","credentialWithLink","emailLink","actionCodeUrl","EMAIL_PASSWORD_SIGN_IN_METHOD","EMAIL_LINK_SIGN_IN_METHOD","FederatedAuthProvider","defaultLanguageCode","customParameters","setDefaultLanguage","setCustomParameters","customOAuthParameters","getCustomParameters","BaseOAuthProvider","scopes","addScope","scope","getScopes","OAuthProvider","credentialFromJSON","_credential","rawNonce","credentialFromResult","userCredential","oauthCredentialFromTaggedObject","credentialFromError","tokenResponse","oauthIdToken","oauthAccessToken","FacebookAuthProvider","FACEBOOK_SIGN_IN_METHOD","credentialFromTaggedObject","GoogleAuthProvider","GOOGLE_SIGN_IN_METHOD","GithubAuthProvider","GITHUB_SIGN_IN_METHOD","IDP_REQUEST_URI","SAMLAuthCredential","_create","SAML_PROVIDER_PREFIX","SAMLAuthProvider","samlCredentialFromTaggedObject","TwitterAuthProvider","TWITTER_SIGN_IN_METHOD","signUp","UserCredentialImpl","operationType","providerIdForResponse","userCred","_forOperation","signInAnonymously","MultiFactorError","setPrototypeOf","prototype","_fromErrorAndOperation","_processCredentialSavingMfaContextIfNecessary","idTokenProvider","providerDataAsNames","Set","pid","unlink","_assertLinkedStatus","deleteProvider","providersLeft","pd","has","_link$1","expected","providerIds","_reauthenticate","parsed","sub","_signInWithCredential","signInWithCredential","linkWithCredential","reauthenticateWithCredential","signInWithCustomToken$1","signInWithCustomToken","customToken","MultiFactorInfoImpl","factorId","mfaEnrollmentId","enrollmentTime","enrolledAt","_fromServerResponse","enrollment","PhoneMultiFactorInfoImpl","TotpMultiFactorInfoImpl","phoneInfo","_setActionCodeSettingsOnRequest","actionCodeSettings","dynamicLinkDomain","linkDomain","canHandleCodeInApp","handleCodeInApp","iOS","bundleId","iOSBundleId","android","packageName","androidInstallApp","installApp","androidMinimumVersionCode","minimumVersion","androidPackageName","recachePasswordPolicy","sendPasswordResetEmail","requestType","confirmPasswordReset","newPassword","applyActionCode","checkActionCode","authModular","newEmail","mfaInfo","multiFactorInfo","data","previousEmail","verifyPasswordResetCode","createUserWithEmailAndPassword","signUpResponse","signInWithEmailAndPassword","sendSignInLinkToEmail","setActionCodeSettings","isSignInWithEmailLink","signInWithEmailLink","createAuthUri","fetchSignInMethodsForEmail","continueUri","identifier","signinMethods","sendEmailVerification","verifyBeforeUpdateEmail","updateProfile$1","updateProfile","profileRequest","passwordProvider","find","updateEmail","updateEmailOrPassword","updatePassword","profile","rawUserInfo","isNewUser","kind","filteredProviderId","GenericAdditionalUserInfo","FacebookAdditionalUserInfo","GithubAdditionalUserInfo","GoogleAdditionalUserInfo","TwitterAdditionalUserInfo","screenName","FederatedAdditionalUserInfoWithUsername","username","login","getAdditionalUserInfo","initializeRecaptchaConfig","deleteUser","MultiFactorSessionImpl","_fromIdtoken","_fromMfaPendingCredential","mfaPendingCredential","multiFactorSession","pendingCredential","MultiFactorResolverImpl","session","hints","signInResolver","_fromError","mfaResponse","_process","resolveSignIn","assertionExtern","getMultiFactorResolver","errorInternal","startEnrollPhoneMfa","finalizeEnrollPhoneMfa","startEnrollTotpMfa","finalizeEnrollTotpMfa","withdrawMfa","MultiFactorUserImpl","enrolledFactors","_fromUser","getSession","enroll","finalizeMfaResponse","unenroll","infoOrUid","multiFactorUserCache","WeakMap","multiFactor","userModular","STORAGE_AVAILABLE_KEY","BrowserPersistenceClass","storageRetriever","setItem","removeItem","getItem","_POLLING_INTERVAL_MS$1","IE10_LOCAL_STORAGE_SYNC_DELAY","BrowserLocalPersistence","localStorage","event","poll","onStorageEvent","listeners","localCache","pollTimer","fallbackToPolling","forAllChangedKeys","keys","newValue","oldValue","_oldValue","notifyListeners","detachListener","stopPolling","triggerListeners","storedValue","listener","from","startPolling","setInterval","StorageEvent","clearInterval","attachListener","browserLocalPersistence","POLLING_INTERVAL_MS","getDocumentCookie","escapedName","matcher","RegExp","cookie","getCookieName","isDevMode","CookiePersistence","listenerUnsubscribes","originalUrl","URL","origin","isSecureContext","cookieEnabled","_value","cookieStore","existingValue","changedCookie","changed","change","deletedCookie","lastValue","currentValue","browserCookiePersistence","BrowserSessionPersistence","sessionStorage","browserSessionPersistence","_allSettled","promises","fulfilled","reason","Receiver","eventTarget","handlersMap","handleEvent","existingInstance","receivers","receiver","isListeningto","newInstance","messageEvent","eventId","eventType","handlers","ports","postMessage","handler","_subscribe","eventHandler","_unsubscribe","_generateEventId","digits","Sender","target","removeMessageHandler","messageChannel","port1","onMessage","close","_send","timeout","MessageChannel","completionTimer","start","ackTimer","port2","finally","_window","_setWindowLocation","_isWorker","_getActiveServiceWorker","serviceWorker","registration","active","_getServiceWorkerController","controller","_getWorkerGlobalScope","DB_NAME","DB_VERSION","DB_OBJECTSTORE_NAME","DB_DATA_KEYPATH","DBPromise","toPromise","getObjectStore","db","isReadWrite","transaction","objectStore","_deleteDatabase","indexedDB","deleteDatabase","_openDatabase","open","createObjectStore","keyPath","objectStoreNames","contains","_putObject","put","getObject","_deleteObject","_POLLING_INTERVAL_MS","_TRANSACTION_RETRY_COUNT","IndexedDBLocalPersistence","pendingWrites","sender","serviceWorkerReceiverAvailable","activeServiceWorker","_workerInitializationPromise","initializeServiceWorkerMessaging","_openDb","_withRetries","op","numAttempts","initializeReceiver","initializeSender","_origin","_poll","keyProcessed","_data","results","notifyServiceWorker","_withPendingWrite","write","getAllRequest","getAll","keysInResult","fbase_key","localKey","indexedDBLocalPersistence","startSignInPhoneMfa","finalizeSignInPhoneMfa","finalizeSignInTotpMfa","_JSLOAD_CALLBACK","NETWORK_TIMEOUT_DELAY","ReCaptchaLoaderImpl","hostLanguage","librarySeparatelyLoaded","load","hl","isHostLanguageValid","shouldResolveImmediately","recaptcha","widgetId","onload","clearedOneInstance","MockReCaptchaLoaderImpl","RECAPTCHA_VERIFIER_TYPE","DEFAULT_PARAMS","theme","RecaptchaVerifier","destroyed","tokenChangeListeners","renderPromise","isInvisible","makeTokenCallback","_recaptchaLoader","validateStartingState","assertNotDestroyed","getAssertedRecaptcha","tokenChange","makeRenderPromise","_reset","clear","childNodes","forEach","node","removeChild","sitekey","hasChildNodes","existing","globalFunc","init","guaranteedEmpty","domReady","ConfirmationResultImpl","onConfirmation","confirm","authCredential","signInWithPhoneNumber","appVerifier","_verifyPhoneNumber","linkWithPhoneNumber","reauthenticateWithPhoneNumber","phoneInfoOptions","startPhoneMfaEnrollmentRequest","startEnrollPhoneMfaActionCallback","requestWithRecaptchaV2","injectRecaptchaV2Token","startPhoneMfaEnrollmentResponse","phoneSessionInfo","multiFactorHint","multiFactorUid","startPhoneMfaSignInRequest","startSignInPhoneMfaActionCallback","startPhoneMfaSignInResponse","phoneResponseInfo","sendPhoneVerificationCodeRequest","sendPhoneVerificationCodeActionCallback","sendPhoneVerificationCodeResponse","updatePhoneNumber","recaptchaV2Verifier","recaptchaV2Token","recaptchaVersion","PhoneAuthProvider","verifyPhoneNumber","phoneOptions","applicationVerifier","PHONE_SIGN_IN_METHOD","_withDefaultResolver","resolverOverride","IdpCredential","_buildIdpRequest","sessionId","returnIdpCredential","_signIn","_reauth","_link","AbstractPopupRedirectOperation","pendingPromise","eventManager","onExecution","registerConsumer","onAuthEvent","urlResponse","getIdpTask","onError","unregisterAndCleanUp","unregisterConsumer","cleanUp","_POLL_WINDOW_CLOSE_TIMEOUT","signInWithPopup","resolverInternal","PopupOperation","executeNotNull","reauthenticateWithPopup","linkWithPopup","authWindow","pollId","currentPopupAction","cancel","_openPopup","associatedEvent","_originValidation","_isIframeWebStorageSupported","isSupported","pollUserCancellation","closed","PENDING_REDIRECT_KEY","redirectOutcomeMap","RedirectAction","readyOutcome","hasPendingRedirect","_getAndClearPendingRedirectStatus","pendingRedirectKey","resolverPersistence","_setPendingRedirectStatus","_clearRedirectOutcomes","signInWithRedirect","_signInWithRedirect","_openRedirect","reauthenticateWithRedirect","_reauthenticateWithRedirect","prepareUserForRedirect","linkWithRedirect","_linkWithRedirect","getRedirectResult","_getRedirectResult","resolverExtern","EVENT_DUPLICATION_CACHE_DURATION_MS","AuthEventManager","cachedEventUids","consumers","queuedRedirectEvent","hasHandledPotentialRedirect","lastProcessedEventTime","authEventConsumer","isEventForConsumer","sendToConsumer","saveEventToCache","onEvent","hasEventBeenHandled","handled","consumer","isRedirectEvent","isNullRedirectEvent","eventIdMatches","eventUid","v","_getProjectConfig","IP_ADDRESS_REGEX","HTTP_REGEX","_validateOrigin","authorizedDomains","domain","matchDomain","currentUrl","hostname","ceUrl","escapedDomainPattern","NETWORK_TIMEOUT","resetUnloadedGapiModules","beacon","___jsl","H","hint","r","L","CP","loadGapi","loadGapiIframe","gapi","iframes","getContext","ontimeout","Iframe","cbName","cachedGApiLoader","_loadGapi","PING_TIMEOUT","IFRAME_PATH","EMULATED_IFRAME_PATH","IFRAME_ATTRIBUTES","top","height","tabindex","EID_FROM_APIHOST","getIframeUrl","eid","fw","_openIframe","context","where","messageHandlersFilter","CROSS_ORIGIN_IFRAMES_FILTER","attributes","dontclear","iframe","restyle","setHideOnLeave","networkError","networkErrorTimer","clearTimerAndResolve","ping","BASE_POPUP_OPTIONS","resizable","statusbar","toolbar","DEFAULT_WIDTH","DEFAULT_HEIGHT","TARGET_BLANK","FIREFOX_EMPTY_URL","AuthPopup","_open","screen","availHeight","availWidth","scrollbars","optionsString","entries","reduce","accum","openAsNewWindowIOS","newWin","focus","click","createEvent","initMouseEvent","dispatchEvent","WIDGET_PATH","EMULATOR_WIDGET_PATH","FIREBASE_APP_CHECK_FRAGMENT_ID","encodeURIComponent","_getRedirectUrl","authType","redirectUrl","additionalParams","tid","paramsDict","appCheckTokenFragment","getHandlerBase","WEB_STORAGE_SUPPORT_KEY","BrowserPopupRedirectResolver","eventManagers","originValidationPromises","initAndGetManager","register","iframeEvent","authEvent","send","browserPopupRedirectResolver","MultiFactorAssertionImpl","_finalizeEnroll","_finalizeSignIn","PhoneMultiFactorAssertionImpl","_fromCredential","phoneVerificationInfo","PhoneMultiFactorGenerator","FACTOR_ID","TotpMultiFactorGenerator","assertionForEnrollment","oneTimePassword","TotpMultiFactorAssertionImpl","_fromSecret","assertionForSignIn","enrollmentId","_fromEnrollmentId","generateSecret","mfaSession","totpEnrollmentInfo","TotpSecret","_fromStartTotpMfaEnrollmentResponse","otp","totpVerificationInfo","_makeTotpVerificationInfo","secretKey","hashingAlgorithm","codeLength","codeIntervalSeconds","enrollmentCompletionDeadline","totpSessionInfo","sharedSecretKey","verificationCodeLength","periodSec","finalizeEnrollmentTime","generateQrCodeUrl","accountName","issuer","useDefaults","_isEmptyString","input","AuthInterop","internalListeners","getUid","assertAuthConfigured","addAuthTokenListener","updateProactiveRefresh","removeAuthTokenListener","getVersionForPlatform","registerAuth","getProvider","setInstantiationMode","setInstanceCreatedCallback","_instanceIdentifier","_instance","authInternalProvider","DEFAULT_ID_TOKEN_MAX_AGE","authIdTokenMaxAge","lastPostedIdToken","mintCookieFactory","idTokenResult","idTokenAge","getAuth","authTokenSyncPath","authTokenSyncUrl","mintCookie","authEmulatorHost","getScriptParentElement","getElementsByTagName","setAttribute","onerror","charset","$","A","B","C","D","E","F","G","I","J","K","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aA","aB","aC","aD","aE","aF","aG","aH","aI","aJ","aK","aL","aM","aN","aO","aP","aQ","aR","aa","ab","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","an","ao","ap","aq","ar","as","at","au","av","aw","ax","ay","az","b","c","d","f","g","h","j","k","l","m","q","s","t","u","w","x","y","z"],"sources":["C:/Users/ASUS/Desktop/Projects/React_Projects/e-shop/node_modules/firebase/node_modules/@firebase/auth/dist/esm2017/index-683d5879.js"],"sourcesContent":["import { SDK_VERSION, _isFirebaseServerApp, _getProvider, _registerComponent, registerVersion, getApp } from '@firebase/app';\nimport { ErrorFactory, isBrowserExtension, isMobileCordova, isReactNative, FirebaseError, querystring, isCloudflareWorker, isCloudWorkstation, getModularInstance, base64Decode, getUA, isIE, createSubscribe, deepEqual, updateEmulatorBanner, pingServer, querystringDecode, extractQuerystring, isEmpty, getExperimentalSetting, getDefaultEmulatorHost } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { __rest } from 'tslib';\nimport { Component } from '@firebase/component';\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An enum of factors that may be used for multifactor authentication.\n *\n * @public\n */\nconst FactorId = {\n    /** Phone as second factor */\n    PHONE: 'phone',\n    TOTP: 'totp'\n};\n/**\n * Enumeration of supported providers.\n *\n * @public\n */\nconst ProviderId = {\n    /** Facebook provider ID */\n    FACEBOOK: 'facebook.com',\n    /** GitHub provider ID */\n    GITHUB: 'github.com',\n    /** Google provider ID */\n    GOOGLE: 'google.com',\n    /** Password provider */\n    PASSWORD: 'password',\n    /** Phone provider */\n    PHONE: 'phone',\n    /** Twitter provider ID */\n    TWITTER: 'twitter.com'\n};\n/**\n * Enumeration of supported sign-in methods.\n *\n * @public\n */\nconst SignInMethod = {\n    /** Email link sign in method */\n    EMAIL_LINK: 'emailLink',\n    /** Email/password sign in method */\n    EMAIL_PASSWORD: 'password',\n    /** Facebook sign in method */\n    FACEBOOK: 'facebook.com',\n    /** GitHub sign in method */\n    GITHUB: 'github.com',\n    /** Google sign in method */\n    GOOGLE: 'google.com',\n    /** Phone sign in method */\n    PHONE: 'phone',\n    /** Twitter sign in method */\n    TWITTER: 'twitter.com'\n};\n/**\n * Enumeration of supported operation types.\n *\n * @public\n */\nconst OperationType = {\n    /** Operation involving linking an additional provider to an already signed-in user. */\n    LINK: 'link',\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\n    REAUTHENTICATE: 'reauthenticate',\n    /** Operation involving signing in a user. */\n    SIGN_IN: 'signIn'\n};\n/**\n * An enumeration of the possible email action types.\n *\n * @public\n */\nconst ActionCodeOperation = {\n    /** The email link sign-in action. */\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n    /** The password reset action. */\n    PASSWORD_RESET: 'PASSWORD_RESET',\n    /** The email revocation action. */\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\n    /** The revert second factor addition email action. */\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n    /** The revert second factor addition email action. */\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n    /** The email verification action. */\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\n};\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _debugErrorMap() {\n    return {\n        [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\n        [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\n        [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" +\n            'authorized to use Firebase Authentication with the provided API key. ' +\n            'Review your key configuration in the Google API console.',\n        [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' +\n            'Android package name or iOS bundle ID) provided is not installed on ' +\n            'this device.',\n        [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' +\n            'already used or the domain associated with it does not match the list ' +\n            'of whitelisted domains.',\n        [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' +\n            'again.',\n        [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\n        [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\n        [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\n        [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\n        [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' +\n            'again before retrying this request.',\n        [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n            'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n            'starting any other Firebase SDK.',\n        [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +\n            'conditions.',\n        [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\n        [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\n        [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' +\n            'no longer be configured to use the emulator. Try calling ' +\n            '\"connectAuthEmulator()\" sooner.',\n        [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\n        [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\n        [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\n        [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' +\n            ' The reCAPTCHA token response is either invalid or expired.',\n        [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registered for the current project.',\n        [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" +\n            \"if the user's token has been tampered with, or if the user isn't for \" +\n            'the project associated with this API key.',\n        [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n        [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' +\n            'invalid. Please resend the verification code sms and be sure to use the ' +\n            'verification code provided by the user.',\n        [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\n        [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' +\n            'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +\n            'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +\n            'cordova-plugin-customurlscheme.',\n        [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\n        [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\n        [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\n        [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\n        [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\n        [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\n        [\"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */]: 'The supplied auth credential is incorrect, malformed or has expired.',\n        [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' +\n            'Please fix by going to the Auth email templates section in the Firebase Console.',\n        [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\n        [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' +\n            'only supports OAuth providers.',\n        [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' +\n            'specified API key.',\n        [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' +\n            'project. Edit the list of authorized domains from the Firebase console.',\n        [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' +\n            'expired, or has already been used.',\n        [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\n        [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\n        [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' +\n            'phone number in a format that can be parsed into E.164 format. E.164 ' +\n            'phone numbers are written in the format [+][country code][subscriber ' +\n            'number including area code].',\n        [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\n        [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' +\n            'recipient email address is invalid.',\n        [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' +\n            'Please fix by going to the Auth email templates section in the Firebase Console.',\n        [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\n        [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\n        [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\n        [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\n        [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' +\n            'by following the instructions in the Firebase console.',\n        [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' +\n            'assertion. A reCAPTCHA response token needs to be provided.',\n        [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\n        [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\n        [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\n        [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\n        [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' +\n            'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +\n            'in the ID token payload.',\n        [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\n        [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\n        [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\n        [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\n        [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\n        [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\n        [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\n        [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\n        [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' +\n            'sign-in credentials. Sign in using a provider associated with this ' +\n            'email address.',\n        [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n        [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n        [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\n        [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' +\n            'requires a non-null user object.',\n        [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' +\n            'Enable it in the Firebase console, under the sign-in method tab of the ' +\n            'Auth section.',\n        [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' +\n            'running on. \"location.protocol\" must be http, https or chrome-extension' +\n            ' and web storage must be enabled.',\n        [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n        [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\n        [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\n        [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\n        [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\n        [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\n        [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\n        [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\n        [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\n        [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n        [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\n        [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\n        [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' +\n            'Try again later.',\n        [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' +\n            'the domain in the Firebase console.',\n        [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n        [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\n        [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\n        [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\n        [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\n        [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' +\n            'have been deleted.',\n        [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\n        [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\n        [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\n        [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\n        [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\n        [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' +\n            'different options. To avoid this error, call initializeAuth() with the ' +\n            'same options as when it was originally called, or call getAuth() to return the' +\n            ' already initialized instance.',\n        [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\n        [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\n        [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\n        [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\n        [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\n        [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\n        [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\n        [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.',\n        [\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n        [\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: 'The password does not meet the requirements.',\n        [\"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */]: 'The provided Hosting link domain is not configured in Firebase Hosting or is not owned by ' +\n            'the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`).'\n    };\n}\nfunction _prodErrorMap() {\n    // We will include this one message in the prod error map since by the very\n    // nature of this error, developers will never be able to see the message\n    // using the debugErrorMap (which is installed during auth initialization).\n    return {\n        [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n            'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n            'starting any other Firebase SDK.'\n    };\n}\n/**\n * A verbose error map with detailed descriptions for most error codes.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nconst debugErrorMap = _debugErrorMap;\n/**\n * A minimal error map with all verbose error messages stripped.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nconst prodErrorMap = _prodErrorMap;\nconst _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory('auth', 'Firebase', _prodErrorMap());\n/**\n * A map of potential `Auth` error codes, for easier comparison with errors\n * thrown by the SDK.\n *\n * @remarks\n * Note that you can't tree-shake individual keys\n * in the map, so by using the map you might substantially increase your\n * bundle size.\n *\n * @public\n */\nconst AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n    ARGUMENT_ERROR: 'auth/argument-error',\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n    CODE_EXPIRED: 'auth/code-expired',\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n    EMAIL_EXISTS: 'auth/email-already-in-use',\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n    INTERNAL_ERROR: 'auth/internal-error',\n    INVALID_API_KEY: 'auth/invalid-api-key',\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n    INVALID_APP_ID: 'auth/invalid-app-id',\n    INVALID_AUTH: 'auth/invalid-user-token',\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n    INVALID_CODE: 'auth/invalid-verification-code',\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n    INVALID_EMAIL: 'auth/invalid-email',\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\n    INVALID_PASSWORD: 'auth/wrong-password',\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n    INVALID_SENDER: 'auth/invalid-sender',\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n    MISSING_CODE: 'auth/missing-verification-code',\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\n    MODULE_DESTROYED: 'auth/app-deleted',\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n    NULL_USER: 'auth/null-user',\n    NO_AUTH_EVENT: 'auth/no-auth-event',\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n    POPUP_BLOCKED: 'auth/popup-blocked',\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n    TIMEOUT: 'auth/timeout',\n    TOKEN_EXPIRED: 'auth/user-token-expired',\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\n    USER_CANCELLED: 'auth/user-cancelled',\n    USER_DELETED: 'auth/user-not-found',\n    USER_DISABLED: 'auth/user-disabled',\n    USER_MISMATCH: 'auth/user-mismatch',\n    USER_SIGNED_OUT: 'auth/user-signed-out',\n    WEAK_PASSWORD: 'auth/weak-password',\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n    ALREADY_INITIALIZED: 'auth/already-initialized',\n    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n    MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n    INVALID_REQ_TYPE: 'auth/invalid-req-type',\n    INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'\n};\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logClient = new Logger('@firebase/auth');\nfunction _logWarn(msg, ...args) {\n    if (logClient.logLevel <= LogLevel.WARN) {\n        logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n    }\n}\nfunction _logError(msg, ...args) {\n    if (logClient.logLevel <= LogLevel.ERROR) {\n        logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _fail(authOrCode, ...rest) {\n    throw createErrorInternal(authOrCode, ...rest);\n}\nfunction _createError(authOrCode, ...rest) {\n    return createErrorInternal(authOrCode, ...rest);\n}\nfunction _errorWithCustomMessage(auth, code, message) {\n    const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });\n    const factory = new ErrorFactory('auth', 'Firebase', errorMap);\n    return factory.create(code, {\n        appName: auth.name\n    });\n}\nfunction _serverAppCurrentUserOperationNotSupportedError(auth) {\n    return _errorWithCustomMessage(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');\n}\nfunction _assertInstanceOf(auth, object, instance) {\n    const constructorInstance = instance;\n    if (!(object instanceof constructorInstance)) {\n        if (constructorInstance.name !== object.constructor.name) {\n            _fail(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        }\n        throw _errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` +\n            `Did you pass a reference from a different Auth SDK?`);\n    }\n}\nfunction createErrorInternal(authOrCode, ...rest) {\n    if (typeof authOrCode !== 'string') {\n        const code = rest[0];\n        const fullParams = [...rest.slice(1)];\n        if (fullParams[0]) {\n            fullParams[0].appName = authOrCode.name;\n        }\n        return authOrCode._errorFactory.create(code, ...fullParams);\n    }\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n}\nfunction _assert(assertion, authOrCode, ...rest) {\n    if (!assertion) {\n        throw createErrorInternal(authOrCode, ...rest);\n    }\n}\n/**\n * Unconditionally fails, throwing an internal error with the given message.\n *\n * @param failure type of failure encountered\n * @throws Error\n */\nfunction debugFail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const message = `INTERNAL ASSERTION FAILED: ` + failure;\n    _logError(message);\n    // NOTE: We don't use FirebaseError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * @param assertion\n * @param message\n */\nfunction debugAssert(assertion, message) {\n    if (!assertion) {\n        debugFail(message);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _getCurrentUrl() {\n    var _a;\n    return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href)) || '';\n}\nfunction _isHttpOrHttps() {\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\nfunction _getCurrentScheme() {\n    var _a;\n    return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol)) || null;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Determine whether the browser is working online\n */\nfunction _isOnline() {\n    if (typeof navigator !== 'undefined' &&\n        navigator &&\n        'onLine' in navigator &&\n        typeof navigator.onLine === 'boolean' &&\n        // Apply only for traditional web apps and Chrome extensions.\n        // This is especially true for Cordova apps which have unreliable\n        // navigator.onLine behavior unless cordova-plugin-network-information is\n        // installed which overwrites the native navigator.onLine value and\n        // defines navigator.connection.\n        (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)) {\n        return navigator.onLine;\n    }\n    // If we can't determine the state, assume it is online.\n    return true;\n}\nfunction _getUserLanguage() {\n    if (typeof navigator === 'undefined') {\n        return null;\n    }\n    const navigatorLanguage = navigator;\n    return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n        // Supported in most browsers, but returns the language of the browser\n        // UI, not the language set in browser settings.\n        navigatorLanguage.language ||\n        // Couldn't determine language.\n        null);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A structure to help pick between a range of long and short delay durations\n * depending on the current environment. In general, the long delay is used for\n * mobile environments whereas short delays are used for desktop environments.\n */\nclass Delay {\n    constructor(shortDelay, longDelay) {\n        this.shortDelay = shortDelay;\n        this.longDelay = longDelay;\n        // Internal error when improperly initialized.\n        debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n        this.isMobile = isMobileCordova() || isReactNative();\n    }\n    get() {\n        if (!_isOnline()) {\n            // Pick the shorter timeout.\n            return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n        }\n        // If running in a mobile environment, return the long delay, otherwise\n        // return the short delay.\n        // This could be improved in the future to dynamically change based on other\n        // variables instead of just reading the current environment.\n        return this.isMobile ? this.longDelay : this.shortDelay;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _emulatorUrl(config, path) {\n    debugAssert(config.emulator, 'Emulator should always be set here');\n    const { url } = config.emulator;\n    if (!path) {\n        return url;\n    }\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass FetchProvider {\n    static initialize(fetchImpl, headersImpl, responseImpl) {\n        this.fetchImpl = fetchImpl;\n        if (headersImpl) {\n            this.headersImpl = headersImpl;\n        }\n        if (responseImpl) {\n            this.responseImpl = responseImpl;\n        }\n    }\n    static fetch() {\n        if (this.fetchImpl) {\n            return this.fetchImpl;\n        }\n        if (typeof self !== 'undefined' && 'fetch' in self) {\n            return self.fetch;\n        }\n        if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n            return globalThis.fetch;\n        }\n        if (typeof fetch !== 'undefined') {\n            return fetch;\n        }\n        debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static headers() {\n        if (this.headersImpl) {\n            return this.headersImpl;\n        }\n        if (typeof self !== 'undefined' && 'Headers' in self) {\n            return self.Headers;\n        }\n        if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n            return globalThis.Headers;\n        }\n        if (typeof Headers !== 'undefined') {\n            return Headers;\n        }\n        debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static response() {\n        if (this.responseImpl) {\n            return this.responseImpl;\n        }\n        if (typeof self !== 'undefined' && 'Response' in self) {\n            return self.Response;\n        }\n        if (typeof globalThis !== 'undefined' && globalThis.Response) {\n            return globalThis.Response;\n        }\n        if (typeof Response !== 'undefined') {\n            return Response;\n        }\n        debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Map from errors returned by the server to errors to developer visible errors\n */\nconst SERVER_ERROR_MAP = {\n    // Custom token errors.\n    [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n    // Create Auth URI errors.\n    [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n    // Sign in with email and password errors (some apply to sign up too).\n    [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\n    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n    // invalid.\n    [\"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    // Sign up with email and password errors.\n    [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\n    [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\n    // Verify assertion for sign in with credential errors:\n    [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n    // Send Password reset email errors:\n    [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\n    [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n    // Operations that require ID token in request:\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\n    [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\n    [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n    // Other errors.\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,\n    // Phone Auth related errors.\n    [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\n    [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\n    [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\n    [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\n    // Other action code errors when additional settings passed.\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n    // This is OK as this error will be caught by client side validation.\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\n    [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\n    // getProjectConfig errors when clientId is passed.\n    [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\n    // User actions (sign-up or deletion) disabled errors.\n    [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\n    // Multi factor related errors.\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\n    [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\n    // Blocking functions related errors.\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n    // Recaptcha related errors.\n    [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\n    [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\n    [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\n    [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\n    [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\n    [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\n};\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst CookieAuthProxiedEndpoints = [\n    \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */,\n    \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */,\n    \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */,\n    \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */,\n    \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */,\n    \"/v1/token\" /* Endpoint.TOKEN */\n];\nconst DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\nfunction _addTidIfNecessary(auth, request) {\n    if (auth.tenantId && !request.tenantId) {\n        return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });\n    }\n    return request;\n}\nasync function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\n    return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n        let body = {};\n        let params = {};\n        if (request) {\n            if (method === \"GET\" /* HttpMethod.GET */) {\n                params = request;\n            }\n            else {\n                body = {\n                    body: JSON.stringify(request)\n                };\n            }\n        }\n        const query = querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);\n        const headers = await auth._getAdditionalHeaders();\n        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n        if (auth.languageCode) {\n            headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n        }\n        const fetchArgs = Object.assign({ method,\n            headers }, body);\n        /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\n           problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\n           'RequestInitializerDict' is not implemented.\"\n           https://github.com/cloudflare/next-on-pages/issues/487 */\n        if (!isCloudflareWorker()) {\n            fetchArgs.referrerPolicy = 'no-referrer';\n        }\n        if (auth.emulatorConfig && isCloudWorkstation(auth.emulatorConfig.host)) {\n            fetchArgs.credentials = 'include';\n        }\n        return FetchProvider.fetch()(await _getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);\n    });\n}\nasync function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n    auth._canInitEmulator = false;\n    const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);\n    try {\n        const networkTimeout = new NetworkTimeout(auth);\n        const response = await Promise.race([\n            fetchFn(),\n            networkTimeout.promise\n        ]);\n        // If we've reached this point, the fetch succeeded and the networkTimeout\n        // didn't throw; clear the network timeout delay so that Node won't hang\n        networkTimeout.clearNetworkTimeout();\n        const json = await response.json();\n        if ('needConfirmation' in json) {\n            throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n        }\n        if (response.ok && !('errorMessage' in json)) {\n            return json;\n        }\n        else {\n            const errorMessage = response.ok ? json.errorMessage : json.error.message;\n            const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n            if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\n                throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n            }\n            else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\n                throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n            }\n            else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\n                throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n            }\n            const authError = errorMap[serverErrorCode] ||\n                serverErrorCode\n                    .toLowerCase()\n                    .replace(/[_\\s]+/g, '-');\n            if (serverErrorMessage) {\n                throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n            }\n            else {\n                _fail(auth, authError);\n            }\n        }\n    }\n    catch (e) {\n        if (e instanceof FirebaseError) {\n            throw e;\n        }\n        // Changing this to a different error code will log user out when there is a network error\n        // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n        // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n        _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, { 'message': String(e) });\n    }\n}\nasync function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\n    const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);\n    if ('mfaPendingCredential' in serverResponse) {\n        _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n            _serverResponse: serverResponse\n        });\n    }\n    return serverResponse;\n}\nasync function _getFinalTarget(auth, host, path, query) {\n    const base = `${host}${path}?${query}`;\n    const authInternal = auth;\n    const finalTarget = authInternal.config.emulator\n        ? _emulatorUrl(auth.config, base)\n        : `${auth.config.apiScheme}://${base}`;\n    // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,\n    // saving the idToken and refreshToken into cookies, and then redacting the refreshToken\n    // from the response\n    if (CookieAuthProxiedEndpoints.includes(path)) {\n        // Persistence manager is async, we need to await it. We can't just wait for auth initialized\n        // here since auth initialization calls this function.\n        await authInternal._persistenceManagerAvailable;\n        if (authInternal._getPersistenceType() === \"COOKIE\" /* PersistenceType.COOKIE */) {\n            const cookiePersistence = authInternal._getPersistence();\n            return cookiePersistence._getFinalTarget(finalTarget).toString();\n        }\n    }\n    return finalTarget;\n}\nfunction _parseEnforcementState(enforcementStateStr) {\n    switch (enforcementStateStr) {\n        case 'ENFORCE':\n            return \"ENFORCE\" /* EnforcementState.ENFORCE */;\n        case 'AUDIT':\n            return \"AUDIT\" /* EnforcementState.AUDIT */;\n        case 'OFF':\n            return \"OFF\" /* EnforcementState.OFF */;\n        default:\n            return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\n    }\n}\nclass NetworkTimeout {\n    clearNetworkTimeout() {\n        clearTimeout(this.timer);\n    }\n    constructor(auth) {\n        this.auth = auth;\n        // Node timers and browser timers are fundamentally incompatible, but we\n        // don't care about the value here\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.timer = null;\n        this.promise = new Promise((_, reject) => {\n            this.timer = setTimeout(() => {\n                return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n            }, DEFAULT_API_TIMEOUT_MS.get());\n        });\n    }\n}\nfunction _makeTaggedError(auth, code, response) {\n    const errorParams = {\n        appName: auth.name\n    };\n    if (response.email) {\n        errorParams.email = response.email;\n    }\n    if (response.phoneNumber) {\n        errorParams.phoneNumber = response.phoneNumber;\n    }\n    const error = _createError(auth, code, errorParams);\n    // We know customData is defined on error because errorParams is defined\n    error.customData._tokenResponse = response;\n    return error;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isV2(grecaptcha) {\n    return (grecaptcha !== undefined &&\n        grecaptcha.getResponse !== undefined);\n}\nfunction isEnterprise(grecaptcha) {\n    return (grecaptcha !== undefined &&\n        grecaptcha.enterprise !== undefined);\n}\nclass RecaptchaConfig {\n    constructor(response) {\n        /**\n         * The reCAPTCHA site key.\n         */\n        this.siteKey = '';\n        /**\n         * The list of providers and their enablement status for reCAPTCHA Enterprise.\n         */\n        this.recaptchaEnforcementState = [];\n        if (response.recaptchaKey === undefined) {\n            throw new Error('recaptchaKey undefined');\n        }\n        // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n        this.siteKey = response.recaptchaKey.split('/')[3];\n        this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n    }\n    /**\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n     *\n     * @param providerStr - The provider whose enforcement state is to be returned.\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n     */\n    getProviderEnforcementState(providerStr) {\n        if (!this.recaptchaEnforcementState ||\n            this.recaptchaEnforcementState.length === 0) {\n            return null;\n        }\n        for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n            if (recaptchaEnforcementState.provider &&\n                recaptchaEnforcementState.provider === providerStr) {\n                return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n     *\n     * @param providerStr - The provider whose enablement state is to be returned.\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n     */\n    isProviderEnabled(providerStr) {\n        return (this.getProviderEnforcementState(providerStr) ===\n            \"ENFORCE\" /* EnforcementState.ENFORCE */ ||\n            this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */);\n    }\n    /**\n     * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise\n     * returns false.\n     *\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.\n     */\n    isAnyProviderEnabled() {\n        return (this.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) ||\n            this.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */));\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function getRecaptchaParams(auth) {\n    return ((await _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '');\n}\nasync function getRecaptchaConfig(auth, request) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function deleteAccount(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\n}\nasync function deleteLinkedAccounts(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n}\nasync function getAccountInfo(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction utcTimestampToDateString(utcTimestamp) {\n    if (!utcTimestamp) {\n        return undefined;\n    }\n    try {\n        // Convert to date object.\n        const date = new Date(Number(utcTimestamp));\n        // Test date is valid.\n        if (!isNaN(date.getTime())) {\n            // Convert to UTC date string.\n            return date.toUTCString();\n        }\n    }\n    catch (e) {\n        // Do nothing. undefined will be returned.\n    }\n    return undefined;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nfunction getIdToken(user, forceRefresh = false) {\n    return getModularInstance(user).getIdToken(forceRefresh);\n}\n/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nasync function getIdTokenResult(user, forceRefresh = false) {\n    const userInternal = getModularInstance(user);\n    const token = await userInternal.getIdToken(forceRefresh);\n    const claims = _parseToken(token);\n    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\n    const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];\n    return {\n        claims,\n        token,\n        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n        signInProvider: signInProvider || null,\n        signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null\n    };\n}\nfunction secondsStringToMilliseconds(seconds) {\n    return Number(seconds) * 1000;\n}\nfunction _parseToken(token) {\n    const [algorithm, payload, signature] = token.split('.');\n    if (algorithm === undefined ||\n        payload === undefined ||\n        signature === undefined) {\n        _logError('JWT malformed, contained fewer than 3 sections');\n        return null;\n    }\n    try {\n        const decoded = base64Decode(payload);\n        if (!decoded) {\n            _logError('Failed to decode base64 JWT payload');\n            return null;\n        }\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        _logError('Caught error parsing JWT payload as JSON', e === null || e === void 0 ? void 0 : e.toString());\n        return null;\n    }\n}\n/**\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n */\nfunction _tokenExpiresIn(token) {\n    const parsedToken = _parseToken(token);\n    _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\n    if (bypassAuthState) {\n        return promise;\n    }\n    try {\n        return await promise;\n    }\n    catch (e) {\n        if (e instanceof FirebaseError && isUserInvalidated(e)) {\n            if (user.auth.currentUser === user) {\n                await user.auth.signOut();\n            }\n        }\n        throw e;\n    }\n}\nfunction isUserInvalidated({ code }) {\n    return (code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` ||\n        code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ProactiveRefresh {\n    constructor(user) {\n        this.user = user;\n        this.isRunning = false;\n        // Node timers and browser timers return fundamentally different types.\n        // We don't actually care what the value is but TS won't accept unknown and\n        // we can't cast properly in both environments.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.timerId = null;\n        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n    }\n    _start() {\n        if (this.isRunning) {\n            return;\n        }\n        this.isRunning = true;\n        this.schedule();\n    }\n    _stop() {\n        if (!this.isRunning) {\n            return;\n        }\n        this.isRunning = false;\n        if (this.timerId !== null) {\n            clearTimeout(this.timerId);\n        }\n    }\n    getInterval(wasError) {\n        var _a;\n        if (wasError) {\n            const interval = this.errorBackoff;\n            this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n            return interval;\n        }\n        else {\n            // Reset the error backoff\n            this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n            const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;\n            const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n            return Math.max(0, interval);\n        }\n    }\n    schedule(wasError = false) {\n        if (!this.isRunning) {\n            // Just in case...\n            return;\n        }\n        const interval = this.getInterval(wasError);\n        this.timerId = setTimeout(async () => {\n            await this.iteration();\n        }, interval);\n    }\n    async iteration() {\n        try {\n            await this.user.getIdToken(true);\n        }\n        catch (e) {\n            // Only retry on network errors\n            if ((e === null || e === void 0 ? void 0 : e.code) ===\n                `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n                this.schedule(/* wasError */ true);\n            }\n            return;\n        }\n        this.schedule();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass UserMetadata {\n    constructor(createdAt, lastLoginAt) {\n        this.createdAt = createdAt;\n        this.lastLoginAt = lastLoginAt;\n        this._initializeTime();\n    }\n    _initializeTime() {\n        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n        this.creationTime = utcTimestampToDateString(this.createdAt);\n    }\n    _copy(metadata) {\n        this.createdAt = metadata.createdAt;\n        this.lastLoginAt = metadata.lastLoginAt;\n        this._initializeTime();\n    }\n    toJSON() {\n        return {\n            createdAt: this.createdAt,\n            lastLoginAt: this.lastLoginAt\n        };\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function _reloadWithoutSaving(user) {\n    var _a;\n    const auth = user.auth;\n    const idToken = await user.getIdToken();\n    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));\n    _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const coreAccount = response.users[0];\n    user._notifyReloadListener(coreAccount);\n    const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length)\n        ? extractProviderData(coreAccount.providerUserInfo)\n        : [];\n    const providerData = mergeProviderData(user.providerData, newProviderData);\n    // Preserves the non-nonymous status of the stored user, even if no more\n    // credentials (federated or email/password) are linked to the user. If\n    // the user was previously anonymous, then use provider data to update.\n    // On the other hand, if it was not anonymous before, it should never be\n    // considered anonymous now.\n    const oldIsAnonymous = user.isAnonymous;\n    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\n    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n    const updates = {\n        uid: coreAccount.localId,\n        displayName: coreAccount.displayName || null,\n        photoURL: coreAccount.photoUrl || null,\n        email: coreAccount.email || null,\n        emailVerified: coreAccount.emailVerified || false,\n        phoneNumber: coreAccount.phoneNumber || null,\n        tenantId: coreAccount.tenantId || null,\n        providerData,\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n        isAnonymous\n    };\n    Object.assign(user, updates);\n}\n/**\n * Reloads user account data, if signed in.\n *\n * @param user - The user.\n *\n * @public\n */\nasync function reload(user) {\n    const userInternal = getModularInstance(user);\n    await _reloadWithoutSaving(userInternal);\n    // Even though the current user hasn't changed, update\n    // current user will trigger a persistence update w/ the\n    // new info.\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    userInternal.auth._notifyListenersIfCurrent(userInternal);\n}\nfunction mergeProviderData(original, newData) {\n    const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\n    return [...deduped, ...newData];\n}\nfunction extractProviderData(providers) {\n    return providers.map((_a) => {\n        var { providerId } = _a, provider = __rest(_a, [\"providerId\"]);\n        return {\n            providerId,\n            uid: provider.rawId || '',\n            displayName: provider.displayName || null,\n            email: provider.email || null,\n            phoneNumber: provider.phoneNumber || null,\n            photoURL: provider.photoUrl || null\n        };\n    });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function requestStsToken(auth, refreshToken) {\n    const response = await _performFetchWithErrorHandling(auth, {}, async () => {\n        const body = querystring({\n            'grant_type': 'refresh_token',\n            'refresh_token': refreshToken\n        }).slice(1);\n        const { tokenApiHost, apiKey } = auth.config;\n        const url = await _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\n        const headers = await auth._getAdditionalHeaders();\n        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n        return FetchProvider.fetch()(url, {\n            method: \"POST\" /* HttpMethod.POST */,\n            headers,\n            body\n        });\n    });\n    // The response comes back in snake_case. Convert to camel:\n    return {\n        accessToken: response.access_token,\n        expiresIn: response.expires_in,\n        refreshToken: response.refresh_token\n    };\n}\nasync function revokeToken(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nclass StsTokenManager {\n    constructor() {\n        this.refreshToken = null;\n        this.accessToken = null;\n        this.expirationTime = null;\n    }\n    get isExpired() {\n        return (!this.expirationTime ||\n            Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */);\n    }\n    updateFromServerResponse(response) {\n        _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'\n            ? Number(response.expiresIn)\n            : _tokenExpiresIn(response.idToken);\n        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n    }\n    updateFromIdToken(idToken) {\n        _assert(idToken.length !== 0, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        const expiresIn = _tokenExpiresIn(idToken);\n        this.updateTokensAndExpiration(idToken, null, expiresIn);\n    }\n    async getToken(auth, forceRefresh = false) {\n        if (!forceRefresh && this.accessToken && !this.isExpired) {\n            return this.accessToken;\n        }\n        _assert(this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n        if (this.refreshToken) {\n            await this.refresh(auth, this.refreshToken);\n            return this.accessToken;\n        }\n        return null;\n    }\n    clearRefreshToken() {\n        this.refreshToken = null;\n    }\n    async refresh(auth, oldToken) {\n        const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);\n        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n    }\n    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n        this.refreshToken = refreshToken || null;\n        this.accessToken = accessToken || null;\n        this.expirationTime = Date.now() + expiresInSec * 1000;\n    }\n    static fromJSON(appName, object) {\n        const { refreshToken, accessToken, expirationTime } = object;\n        const manager = new StsTokenManager();\n        if (refreshToken) {\n            _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n                appName\n            });\n            manager.refreshToken = refreshToken;\n        }\n        if (accessToken) {\n            _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n                appName\n            });\n            manager.accessToken = accessToken;\n        }\n        if (expirationTime) {\n            _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n                appName\n            });\n            manager.expirationTime = expirationTime;\n        }\n        return manager;\n    }\n    toJSON() {\n        return {\n            refreshToken: this.refreshToken,\n            accessToken: this.accessToken,\n            expirationTime: this.expirationTime\n        };\n    }\n    _assign(stsTokenManager) {\n        this.accessToken = stsTokenManager.accessToken;\n        this.refreshToken = stsTokenManager.refreshToken;\n        this.expirationTime = stsTokenManager.expirationTime;\n    }\n    _clone() {\n        return Object.assign(new StsTokenManager(), this.toJSON());\n    }\n    _performRefresh() {\n        return debugFail('not implemented');\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction assertStringOrUndefined(assertion, appName) {\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, { appName });\n}\nclass UserImpl {\n    constructor(_a) {\n        var { uid, auth, stsTokenManager } = _a, opt = __rest(_a, [\"uid\", \"auth\", \"stsTokenManager\"]);\n        // For the user object, provider is always Firebase.\n        this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n        this.proactiveRefresh = new ProactiveRefresh(this);\n        this.reloadUserInfo = null;\n        this.reloadListener = null;\n        this.uid = uid;\n        this.auth = auth;\n        this.stsTokenManager = stsTokenManager;\n        this.accessToken = stsTokenManager.accessToken;\n        this.displayName = opt.displayName || null;\n        this.email = opt.email || null;\n        this.emailVerified = opt.emailVerified || false;\n        this.phoneNumber = opt.phoneNumber || null;\n        this.photoURL = opt.photoURL || null;\n        this.isAnonymous = opt.isAnonymous || false;\n        this.tenantId = opt.tenantId || null;\n        this.providerData = opt.providerData ? [...opt.providerData] : [];\n        this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n    }\n    async getIdToken(forceRefresh) {\n        const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n        _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        if (this.accessToken !== accessToken) {\n            this.accessToken = accessToken;\n            await this.auth._persistUserIfCurrent(this);\n            this.auth._notifyListenersIfCurrent(this);\n        }\n        return accessToken;\n    }\n    getIdTokenResult(forceRefresh) {\n        return getIdTokenResult(this, forceRefresh);\n    }\n    reload() {\n        return reload(this);\n    }\n    _assign(user) {\n        if (this === user) {\n            return;\n        }\n        _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        this.displayName = user.displayName;\n        this.photoURL = user.photoURL;\n        this.email = user.email;\n        this.emailVerified = user.emailVerified;\n        this.phoneNumber = user.phoneNumber;\n        this.isAnonymous = user.isAnonymous;\n        this.tenantId = user.tenantId;\n        this.providerData = user.providerData.map(userInfo => (Object.assign({}, userInfo)));\n        this.metadata._copy(user.metadata);\n        this.stsTokenManager._assign(user.stsTokenManager);\n    }\n    _clone(auth) {\n        const newUser = new UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));\n        newUser.metadata._copy(this.metadata);\n        return newUser;\n    }\n    _onReload(callback) {\n        // There should only ever be one listener, and that is a single instance of MultiFactorUser\n        _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        this.reloadListener = callback;\n        if (this.reloadUserInfo) {\n            this._notifyReloadListener(this.reloadUserInfo);\n            this.reloadUserInfo = null;\n        }\n    }\n    _notifyReloadListener(userInfo) {\n        if (this.reloadListener) {\n            this.reloadListener(userInfo);\n        }\n        else {\n            // If no listener is subscribed yet, save the result so it's available when they do subscribe\n            this.reloadUserInfo = userInfo;\n        }\n    }\n    _startProactiveRefresh() {\n        this.proactiveRefresh._start();\n    }\n    _stopProactiveRefresh() {\n        this.proactiveRefresh._stop();\n    }\n    async _updateTokensIfNecessary(response, reload = false) {\n        let tokensRefreshed = false;\n        if (response.idToken &&\n            response.idToken !== this.stsTokenManager.accessToken) {\n            this.stsTokenManager.updateFromServerResponse(response);\n            tokensRefreshed = true;\n        }\n        if (reload) {\n            await _reloadWithoutSaving(this);\n        }\n        await this.auth._persistUserIfCurrent(this);\n        if (tokensRefreshed) {\n            this.auth._notifyListenersIfCurrent(this);\n        }\n    }\n    async delete() {\n        if (_isFirebaseServerApp(this.auth.app)) {\n            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));\n        }\n        const idToken = await this.getIdToken();\n        await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\n        this.stsTokenManager.clearRefreshToken();\n        // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n        //       cancels pending actions...\n        return this.auth.signOut();\n    }\n    toJSON() {\n        return Object.assign(Object.assign({ uid: this.uid, email: this.email || undefined, emailVerified: this.emailVerified, displayName: this.displayName || undefined, isAnonymous: this.isAnonymous, photoURL: this.photoURL || undefined, phoneNumber: this.phoneNumber || undefined, tenantId: this.tenantId || undefined, providerData: this.providerData.map(userInfo => (Object.assign({}, userInfo))), stsTokenManager: this.stsTokenManager.toJSON(), \n            // Redirect event ID must be maintained in case there is a pending\n            // redirect event.\n            _redirectEventId: this._redirectEventId }, this.metadata.toJSON()), { \n            // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n            apiKey: this.auth.config.apiKey, appName: this.auth.name });\n    }\n    get refreshToken() {\n        return this.stsTokenManager.refreshToken || '';\n    }\n    static _fromJSON(auth, object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;\n        const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;\n        const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;\n        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;\n        const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;\n        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;\n        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;\n        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;\n        const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;\n        _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n        _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        assertStringOrUndefined(displayName, auth.name);\n        assertStringOrUndefined(email, auth.name);\n        _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        assertStringOrUndefined(phoneNumber, auth.name);\n        assertStringOrUndefined(photoURL, auth.name);\n        assertStringOrUndefined(tenantId, auth.name);\n        assertStringOrUndefined(_redirectEventId, auth.name);\n        assertStringOrUndefined(createdAt, auth.name);\n        assertStringOrUndefined(lastLoginAt, auth.name);\n        const user = new UserImpl({\n            uid,\n            auth,\n            email,\n            emailVerified,\n            displayName,\n            isAnonymous,\n            photoURL,\n            phoneNumber,\n            tenantId,\n            stsTokenManager,\n            createdAt,\n            lastLoginAt\n        });\n        if (providerData && Array.isArray(providerData)) {\n            user.providerData = providerData.map(userInfo => (Object.assign({}, userInfo)));\n        }\n        if (_redirectEventId) {\n            user._redirectEventId = _redirectEventId;\n        }\n        return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\n        const stsTokenManager = new StsTokenManager();\n        stsTokenManager.updateFromServerResponse(idTokenResponse);\n        // Initialize the Firebase Auth user.\n        const user = new UserImpl({\n            uid: idTokenResponse.localId,\n            auth,\n            stsTokenManager,\n            isAnonymous\n        });\n        // Updates the user info and data and resolves with a user instance.\n        await _reloadWithoutSaving(user);\n        return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromGetAccountInfoResponse(auth, response, idToken) {\n        const coreAccount = response.users[0];\n        _assert(coreAccount.localId !== undefined, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        const providerData = coreAccount.providerUserInfo !== undefined\n            ? extractProviderData(coreAccount.providerUserInfo)\n            : [];\n        const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\n        const stsTokenManager = new StsTokenManager();\n        stsTokenManager.updateFromIdToken(idToken);\n        // Initialize the Firebase Auth user.\n        const user = new UserImpl({\n            uid: coreAccount.localId,\n            auth,\n            stsTokenManager,\n            isAnonymous\n        });\n        // update the user with data from the GetAccountInfo response.\n        const updates = {\n            uid: coreAccount.localId,\n            displayName: coreAccount.displayName || null,\n            photoURL: coreAccount.photoUrl || null,\n            email: coreAccount.email || null,\n            emailVerified: coreAccount.emailVerified || false,\n            phoneNumber: coreAccount.phoneNumber || null,\n            tenantId: coreAccount.tenantId || null,\n            providerData,\n            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n            isAnonymous: !(coreAccount.email && coreAccount.passwordHash) &&\n                !(providerData === null || providerData === void 0 ? void 0 : providerData.length)\n        };\n        Object.assign(user, updates);\n        return user;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst instanceCache = new Map();\nfunction _getInstance(cls) {\n    debugAssert(cls instanceof Function, 'Expected a class definition');\n    let instance = instanceCache.get(cls);\n    if (instance) {\n        debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n        return instance;\n    }\n    instance = new cls();\n    instanceCache.set(cls, instance);\n    return instance;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass InMemoryPersistence {\n    constructor() {\n        this.type = \"NONE\" /* PersistenceType.NONE */;\n        this.storage = {};\n    }\n    async _isAvailable() {\n        return true;\n    }\n    async _set(key, value) {\n        this.storage[key] = value;\n    }\n    async _get(key) {\n        const value = this.storage[key];\n        return value === undefined ? null : value;\n    }\n    async _remove(key) {\n        delete this.storage[key];\n    }\n    _addListener(_key, _listener) {\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n        return;\n    }\n    _removeListener(_key, _listener) {\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n        return;\n    }\n}\nInMemoryPersistence.type = 'NONE';\n/**\n * An implementation of {@link Persistence} of type 'NONE'.\n *\n * @public\n */\nconst inMemoryPersistence = InMemoryPersistence;\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _persistenceKeyName(key, apiKey, appName) {\n    return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\n}\nclass PersistenceUserManager {\n    constructor(persistence, auth, userKey) {\n        this.persistence = persistence;\n        this.auth = auth;\n        this.userKey = userKey;\n        const { config, name } = this.auth;\n        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n        this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n        this.boundEventHandler = auth._onStorageEvent.bind(auth);\n        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n    }\n    setCurrentUser(user) {\n        return this.persistence._set(this.fullUserKey, user.toJSON());\n    }\n    async getCurrentUser() {\n        const blob = await this.persistence._get(this.fullUserKey);\n        if (!blob) {\n            return null;\n        }\n        if (typeof blob === 'string') {\n            const response = await getAccountInfo(this.auth, { idToken: blob }).catch(() => undefined);\n            if (!response) {\n                return null;\n            }\n            return UserImpl._fromGetAccountInfoResponse(this.auth, response, blob);\n        }\n        return UserImpl._fromJSON(this.auth, blob);\n    }\n    removeCurrentUser() {\n        return this.persistence._remove(this.fullUserKey);\n    }\n    savePersistenceForRedirect() {\n        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n    }\n    async setPersistence(newPersistence) {\n        if (this.persistence === newPersistence) {\n            return;\n        }\n        const currentUser = await this.getCurrentUser();\n        await this.removeCurrentUser();\n        this.persistence = newPersistence;\n        if (currentUser) {\n            return this.setCurrentUser(currentUser);\n        }\n    }\n    delete() {\n        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n    }\n    static async create(auth, persistenceHierarchy, userKey = \"authUser\" /* KeyName.AUTH_USER */) {\n        if (!persistenceHierarchy.length) {\n            return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n        }\n        // Eliminate any persistences that are not available\n        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {\n            if (await persistence._isAvailable()) {\n                return persistence;\n            }\n            return undefined;\n        }))).filter(persistence => persistence);\n        // Fall back to the first persistence listed, or in memory if none available\n        let selectedPersistence = availablePersistences[0] ||\n            _getInstance(inMemoryPersistence);\n        const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n        // Pull out the existing user, setting the chosen persistence to that\n        // persistence if the user exists.\n        let userToMigrate = null;\n        // Note, here we check for a user in _all_ persistences, not just the\n        // ones deemed available. If we can migrate a user out of a broken\n        // persistence, we will (but only if that persistence supports migration).\n        for (const persistence of persistenceHierarchy) {\n            try {\n                const blob = await persistence._get(key);\n                if (blob) {\n                    let user;\n                    if (typeof blob === 'string') {\n                        const response = await getAccountInfo(auth, {\n                            idToken: blob\n                        }).catch(() => undefined);\n                        if (!response) {\n                            break;\n                        }\n                        user = await UserImpl._fromGetAccountInfoResponse(auth, response, blob);\n                    }\n                    else {\n                        user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n                    }\n                    if (persistence !== selectedPersistence) {\n                        userToMigrate = user;\n                    }\n                    selectedPersistence = persistence;\n                    break;\n                }\n            }\n            catch (_a) { }\n        }\n        // If we find the user in a persistence that does support migration, use\n        // that migration path (of only persistences that support migration)\n        const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\n        // If the persistence does _not_ allow migration, just finish off here\n        if (!selectedPersistence._shouldAllowMigration ||\n            !migrationHierarchy.length) {\n            return new PersistenceUserManager(selectedPersistence, auth, userKey);\n        }\n        selectedPersistence = migrationHierarchy[0];\n        if (userToMigrate) {\n            // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n            // we'll just let it bubble to surface the error.\n            await selectedPersistence._set(key, userToMigrate.toJSON());\n        }\n        // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n        // such as users getting stuck with a previous account after signing out and refreshing the tab.\n        await Promise.all(persistenceHierarchy.map(async (persistence) => {\n            if (persistence !== selectedPersistence) {\n                try {\n                    await persistence._remove(key);\n                }\n                catch (_a) { }\n            }\n        }));\n        return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Determine the browser for the purposes of reporting usage to the API\n */\nfunction _getBrowserName(userAgent) {\n    const ua = userAgent.toLowerCase();\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n        return \"Opera\" /* BrowserName.OPERA */;\n    }\n    else if (_isIEMobile(ua)) {\n        // Windows phone IEMobile browser.\n        return \"IEMobile\" /* BrowserName.IEMOBILE */;\n    }\n    else if (ua.includes('msie') || ua.includes('trident/')) {\n        return \"IE\" /* BrowserName.IE */;\n    }\n    else if (ua.includes('edge/')) {\n        return \"Edge\" /* BrowserName.EDGE */;\n    }\n    else if (_isFirefox(ua)) {\n        return \"Firefox\" /* BrowserName.FIREFOX */;\n    }\n    else if (ua.includes('silk/')) {\n        return \"Silk\" /* BrowserName.SILK */;\n    }\n    else if (_isBlackBerry(ua)) {\n        // Blackberry browser.\n        return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n    }\n    else if (_isWebOS(ua)) {\n        // WebOS default browser.\n        return \"Webos\" /* BrowserName.WEBOS */;\n    }\n    else if (_isSafari(ua)) {\n        return \"Safari\" /* BrowserName.SAFARI */;\n    }\n    else if ((ua.includes('chrome/') || _isChromeIOS(ua)) &&\n        !ua.includes('edge/')) {\n        return \"Chrome\" /* BrowserName.CHROME */;\n    }\n    else if (_isAndroid(ua)) {\n        // Android stock browser.\n        return \"Android\" /* BrowserName.ANDROID */;\n    }\n    else {\n        // Most modern browsers have name/version at end of user agent string.\n        const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n        const matches = userAgent.match(re);\n        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {\n            return matches[1];\n        }\n    }\n    return \"Other\" /* BrowserName.OTHER */;\n}\nfunction _isFirefox(ua = getUA()) {\n    return /firefox\\//i.test(ua);\n}\nfunction _isSafari(userAgent = getUA()) {\n    const ua = userAgent.toLowerCase();\n    return (ua.includes('safari/') &&\n        !ua.includes('chrome/') &&\n        !ua.includes('crios/') &&\n        !ua.includes('android'));\n}\nfunction _isChromeIOS(ua = getUA()) {\n    return /crios\\//i.test(ua);\n}\nfunction _isIEMobile(ua = getUA()) {\n    return /iemobile/i.test(ua);\n}\nfunction _isAndroid(ua = getUA()) {\n    return /android/i.test(ua);\n}\nfunction _isBlackBerry(ua = getUA()) {\n    return /blackberry/i.test(ua);\n}\nfunction _isWebOS(ua = getUA()) {\n    return /webos/i.test(ua);\n}\nfunction _isIOS(ua = getUA()) {\n    return (/iphone|ipad|ipod/i.test(ua) ||\n        (/macintosh/i.test(ua) && /mobile/i.test(ua)));\n}\nfunction _isIOS7Or8(ua = getUA()) {\n    return (/(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) ||\n        /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua));\n}\nfunction _isIOSStandalone(ua = getUA()) {\n    var _a;\n    return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);\n}\nfunction _isIE10() {\n    return isIE() && document.documentMode === 10;\n}\nfunction _isMobileBrowser(ua = getUA()) {\n    // TODO: implement getBrowserName equivalent for OS.\n    return (_isIOS(ua) ||\n        _isAndroid(ua) ||\n        _isWebOS(ua) ||\n        _isBlackBerry(ua) ||\n        /windows phone/i.test(ua) ||\n        _isIEMobile(ua));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * Determine the SDK version string\n */\nfunction _getClientVersion(clientPlatform, frameworks = []) {\n    let reportedPlatform;\n    switch (clientPlatform) {\n        case \"Browser\" /* ClientPlatform.BROWSER */:\n            // In a browser environment, report the browser name.\n            reportedPlatform = _getBrowserName(getUA());\n            break;\n        case \"Worker\" /* ClientPlatform.WORKER */:\n            // Technically a worker runs from a browser but we need to differentiate a\n            // worker from a browser.\n            // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n            reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\n            break;\n        default:\n            reportedPlatform = clientPlatform;\n    }\n    const reportedFrameworks = frameworks.length\n        ? frameworks.join(',')\n        : 'FirebaseCore-web'; /* default value if no other framework is used */\n    return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${SDK_VERSION}/${reportedFrameworks}`;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AuthMiddlewareQueue {\n    constructor(auth) {\n        this.auth = auth;\n        this.queue = [];\n    }\n    pushCallback(callback, onAbort) {\n        // The callback could be sync or async. Wrap it into a\n        // function that is always async.\n        const wrappedCallback = (user) => new Promise((resolve, reject) => {\n            try {\n                const result = callback(user);\n                // Either resolve with existing promise or wrap a non-promise\n                // return value into a promise.\n                resolve(result);\n            }\n            catch (e) {\n                // Sync callback throws.\n                reject(e);\n            }\n        });\n        // Attach the onAbort if present\n        wrappedCallback.onAbort = onAbort;\n        this.queue.push(wrappedCallback);\n        const index = this.queue.length - 1;\n        return () => {\n            // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n            // indexing of other elements.\n            this.queue[index] = () => Promise.resolve();\n        };\n    }\n    async runMiddleware(nextUser) {\n        if (this.auth.currentUser === nextUser) {\n            return;\n        }\n        // While running the middleware, build a temporary stack of onAbort\n        // callbacks to call if one middleware callback rejects.\n        const onAbortStack = [];\n        try {\n            for (const beforeStateCallback of this.queue) {\n                await beforeStateCallback(nextUser);\n                // Only push the onAbort if the callback succeeds\n                if (beforeStateCallback.onAbort) {\n                    onAbortStack.push(beforeStateCallback.onAbort);\n                }\n            }\n        }\n        catch (e) {\n            // Run all onAbort, with separate try/catch to ignore any errors and\n            // continue\n            onAbortStack.reverse();\n            for (const onAbort of onAbortStack) {\n                try {\n                    onAbort();\n                }\n                catch (_) {\n                    /* swallow error */\n                }\n            }\n            throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n                originalMessage: e === null || e === void 0 ? void 0 : e.message\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n *\n * @param auth Auth object.\n * @param request Password policy request.\n * @returns Password policy response.\n */\nasync function _getPasswordPolicy(auth, request = {}) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Minimum min password length enforced by the backend, even if no minimum length is set.\nconst MINIMUM_MIN_PASSWORD_LENGTH = 6;\n/**\n * Stores password policy requirements and provides password validation against the policy.\n *\n * @internal\n */\nclass PasswordPolicyImpl {\n    constructor(response) {\n        var _a, _b, _c, _d;\n        // Only include custom strength options defined in the response.\n        const responseOptions = response.customStrengthOptions;\n        this.customStrengthOptions = {};\n        // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n        this.customStrengthOptions.minPasswordLength =\n            (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : MINIMUM_MIN_PASSWORD_LENGTH;\n        if (responseOptions.maxPasswordLength) {\n            this.customStrengthOptions.maxPasswordLength =\n                responseOptions.maxPasswordLength;\n        }\n        if (responseOptions.containsLowercaseCharacter !== undefined) {\n            this.customStrengthOptions.containsLowercaseLetter =\n                responseOptions.containsLowercaseCharacter;\n        }\n        if (responseOptions.containsUppercaseCharacter !== undefined) {\n            this.customStrengthOptions.containsUppercaseLetter =\n                responseOptions.containsUppercaseCharacter;\n        }\n        if (responseOptions.containsNumericCharacter !== undefined) {\n            this.customStrengthOptions.containsNumericCharacter =\n                responseOptions.containsNumericCharacter;\n        }\n        if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n            this.customStrengthOptions.containsNonAlphanumericCharacter =\n                responseOptions.containsNonAlphanumericCharacter;\n        }\n        this.enforcementState = response.enforcementState;\n        if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n            this.enforcementState = 'OFF';\n        }\n        // Use an empty string if no non-alphanumeric characters are specified in the response.\n        this.allowedNonAlphanumericCharacters =\n            (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join('')) !== null && _c !== void 0 ? _c : '';\n        this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;\n        this.schemaVersion = response.schemaVersion;\n    }\n    validatePassword(password) {\n        var _a, _b, _c, _d, _e, _f;\n        const status = {\n            isValid: true,\n            passwordPolicy: this\n        };\n        // Check the password length and character options.\n        this.validatePasswordLengthOptions(password, status);\n        this.validatePasswordCharacterOptions(password, status);\n        // Combine the status into single isValid property.\n        status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);\n        status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);\n        status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== void 0 ? _c : true);\n        status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);\n        status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== void 0 ? _e : true);\n        status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);\n        return status;\n    }\n    /**\n     * Validates that the password meets the length options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordLengthOptions(password, status) {\n        const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n        const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n        if (minPasswordLength) {\n            status.meetsMinPasswordLength = password.length >= minPasswordLength;\n        }\n        if (maxPasswordLength) {\n            status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n        }\n    }\n    /**\n     * Validates that the password meets the character options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordCharacterOptions(password, status) {\n        // Assign statuses for requirements even if the password is an empty string.\n        this.updatePasswordCharacterOptionsStatuses(status, \n        /* containsLowercaseCharacter= */ false, \n        /* containsUppercaseCharacter= */ false, \n        /* containsNumericCharacter= */ false, \n        /* containsNonAlphanumericCharacter= */ false);\n        let passwordChar;\n        for (let i = 0; i < password.length; i++) {\n            passwordChar = password.charAt(i);\n            this.updatePasswordCharacterOptionsStatuses(status, \n            /* containsLowercaseCharacter= */ passwordChar >= 'a' &&\n                passwordChar <= 'z', \n            /* containsUppercaseCharacter= */ passwordChar >= 'A' &&\n                passwordChar <= 'Z', \n            /* containsNumericCharacter= */ passwordChar >= '0' &&\n                passwordChar <= '9', \n            /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(passwordChar));\n        }\n    }\n    /**\n     * Updates the running validation status with the statuses for the character options.\n     * Expected to be called each time a character is processed to update each option status\n     * based on the current character.\n     *\n     * @param status Validation status.\n     * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n     * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n     * @param containsNumericCharacter Whether the character is a numeric character.\n     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n     */\n    updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n        if (this.customStrengthOptions.containsLowercaseLetter) {\n            status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n        }\n        if (this.customStrengthOptions.containsUppercaseLetter) {\n            status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n        }\n        if (this.customStrengthOptions.containsNumericCharacter) {\n            status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n        }\n        if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n            status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AuthImpl {\n    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n        this.app = app;\n        this.heartbeatServiceProvider = heartbeatServiceProvider;\n        this.appCheckServiceProvider = appCheckServiceProvider;\n        this.config = config;\n        this.currentUser = null;\n        this.emulatorConfig = null;\n        this.operations = Promise.resolve();\n        this.authStateSubscription = new Subscription(this);\n        this.idTokenSubscription = new Subscription(this);\n        this.beforeStateQueue = new AuthMiddlewareQueue(this);\n        this.redirectUser = null;\n        this.isProactiveRefreshEnabled = false;\n        this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n        // Any network calls will set this to true and prevent subsequent emulator\n        // initialization\n        this._canInitEmulator = true;\n        this._isInitialized = false;\n        this._deleted = false;\n        this._initializationPromise = null;\n        this._popupRedirectResolver = null;\n        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n        this._agentRecaptchaConfig = null;\n        this._tenantRecaptchaConfigs = {};\n        this._projectPasswordPolicy = null;\n        this._tenantPasswordPolicies = {};\n        this._resolvePersistenceManagerAvailable = undefined;\n        // Tracks the last notified UID for state change listeners to prevent\n        // repeated calls to the callbacks. Undefined means it's never been\n        // called, whereas null means it's been called with a signed out user\n        this.lastNotifiedUid = undefined;\n        this.languageCode = null;\n        this.tenantId = null;\n        this.settings = { appVerificationDisabledForTesting: false };\n        this.frameworks = [];\n        this.name = app.name;\n        this.clientVersion = config.sdkClientVersion;\n        // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs\n        // persistenceMananger to be available. see _getFinalTarget for more context\n        this._persistenceManagerAvailable = new Promise(resolve => (this._resolvePersistenceManagerAvailable = resolve));\n    }\n    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n        if (popupRedirectResolver) {\n            this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n        }\n        // Have to check for app deletion throughout initialization (after each\n        // promise resolution)\n        this._initializationPromise = this.queue(async () => {\n            var _a, _b, _c;\n            if (this._deleted) {\n                return;\n            }\n            this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\n            (_a = this._resolvePersistenceManagerAvailable) === null || _a === void 0 ? void 0 : _a.call(this);\n            if (this._deleted) {\n                return;\n            }\n            // Initialize the resolver early if necessary (only applicable to web:\n            // this will cause the iframe to load immediately in certain cases)\n            if ((_b = this._popupRedirectResolver) === null || _b === void 0 ? void 0 : _b._shouldInitProactively) {\n                // If this fails, don't halt auth loading\n                try {\n                    await this._popupRedirectResolver._initialize(this);\n                }\n                catch (e) {\n                    /* Ignore the error */\n                }\n            }\n            await this.initializeCurrentUser(popupRedirectResolver);\n            this.lastNotifiedUid = ((_c = this.currentUser) === null || _c === void 0 ? void 0 : _c.uid) || null;\n            if (this._deleted) {\n                return;\n            }\n            this._isInitialized = true;\n        });\n        return this._initializationPromise;\n    }\n    /**\n     * If the persistence is changed in another window, the user manager will let us know\n     */\n    async _onStorageEvent() {\n        if (this._deleted) {\n            return;\n        }\n        const user = await this.assertedPersistence.getCurrentUser();\n        if (!this.currentUser && !user) {\n            // No change, do nothing (was signed out and remained signed out).\n            return;\n        }\n        // If the same user is to be synchronized.\n        if (this.currentUser && user && this.currentUser.uid === user.uid) {\n            // Data update, simply copy data changes.\n            this._currentUser._assign(user);\n            // If tokens changed from previous user tokens, this will trigger\n            // notifyAuthListeners_.\n            await this.currentUser.getIdToken();\n            return;\n        }\n        // Update current Auth state. Either a new login or logout.\n        // Skip blocking callbacks, they should not apply to a change in another tab.\n        await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);\n    }\n    async initializeCurrentUserFromIdToken(idToken) {\n        try {\n            const response = await getAccountInfo(this, { idToken });\n            const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);\n            await this.directlySetCurrentUser(user);\n        }\n        catch (err) {\n            console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);\n            await this.directlySetCurrentUser(null);\n        }\n    }\n    async initializeCurrentUser(popupRedirectResolver) {\n        var _a;\n        if (_isFirebaseServerApp(this.app)) {\n            const idToken = this.app.settings.authIdToken;\n            if (idToken) {\n                // Start the auth operation in the next tick to allow a moment for the customer's app to\n                // attach an emulator, if desired.\n                return new Promise(resolve => {\n                    setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));\n                });\n            }\n            else {\n                return this.directlySetCurrentUser(null);\n            }\n        }\n        // First check to see if we have a pending redirect event.\n        const previouslyStoredUser = (await this.assertedPersistence.getCurrentUser());\n        let futureCurrentUser = previouslyStoredUser;\n        let needsTocheckMiddleware = false;\n        if (popupRedirectResolver && this.config.authDomain) {\n            await this.getOrInitRedirectPersistenceManager();\n            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\n            const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;\n            const result = await this.tryRedirectSignIn(popupRedirectResolver);\n            // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n            // matches the redirect user, then we want to initially sign in with the\n            // new user object from result.\n            // TODO(samgho): More thoroughly test all of this\n            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\n                (result === null || result === void 0 ? void 0 : result.user)) {\n                futureCurrentUser = result.user;\n                needsTocheckMiddleware = true;\n            }\n        }\n        // If no user in persistence, there is no current user. Set to null.\n        if (!futureCurrentUser) {\n            return this.directlySetCurrentUser(null);\n        }\n        if (!futureCurrentUser._redirectEventId) {\n            // This isn't a redirect link operation, we can reload and bail.\n            // First though, ensure that we check the middleware is happy.\n            if (needsTocheckMiddleware) {\n                try {\n                    await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n                }\n                catch (e) {\n                    futureCurrentUser = previouslyStoredUser;\n                    // We know this is available since the bit is only set when the\n                    // resolver is available\n                    this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n                }\n            }\n            if (futureCurrentUser) {\n                return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n            }\n            else {\n                return this.directlySetCurrentUser(null);\n            }\n        }\n        _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        await this.getOrInitRedirectPersistenceManager();\n        // If the redirect user's event ID matches the current user's event ID,\n        // DO NOT reload the current user, otherwise they'll be cleared from storage.\n        // This is important for the reauthenticateWithRedirect() flow.\n        if (this.redirectUser &&\n            this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n            return this.directlySetCurrentUser(futureCurrentUser);\n        }\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n    }\n    async tryRedirectSignIn(redirectResolver) {\n        // The redirect user needs to be checked (and signed in if available)\n        // during auth initialization. All of the normal sign in and link/reauth\n        // flows call back into auth and push things onto the promise queue. We\n        // need to await the result of the redirect sign in *inside the promise\n        // queue*. This presents a problem: we run into deadlock. See:\n        //    ┌> [Initialization] ─────┐\n        //    ┌> [<other queue tasks>] │\n        //    └─ [getRedirectResult] <─┘\n        //    where [] are tasks on the queue and arrows denote awaits\n        // Initialization will never complete because it's waiting on something\n        // that's waiting for initialization to complete!\n        //\n        // Instead, this method calls getRedirectResult() (stored in\n        // _completeRedirectFn) with an optional parameter that instructs all of\n        // the underlying auth operations to skip anything that mutates auth state.\n        let result = null;\n        try {\n            // We know this._popupRedirectResolver is set since redirectResolver\n            // is passed in. The _completeRedirectFn expects the unwrapped extern.\n            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n        }\n        catch (e) {\n            // Swallow any errors here; the code can retrieve them in\n            // getRedirectResult().\n            await this._setRedirectUser(null);\n        }\n        return result;\n    }\n    async reloadAndSetCurrentUserOrClear(user) {\n        try {\n            await _reloadWithoutSaving(user);\n        }\n        catch (e) {\n            if ((e === null || e === void 0 ? void 0 : e.code) !==\n                `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n                // Something's wrong with the user's token. Log them out and remove\n                // them from storage\n                return this.directlySetCurrentUser(null);\n            }\n        }\n        return this.directlySetCurrentUser(user);\n    }\n    useDeviceLanguage() {\n        this.languageCode = _getUserLanguage();\n    }\n    async _delete() {\n        this._deleted = true;\n    }\n    async updateCurrentUser(userExtern) {\n        if (_isFirebaseServerApp(this.app)) {\n            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n        }\n        // The public updateCurrentUser method needs to make a copy of the user,\n        // and also check that the project matches\n        const user = userExtern\n            ? getModularInstance(userExtern)\n            : null;\n        if (user) {\n            _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n        }\n        return this._updateCurrentUser(user && user._clone(this));\n    }\n    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\n        if (this._deleted) {\n            return;\n        }\n        if (user) {\n            _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n        }\n        if (!skipBeforeStateCallbacks) {\n            await this.beforeStateQueue.runMiddleware(user);\n        }\n        return this.queue(async () => {\n            await this.directlySetCurrentUser(user);\n            this.notifyAuthListeners();\n        });\n    }\n    async signOut() {\n        if (_isFirebaseServerApp(this.app)) {\n            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n        }\n        // Run first, to block _setRedirectUser() if any callbacks fail.\n        await this.beforeStateQueue.runMiddleware(null);\n        // Clear the redirect user when signOut is called\n        if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n            await this._setRedirectUser(null);\n        }\n        // Prevent callbacks from being called again in _updateCurrentUser, as\n        // they were already called in the first line.\n        return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);\n    }\n    setPersistence(persistence) {\n        if (_isFirebaseServerApp(this.app)) {\n            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n        }\n        return this.queue(async () => {\n            await this.assertedPersistence.setPersistence(_getInstance(persistence));\n        });\n    }\n    _getRecaptchaConfig() {\n        if (this.tenantId == null) {\n            return this._agentRecaptchaConfig;\n        }\n        else {\n            return this._tenantRecaptchaConfigs[this.tenantId];\n        }\n    }\n    async validatePassword(password) {\n        if (!this._getPasswordPolicyInternal()) {\n            await this._updatePasswordPolicy();\n        }\n        // Password policy will be defined after fetching.\n        const passwordPolicy = this._getPasswordPolicyInternal();\n        // Check that the policy schema version is supported by the SDK.\n        // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n        if (passwordPolicy.schemaVersion !==\n            this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n            return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\n        }\n        return passwordPolicy.validatePassword(password);\n    }\n    _getPasswordPolicyInternal() {\n        if (this.tenantId === null) {\n            return this._projectPasswordPolicy;\n        }\n        else {\n            return this._tenantPasswordPolicies[this.tenantId];\n        }\n    }\n    async _updatePasswordPolicy() {\n        const response = await _getPasswordPolicy(this);\n        const passwordPolicy = new PasswordPolicyImpl(response);\n        if (this.tenantId === null) {\n            this._projectPasswordPolicy = passwordPolicy;\n        }\n        else {\n            this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n        }\n    }\n    _getPersistenceType() {\n        return this.assertedPersistence.persistence.type;\n    }\n    _getPersistence() {\n        return this.assertedPersistence.persistence;\n    }\n    _updateErrorMap(errorMap) {\n        this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());\n    }\n    onAuthStateChanged(nextOrObserver, error, completed) {\n        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n    }\n    beforeAuthStateChanged(callback, onAbort) {\n        return this.beforeStateQueue.pushCallback(callback, onAbort);\n    }\n    onIdTokenChanged(nextOrObserver, error, completed) {\n        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n    }\n    authStateReady() {\n        return new Promise((resolve, reject) => {\n            if (this.currentUser) {\n                resolve();\n            }\n            else {\n                const unsubscribe = this.onAuthStateChanged(() => {\n                    unsubscribe();\n                    resolve();\n                }, reject);\n            }\n        });\n    }\n    /**\n     * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n     */\n    async revokeAccessToken(token) {\n        if (this.currentUser) {\n            const idToken = await this.currentUser.getIdToken();\n            // Generalize this to accept other providers once supported.\n            const request = {\n                providerId: 'apple.com',\n                tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\n                token,\n                idToken\n            };\n            if (this.tenantId != null) {\n                request.tenantId = this.tenantId;\n            }\n            await revokeToken(this, request);\n        }\n    }\n    toJSON() {\n        var _a;\n        return {\n            apiKey: this.config.apiKey,\n            authDomain: this.config.authDomain,\n            appName: this.name,\n            currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\n        };\n    }\n    async _setRedirectUser(user, popupRedirectResolver) {\n        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n        return user === null\n            ? redirectManager.removeCurrentUser()\n            : redirectManager.setCurrentUser(user);\n    }\n    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\n        if (!this.redirectPersistenceManager) {\n            const resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\n                this._popupRedirectResolver;\n            _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\n            this.redirectUser =\n                await this.redirectPersistenceManager.getCurrentUser();\n        }\n        return this.redirectPersistenceManager;\n    }\n    async _redirectUserForId(id) {\n        var _a, _b;\n        // Make sure we've cleared any pending persistence actions if we're not in\n        // the initializer\n        if (this._isInitialized) {\n            await this.queue(async () => { });\n        }\n        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {\n            return this._currentUser;\n        }\n        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {\n            return this.redirectUser;\n        }\n        return null;\n    }\n    async _persistUserIfCurrent(user) {\n        if (user === this.currentUser) {\n            return this.queue(async () => this.directlySetCurrentUser(user));\n        }\n    }\n    /** Notifies listeners only if the user is current */\n    _notifyListenersIfCurrent(user) {\n        if (user === this.currentUser) {\n            this.notifyAuthListeners();\n        }\n    }\n    _key() {\n        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n    }\n    _startProactiveRefresh() {\n        this.isProactiveRefreshEnabled = true;\n        if (this.currentUser) {\n            this._currentUser._startProactiveRefresh();\n        }\n    }\n    _stopProactiveRefresh() {\n        this.isProactiveRefreshEnabled = false;\n        if (this.currentUser) {\n            this._currentUser._stopProactiveRefresh();\n        }\n    }\n    /** Returns the current user cast as the internal type */\n    get _currentUser() {\n        return this.currentUser;\n    }\n    notifyAuthListeners() {\n        var _a, _b;\n        if (!this._isInitialized) {\n            return;\n        }\n        this.idTokenSubscription.next(this.currentUser);\n        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\n        if (this.lastNotifiedUid !== currentUid) {\n            this.lastNotifiedUid = currentUid;\n            this.authStateSubscription.next(this.currentUser);\n        }\n    }\n    registerStateListener(subscription, nextOrObserver, error, completed) {\n        if (this._deleted) {\n            return () => { };\n        }\n        const cb = typeof nextOrObserver === 'function'\n            ? nextOrObserver\n            : nextOrObserver.next.bind(nextOrObserver);\n        let isUnsubscribed = false;\n        const promise = this._isInitialized\n            ? Promise.resolve()\n            : this._initializationPromise;\n        _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        // The callback needs to be called asynchronously per the spec.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        promise.then(() => {\n            if (isUnsubscribed) {\n                return;\n            }\n            cb(this.currentUser);\n        });\n        if (typeof nextOrObserver === 'function') {\n            const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n            return () => {\n                isUnsubscribed = true;\n                unsubscribe();\n            };\n        }\n        else {\n            const unsubscribe = subscription.addObserver(nextOrObserver);\n            return () => {\n                isUnsubscribed = true;\n                unsubscribe();\n            };\n        }\n    }\n    /**\n     * Unprotected (from race conditions) method to set the current user. This\n     * should only be called from within a queued callback. This is necessary\n     * because the queue shouldn't rely on another queued callback.\n     */\n    async directlySetCurrentUser(user) {\n        if (this.currentUser && this.currentUser !== user) {\n            this._currentUser._stopProactiveRefresh();\n        }\n        if (user && this.isProactiveRefreshEnabled) {\n            user._startProactiveRefresh();\n        }\n        this.currentUser = user;\n        if (user) {\n            await this.assertedPersistence.setCurrentUser(user);\n        }\n        else {\n            await this.assertedPersistence.removeCurrentUser();\n        }\n    }\n    queue(action) {\n        // In case something errors, the callback still should be called in order\n        // to keep the promise chain alive\n        this.operations = this.operations.then(action, action);\n        return this.operations;\n    }\n    get assertedPersistence() {\n        _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        return this.persistenceManager;\n    }\n    _logFramework(framework) {\n        if (!framework || this.frameworks.includes(framework)) {\n            return;\n        }\n        this.frameworks.push(framework);\n        // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n        // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n        this.frameworks.sort();\n        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n    }\n    _getFrameworks() {\n        return this.frameworks;\n    }\n    async _getAdditionalHeaders() {\n        var _a;\n        // Additional headers on every request\n        const headers = {\n            [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\n        };\n        if (this.app.options.appId) {\n            headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n        }\n        // If the heartbeat service exists, add the heartbeat string\n        const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider\n            .getImmediate({\n            optional: true\n        })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());\n        if (heartbeatsHeader) {\n            headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n        }\n        // If the App Check service exists, add the App Check token in the headers\n        const appCheckToken = await this._getAppCheckToken();\n        if (appCheckToken) {\n            headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\n        }\n        return headers;\n    }\n    async _getAppCheckToken() {\n        var _a;\n        if (_isFirebaseServerApp(this.app) && this.app.settings.appCheckToken) {\n            return this.app.settings.appCheckToken;\n        }\n        const appCheckTokenResult = await ((_a = this.appCheckServiceProvider\n            .getImmediate({ optional: true })) === null || _a === void 0 ? void 0 : _a.getToken());\n        if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {\n            // Context: appCheck.getToken() will never throw even if an error happened.\n            // In the error case, a dummy token will be returned along with an error field describing\n            // the error. In general, we shouldn't care about the error condition and just use\n            // the token (actual or dummy) to send requests.\n            _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n        }\n        return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;\n    }\n}\n/**\n * Method to be used to cast down to our private implementation of Auth.\n * It will also handle unwrapping from the compat type if necessary\n *\n * @param auth Auth object passed in from developer\n */\nfunction _castAuth(auth) {\n    return getModularInstance(auth);\n}\n/** Helper class to wrap subscriber logic */\nclass Subscription {\n    constructor(auth) {\n        this.auth = auth;\n        this.observer = null;\n        this.addObserver = createSubscribe(observer => (this.observer = observer));\n    }\n    get next() {\n        _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        return this.observer.next.bind(this.observer);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet externalJSProvider = {\n    async loadJS() {\n        throw new Error('Unable to load external scripts');\n    },\n    recaptchaV2Script: '',\n    recaptchaEnterpriseScript: '',\n    gapiScript: ''\n};\nfunction _setExternalJSProvider(p) {\n    externalJSProvider = p;\n}\nfunction _loadJS(url) {\n    return externalJSProvider.loadJS(url);\n}\nfunction _recaptchaV2ScriptUrl() {\n    return externalJSProvider.recaptchaV2Script;\n}\nfunction _recaptchaEnterpriseScriptUrl() {\n    return externalJSProvider.recaptchaEnterpriseScript;\n}\nfunction _gapiScriptUrl() {\n    return externalJSProvider.gapiScript;\n}\nfunction _generateCallbackName(prefix) {\n    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst _SOLVE_TIME_MS = 500;\nconst _EXPIRATION_TIME_MS = 60000;\nconst _WIDGET_ID_START = 1000000000000;\nclass MockReCaptcha {\n    constructor(auth) {\n        this.auth = auth;\n        this.counter = _WIDGET_ID_START;\n        this._widgets = new Map();\n    }\n    render(container, parameters) {\n        const id = this.counter;\n        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\n        this.counter++;\n        return id;\n    }\n    reset(optWidgetId) {\n        var _a;\n        const id = optWidgetId || _WIDGET_ID_START;\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());\n        this._widgets.delete(id);\n    }\n    getResponse(optWidgetId) {\n        var _a;\n        const id = optWidgetId || _WIDGET_ID_START;\n        return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';\n    }\n    async execute(optWidgetId) {\n        var _a;\n        const id = optWidgetId || _WIDGET_ID_START;\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());\n        return '';\n    }\n}\nclass MockGreCAPTCHATopLevel {\n    constructor() {\n        this.enterprise = new MockGreCAPTCHA();\n    }\n    ready(callback) {\n        callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n        return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n        return '';\n    }\n}\nclass MockGreCAPTCHA {\n    ready(callback) {\n        callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n        return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n        return '';\n    }\n}\nclass MockWidget {\n    constructor(containerOrId, appName, params) {\n        this.params = params;\n        this.timerId = null;\n        this.deleted = false;\n        this.responseToken = null;\n        this.clickHandler = () => {\n            this.execute();\n        };\n        const container = typeof containerOrId === 'string'\n            ? document.getElementById(containerOrId)\n            : containerOrId;\n        _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, { appName });\n        this.container = container;\n        this.isVisible = this.params.size !== 'invisible';\n        if (this.isVisible) {\n            this.execute();\n        }\n        else {\n            this.container.addEventListener('click', this.clickHandler);\n        }\n    }\n    getResponse() {\n        this.checkIfDeleted();\n        return this.responseToken;\n    }\n    delete() {\n        this.checkIfDeleted();\n        this.deleted = true;\n        if (this.timerId) {\n            clearTimeout(this.timerId);\n            this.timerId = null;\n        }\n        this.container.removeEventListener('click', this.clickHandler);\n    }\n    execute() {\n        this.checkIfDeleted();\n        if (this.timerId) {\n            return;\n        }\n        this.timerId = window.setTimeout(() => {\n            this.responseToken = generateRandomAlphaNumericString(50);\n            const { callback, 'expired-callback': expiredCallback } = this.params;\n            if (callback) {\n                try {\n                    callback(this.responseToken);\n                }\n                catch (e) { }\n            }\n            this.timerId = window.setTimeout(() => {\n                this.timerId = null;\n                this.responseToken = null;\n                if (expiredCallback) {\n                    try {\n                        expiredCallback();\n                    }\n                    catch (e) { }\n                }\n                if (this.isVisible) {\n                    this.execute();\n                }\n            }, _EXPIRATION_TIME_MS);\n        }, _SOLVE_TIME_MS);\n    }\n    checkIfDeleted() {\n        if (this.deleted) {\n            throw new Error('reCAPTCHA mock was already deleted!');\n        }\n    }\n}\nfunction generateRandomAlphaNumericString(len) {\n    const chars = [];\n    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    for (let i = 0; i < len; i++) {\n        chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n    }\n    return chars.join('');\n}\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\nconst FAKE_TOKEN = 'NO_RECAPTCHA';\nclass RecaptchaEnterpriseVerifier {\n    /**\n     *\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     */\n    constructor(authExtern) {\n        /**\n         * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n         */\n        this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n        this.auth = _castAuth(authExtern);\n    }\n    /**\n     * Executes the verification process.\n     *\n     * @returns A Promise for a token that can be used to assert the validity of a request.\n     */\n    async verify(action = 'verify', forceRefresh = false) {\n        async function retrieveSiteKey(auth) {\n            if (!forceRefresh) {\n                if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n                    return auth._agentRecaptchaConfig.siteKey;\n                }\n                if (auth.tenantId != null &&\n                    auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\n                    return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n                }\n            }\n            return new Promise(async (resolve, reject) => {\n                getRecaptchaConfig(auth, {\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n                    version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n                })\n                    .then(response => {\n                    if (response.recaptchaKey === undefined) {\n                        reject(new Error('recaptcha Enterprise site key undefined'));\n                    }\n                    else {\n                        const config = new RecaptchaConfig(response);\n                        if (auth.tenantId == null) {\n                            auth._agentRecaptchaConfig = config;\n                        }\n                        else {\n                            auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n                        }\n                        return resolve(config.siteKey);\n                    }\n                })\n                    .catch(error => {\n                    reject(error);\n                });\n            });\n        }\n        function retrieveRecaptchaToken(siteKey, resolve, reject) {\n            const grecaptcha = window.grecaptcha;\n            if (isEnterprise(grecaptcha)) {\n                grecaptcha.enterprise.ready(() => {\n                    grecaptcha.enterprise\n                        .execute(siteKey, { action })\n                        .then(token => {\n                        resolve(token);\n                    })\n                        .catch(() => {\n                        resolve(FAKE_TOKEN);\n                    });\n                });\n            }\n            else {\n                reject(Error('No reCAPTCHA enterprise script loaded.'));\n            }\n        }\n        // Returns Promise for a mock token when appVerificationDisabledForTesting is true.\n        if (this.auth.settings.appVerificationDisabledForTesting) {\n            const mockRecaptcha = new MockGreCAPTCHATopLevel();\n            return mockRecaptcha.execute('siteKey', { action: 'verify' });\n        }\n        return new Promise((resolve, reject) => {\n            retrieveSiteKey(this.auth)\n                .then(siteKey => {\n                if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n                    retrieveRecaptchaToken(siteKey, resolve, reject);\n                }\n                else {\n                    if (typeof window === 'undefined') {\n                        reject(new Error('RecaptchaVerifier is only supported in browser'));\n                        return;\n                    }\n                    let url = _recaptchaEnterpriseScriptUrl();\n                    if (url.length !== 0) {\n                        url += siteKey;\n                    }\n                    _loadJS(url)\n                        .then(() => {\n                        retrieveRecaptchaToken(siteKey, resolve, reject);\n                    })\n                        .catch(error => {\n                        reject(error);\n                    });\n                }\n            })\n                .catch(error => {\n                reject(error);\n            });\n        });\n    }\n}\nasync function injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {\n    const verifier = new RecaptchaEnterpriseVerifier(auth);\n    let captchaResponse;\n    if (isFakeToken) {\n        captchaResponse = FAKE_TOKEN;\n    }\n    else {\n        try {\n            captchaResponse = await verifier.verify(action);\n        }\n        catch (error) {\n            captchaResponse = await verifier.verify(action, true);\n        }\n    }\n    const newRequest = Object.assign({}, request);\n    if (action === \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ ||\n        action === \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {\n        if ('phoneEnrollmentInfo' in newRequest) {\n            const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n            const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;\n            Object.assign(newRequest, {\n                'phoneEnrollmentInfo': {\n                    phoneNumber,\n                    recaptchaToken,\n                    captchaResponse,\n                    'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n                    'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n                }\n            });\n        }\n        else if ('phoneSignInInfo' in newRequest) {\n            const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;\n            Object.assign(newRequest, {\n                'phoneSignInInfo': {\n                    recaptchaToken,\n                    captchaResponse,\n                    'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n                    'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n                }\n            });\n        }\n        return newRequest;\n    }\n    if (!isCaptchaResp) {\n        Object.assign(newRequest, { captchaResponse });\n    }\n    else {\n        Object.assign(newRequest, { 'captchaResp': captchaResponse });\n    }\n    Object.assign(newRequest, { 'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ });\n    Object.assign(newRequest, {\n        'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    return newRequest;\n}\nasync function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {\n    var _a, _b;\n    if (recaptchaAuthProvider === \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) {\n        if ((_a = authInstance\n            ._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {\n            const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n            return actionMethod(authInstance, requestWithRecaptcha);\n        }\n        else {\n            return actionMethod(authInstance, request).catch(async (error) => {\n                if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\n                    console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n                    const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n                    return actionMethod(authInstance, requestWithRecaptcha);\n                }\n                else {\n                    return Promise.reject(error);\n                }\n            });\n        }\n    }\n    else if (recaptchaAuthProvider === \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) {\n        if ((_b = authInstance\n            ._getRecaptchaConfig()) === null || _b === void 0 ? void 0 : _b.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) {\n            const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName);\n            return actionMethod(authInstance, requestWithRecaptcha).catch(async (error) => {\n                var _a;\n                if (((_a = authInstance\n                    ._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.getProviderEnforcementState(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) === \"AUDIT\" /* EnforcementState.AUDIT */) {\n                    // AUDIT mode\n                    if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}` ||\n                        error.code === `auth/${\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */}`) {\n                        console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);\n                        // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token\n                        // check fails.\n                        // Fallback to reCAPTCHA v2 flow.\n                        const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false, // isCaptchaResp\n                        true // isFakeToken\n                        );\n                        // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.\n                        return actionMethod(authInstance, requestWithRecaptchaFields);\n                    }\n                }\n                // ENFORCE mode or AUDIT mode with any other error.\n                return Promise.reject(error);\n            });\n        }\n        else {\n            // Do reCAPTCHA v2 flow.\n            const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false, // isCaptchaResp\n            true // isFakeToken\n            );\n            // This will call the PhoneApiCaller to fetch and inject v2 token.\n            return actionMethod(authInstance, requestWithRecaptchaFields);\n        }\n    }\n    else {\n        return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');\n    }\n}\nasync function _initializeRecaptchaConfig(auth) {\n    const authInternal = _castAuth(auth);\n    const response = await getRecaptchaConfig(authInternal, {\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n        version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    const config = new RecaptchaConfig(response);\n    if (authInternal.tenantId == null) {\n        authInternal._agentRecaptchaConfig = config;\n    }\n    else {\n        authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n    }\n    if (config.isAnyProviderEnabled()) {\n        const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n        void verifier.verify();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Initializes an {@link Auth} instance with fine-grained control over\n * {@link Dependencies}.\n *\n * @remarks\n *\n * This function allows more control over the {@link Auth} instance than\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\n * need control over which persistence layer is used, or to minimize bundle\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n *\n * For example, if your app only uses anonymous accounts and you only want\n * accounts saved for the current session, initialize `Auth` with:\n *\n * ```js\n * const auth = initializeAuth(app, {\n *   persistence: browserSessionPersistence,\n *   popupRedirectResolver: undefined,\n * });\n * ```\n *\n * @public\n */\nfunction initializeAuth(app, deps) {\n    const provider = _getProvider(app, 'auth');\n    if (provider.isInitialized()) {\n        const auth = provider.getImmediate();\n        const initialOptions = provider.getOptions();\n        if (deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {\n            return auth;\n        }\n        else {\n            _fail(auth, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n        }\n    }\n    const auth = provider.initialize({ options: deps });\n    return auth;\n}\nfunction _initializeAuthInstance(auth, deps) {\n    const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];\n    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n    if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {\n        auth._updateErrorMap(deps.errorMap);\n    }\n    // This promise is intended to float; auth initialization happens in the\n    // background, meanwhile the auth object may be used by the app.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);\n}\n\n/**\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n * Firebase Auth services.\n *\n * @remarks\n * This must be called synchronously immediately following the first call to\n * {@link initializeAuth}.  Do not use with production credentials as emulator\n * traffic is not encrypted.\n *\n *\n * @example\n * ```javascript\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n * `true` to disable the warning banner attached to the DOM.\n *\n * @public\n */\nfunction connectAuthEmulator(auth, url, options) {\n    const authInternal = _castAuth(auth);\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n    const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);\n    const protocol = extractProtocol(url);\n    const { host, port } = extractHostAndPort(url);\n    const portStr = port === null ? '' : `:${port}`;\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n    const emulator = { url: `${protocol}//${host}${portStr}/` };\n    const emulatorConfig = Object.freeze({\n        host,\n        port,\n        protocol: protocol.replace(':', ''),\n        options: Object.freeze({ disableWarnings })\n    });\n    // There are a few scenarios to guard against if the Auth instance has already started:\n    if (!authInternal._canInitEmulator) {\n        // Applications may not initialize the emulator for the first time if Auth has already started\n        // to make network requests.\n        _assert(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n        // Applications may not alter the configuration of the emulator (aka pass a different config)\n        // once Auth has started to make network requests.\n        _assert(deepEqual(emulator, authInternal.config.emulator) &&\n            deepEqual(emulatorConfig, authInternal.emulatorConfig), authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n        // It's valid, however, to invoke connectAuthEmulator() after Auth has started making\n        // connections, so long as the config matches the existing config. This results in a no-op.\n        return;\n    }\n    authInternal.config.emulator = emulator;\n    authInternal.emulatorConfig = emulatorConfig;\n    authInternal.settings.appVerificationDisabledForTesting = true;\n    if (isCloudWorkstation(host)) {\n        updateEmulatorBanner('Auth', true);\n        // Workaround to get cookies in Firebase Studio\n        void pingServer(`${protocol}//${host}${portStr}`);\n    }\n    else if (!disableWarnings) {\n        emitEmulatorWarning();\n    }\n}\nfunction extractProtocol(url) {\n    const protocolEnd = url.indexOf(':');\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n}\nfunction extractHostAndPort(url) {\n    const protocol = extractProtocol(url);\n    const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n    if (!authority) {\n        return { host: '', port: null };\n    }\n    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n    const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n    if (bracketedIPv6) {\n        const host = bracketedIPv6[1];\n        return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\n    }\n    else {\n        const [host, port] = hostAndPort.split(':');\n        return { host, port: parsePort(port) };\n    }\n}\nfunction parsePort(portStr) {\n    if (!portStr) {\n        return null;\n    }\n    const port = Number(portStr);\n    if (isNaN(port)) {\n        return null;\n    }\n    return port;\n}\nfunction emitEmulatorWarning() {\n    function attachBanner() {\n        const el = document.createElement('p');\n        const sty = el.style;\n        el.innerText =\n            'Running in emulator mode. Do not use with production credentials.';\n        sty.position = 'fixed';\n        sty.width = '100%';\n        sty.backgroundColor = '#ffffff';\n        sty.border = '.1em solid #000000';\n        sty.color = '#b50000';\n        sty.bottom = '0px';\n        sty.left = '0px';\n        sty.margin = '0px';\n        sty.zIndex = '10000';\n        sty.textAlign = 'center';\n        el.classList.add('firebase-emulator-warning');\n        document.body.appendChild(el);\n    }\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\n        console.info('WARNING: You are using the Auth Emulator,' +\n            ' which is intended for local testing only.  Do not use with' +\n            ' production credentials.');\n    }\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n        if (document.readyState === 'loading') {\n            window.addEventListener('DOMContentLoaded', attachBanner);\n        }\n        else {\n            attachBanner();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface that represents the credentials returned by an {@link AuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nclass AuthCredential {\n    /** @internal */\n    constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    providerId, \n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    signInMethod) {\n        this.providerId = providerId;\n        this.signInMethod = signInMethod;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return debugFail('not implemented');\n    }\n    /** @internal */\n    _getIdTokenResponse(_auth) {\n        return debugFail('not implemented');\n    }\n    /** @internal */\n    _linkToIdToken(_auth, _idToken) {\n        return debugFail('not implemented');\n    }\n    /** @internal */\n    _getReauthenticationResolver(_auth) {\n        return debugFail('not implemented');\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function resetPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\n}\nasync function updateEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n}\n// Used for linking an email/password account to an existing idToken. Uses the same request/response\n// format as updateEmailPassword.\nasync function linkEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request);\n}\nasync function applyActionCode$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function signInWithPassword(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\n}\nasync function sendOobCode(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\n}\nasync function sendEmailVerification$1(auth, request) {\n    return sendOobCode(auth, request);\n}\nasync function sendPasswordResetEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n}\nasync function sendSignInLinkToEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n}\nasync function verifyAndChangeEmail(auth, request) {\n    return sendOobCode(auth, request);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function signInWithEmailLink$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n}\nasync function signInWithEmailLinkForLinking(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n * {@link ProviderId}.PASSWORD\n *\n * @remarks\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @public\n */\nclass EmailAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(\n    /** @internal */\n    _email, \n    /** @internal */\n    _password, signInMethod, \n    /** @internal */\n    _tenantId = null) {\n        super(\"password\" /* ProviderId.PASSWORD */, signInMethod);\n        this._email = _email;\n        this._password = _password;\n        this._tenantId = _tenantId;\n    }\n    /** @internal */\n    static _fromEmailAndPassword(email, password) {\n        return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n    }\n    /** @internal */\n    static _fromEmailAndCode(email, oobCode, tenantId = null) {\n        return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n        return {\n            email: this._email,\n            password: this._password,\n            signInMethod: this.signInMethod,\n            tenantId: this._tenantId\n        };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n     *\n     * @param json - Either `object` or the stringified representation of the object. When string is\n     * provided, `JSON.parse` would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\n        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {\n            if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n                return this._fromEmailAndPassword(obj.email, obj.password);\n            }\n            else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n                return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n            }\n        }\n        return null;\n    }\n    /** @internal */\n    async _getIdTokenResponse(auth) {\n        switch (this.signInMethod) {\n            case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n                const request = {\n                    returnSecureToken: true,\n                    email: this._email,\n                    password: this._password,\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n                };\n                return handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n            case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n                return signInWithEmailLink$1(auth, {\n                    email: this._email,\n                    oobCode: this._password\n                });\n            default:\n                _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }\n    }\n    /** @internal */\n    async _linkToIdToken(auth, idToken) {\n        switch (this.signInMethod) {\n            case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n                const request = {\n                    idToken,\n                    returnSecureToken: true,\n                    email: this._email,\n                    password: this._password,\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n                };\n                return handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n            case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n                return signInWithEmailLinkForLinking(auth, {\n                    idToken,\n                    email: this._email,\n                    oobCode: this._password\n                });\n            default:\n                _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n        return this._getIdTokenResponse(auth);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function signInWithIdp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst IDP_REQUEST_URI$1 = 'http://localhost';\n/**\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nclass OAuthCredential extends AuthCredential {\n    constructor() {\n        super(...arguments);\n        this.pendingToken = null;\n    }\n    /** @internal */\n    static _fromParams(params) {\n        const cred = new OAuthCredential(params.providerId, params.signInMethod);\n        if (params.idToken || params.accessToken) {\n            // OAuth 2 and either ID token or access token.\n            if (params.idToken) {\n                cred.idToken = params.idToken;\n            }\n            if (params.accessToken) {\n                cred.accessToken = params.accessToken;\n            }\n            // Add nonce if available and no pendingToken is present.\n            if (params.nonce && !params.pendingToken) {\n                cred.nonce = params.nonce;\n            }\n            if (params.pendingToken) {\n                cred.pendingToken = params.pendingToken;\n            }\n        }\n        else if (params.oauthToken && params.oauthTokenSecret) {\n            // OAuth 1 and OAuth token with token secret\n            cred.accessToken = params.oauthToken;\n            cred.secret = params.oauthTokenSecret;\n        }\n        else {\n            _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        }\n        return cred;\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n        return {\n            idToken: this.idToken,\n            accessToken: this.accessToken,\n            secret: this.secret,\n            nonce: this.nonce,\n            pendingToken: this.pendingToken,\n            providerId: this.providerId,\n            signInMethod: this.signInMethod\n        };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\n        const { providerId, signInMethod } = obj, rest = __rest(obj, [\"providerId\", \"signInMethod\"]);\n        if (!providerId || !signInMethod) {\n            return null;\n        }\n        const cred = new OAuthCredential(providerId, signInMethod);\n        cred.idToken = rest.idToken || undefined;\n        cred.accessToken = rest.accessToken || undefined;\n        cred.secret = rest.secret;\n        cred.nonce = rest.nonce;\n        cred.pendingToken = rest.pendingToken || null;\n        return cred;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n        const request = this.buildRequest();\n        return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n        const request = this.buildRequest();\n        request.idToken = idToken;\n        return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n        const request = this.buildRequest();\n        request.autoCreate = false;\n        return signInWithIdp(auth, request);\n    }\n    buildRequest() {\n        const request = {\n            requestUri: IDP_REQUEST_URI$1,\n            returnSecureToken: true\n        };\n        if (this.pendingToken) {\n            request.pendingToken = this.pendingToken;\n        }\n        else {\n            const postBody = {};\n            if (this.idToken) {\n                postBody['id_token'] = this.idToken;\n            }\n            if (this.accessToken) {\n                postBody['access_token'] = this.accessToken;\n            }\n            if (this.secret) {\n                postBody['oauth_token_secret'] = this.secret;\n            }\n            postBody['providerId'] = this.providerId;\n            if (this.nonce && !this.pendingToken) {\n                postBody['nonce'] = this.nonce;\n            }\n            request.postBody = querystring(postBody);\n        }\n        return request;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function sendPhoneVerificationCode(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));\n}\nasync function signInWithPhoneNumber$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n}\nasync function linkWithPhoneNumber$1(auth, request) {\n    const response = await _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n    if (response.temporaryProof) {\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n    }\n    return response;\n}\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\n};\nasync function verifyPhoneNumberForExisting(auth, request) {\n    const apiRequest = Object.assign(Object.assign({}, request), { operation: 'REAUTH' });\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents the credentials returned by {@link PhoneAuthProvider}.\n *\n * @public\n */\nclass PhoneAuthCredential extends AuthCredential {\n    constructor(params) {\n        super(\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */);\n        this.params = params;\n    }\n    /** @internal */\n    static _fromVerification(verificationId, verificationCode) {\n        return new PhoneAuthCredential({ verificationId, verificationCode });\n    }\n    /** @internal */\n    static _fromTokenResponse(phoneNumber, temporaryProof) {\n        return new PhoneAuthCredential({ phoneNumber, temporaryProof });\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n        return linkWithPhoneNumber$1(auth, Object.assign({ idToken }, this._makeVerificationRequest()));\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _makeVerificationRequest() {\n        const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;\n        if (temporaryProof && phoneNumber) {\n            return { temporaryProof, phoneNumber };\n        }\n        return {\n            sessionInfo: verificationId,\n            code: verificationCode\n        };\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n        const obj = {\n            providerId: this.providerId\n        };\n        if (this.params.phoneNumber) {\n            obj.phoneNumber = this.params.phoneNumber;\n        }\n        if (this.params.temporaryProof) {\n            obj.temporaryProof = this.params.temporaryProof;\n        }\n        if (this.params.verificationCode) {\n            obj.verificationCode = this.params.verificationCode;\n        }\n        if (this.params.verificationId) {\n            obj.verificationId = this.params.verificationId;\n        }\n        return obj;\n    }\n    /** Generates a phone credential based on a plain object or a JSON string. */\n    static fromJSON(json) {\n        if (typeof json === 'string') {\n            json = JSON.parse(json);\n        }\n        const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;\n        if (!verificationCode &&\n            !verificationId &&\n            !phoneNumber &&\n            !temporaryProof) {\n            return null;\n        }\n        return new PhoneAuthCredential({\n            verificationId,\n            verificationCode,\n            phoneNumber,\n            temporaryProof\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Maps the mode string in action code URL to Action Code Info operation.\n *\n * @param mode\n */\nfunction parseMode(mode) {\n    switch (mode) {\n        case 'recoverEmail':\n            return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n        case 'resetPassword':\n            return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n        case 'signIn':\n            return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n        case 'verifyEmail':\n            return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n        case 'verifyAndChangeEmail':\n            return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n        case 'revertSecondFactorAddition':\n            return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n        default:\n            return null;\n    }\n}\n/**\n * Helper to parse FDL links\n *\n * @param url\n */\nfunction parseDeepLink(url) {\n    const link = querystringDecode(extractQuerystring(url))['link'];\n    // Double link case (automatic redirect).\n    const doubleDeepLink = link\n        ? querystringDecode(extractQuerystring(link))['deep_link_id']\n        : null;\n    // iOS custom scheme links.\n    const iOSDeepLink = querystringDecode(extractQuerystring(url))['deep_link_id'];\n    const iOSDoubleDeepLink = iOSDeepLink\n        ? querystringDecode(extractQuerystring(iOSDeepLink))['link']\n        : null;\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n/**\n * A utility class to parse email action URLs such as password reset, email verification,\n * email link sign in, etc.\n *\n * @public\n */\nclass ActionCodeURL {\n    /**\n     * @param actionLink - The link from which to extract the URL.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @internal\n     */\n    constructor(actionLink) {\n        var _a, _b, _c, _d, _e, _f;\n        const searchParams = querystringDecode(extractQuerystring(actionLink));\n        const apiKey = (_a = searchParams[\"apiKey\" /* QueryField.API_KEY */]) !== null && _a !== void 0 ? _a : null;\n        const code = (_b = searchParams[\"oobCode\" /* QueryField.CODE */]) !== null && _b !== void 0 ? _b : null;\n        const operation = parseMode((_c = searchParams[\"mode\" /* QueryField.MODE */]) !== null && _c !== void 0 ? _c : null);\n        // Validate API key, code and mode.\n        _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        this.apiKey = apiKey;\n        this.operation = operation;\n        this.code = code;\n        this.continueUrl = (_d = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */]) !== null && _d !== void 0 ? _d : null;\n        this.languageCode = (_e = searchParams[\"lang\" /* QueryField.LANGUAGE_CODE */]) !== null && _e !== void 0 ? _e : null;\n        this.tenantId = (_f = searchParams[\"tenantId\" /* QueryField.TENANT_ID */]) !== null && _f !== void 0 ? _f : null;\n    }\n    /**\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n     * otherwise returns null.\n     *\n     * @param link  - The email action link string.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @public\n     */\n    static parseLink(link) {\n        const actionLink = parseDeepLink(link);\n        try {\n            return new ActionCodeURL(actionLink);\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n}\n/**\n * Parses the email action link string and returns an {@link ActionCodeURL} if\n * the link is valid, otherwise returns null.\n *\n * @public\n */\nfunction parseActionCodeURL(link) {\n    return ActionCodeURL.parseLink(link);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating {@link EmailAuthCredential}.\n *\n * @public\n */\nclass EmailAuthProvider {\n    constructor() {\n        /**\n         * Always set to {@link ProviderId}.PASSWORD, even for email link.\n         */\n        this.providerId = EmailAuthProvider.PROVIDER_ID;\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and password.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credential(email, password);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n     * ```\n     *\n     * @param email - Email address.\n     * @param password - User account password.\n     * @returns The auth provider credential.\n     */\n    static credential(email, password) {\n        return EmailAuthCredential._fromEmailAndPassword(email, password);\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n     * email link operation.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * await sendSignInLinkToEmail(auth, email);\n     * // Obtain emailLink from user.\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n     * ```\n     *\n     * @param auth - The {@link Auth} instance used to verify the link.\n     * @param email - Email address.\n     * @param emailLink - Sign-in email link.\n     * @returns - The auth provider credential.\n     */\n    static credentialWithLink(email, emailLink) {\n        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n        _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n    }\n}\n/**\n * Always set to {@link ProviderId}.PASSWORD, even for email link.\n */\nEmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n/**\n * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n */\nEmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n/**\n * Always set to {@link SignInMethod}.EMAIL_LINK.\n */\nEmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\n *\n * This class is not meant to be instantiated directly.\n *\n * @public\n */\nclass FederatedAuthProvider {\n    /**\n     * Constructor for generic OAuth providers.\n     *\n     * @param providerId - Provider for which credentials should be generated.\n     */\n    constructor(providerId) {\n        this.providerId = providerId;\n        /** @internal */\n        this.defaultLanguageCode = null;\n        /** @internal */\n        this.customParameters = {};\n    }\n    /**\n     * Set the language gode.\n     *\n     * @param languageCode - language code\n     */\n    setDefaultLanguage(languageCode) {\n        this.defaultLanguageCode = languageCode;\n    }\n    /**\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n     * operations.\n     *\n     * @remarks\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n     *\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n     */\n    setCustomParameters(customOAuthParameters) {\n        this.customParameters = customOAuthParameters;\n        return this;\n    }\n    /**\n     * Retrieve the current list of {@link CustomParameters}.\n     */\n    getCustomParameters() {\n        return this.customParameters;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Common code to all OAuth providers. This is separate from the\n * {@link OAuthProvider} so that child providers (like\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n * Instead, they rely on a static `credential` method.\n */\nclass BaseOAuthProvider extends FederatedAuthProvider {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.scopes = [];\n    }\n    /**\n     * Add an OAuth scope to the credential.\n     *\n     * @param scope - Provider OAuth scope to add.\n     */\n    addScope(scope) {\n        // If not already added, add scope to list.\n        if (!this.scopes.includes(scope)) {\n            this.scopes.push(scope);\n        }\n        return this;\n    }\n    /**\n     * Retrieve the current list of OAuth scopes.\n     */\n    getScopes() {\n        return [...this.scopes];\n    }\n}\n/**\n * Provider for generating generic {@link OAuthCredential}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new OAuthProvider('google.com');\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a OAuth Access Token for the provider.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new OAuthProvider('google.com');\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a OAuth Access Token for the provider.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nclass OAuthProvider extends BaseOAuthProvider {\n    /**\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\n        _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        return OAuthCredential._fromParams(obj);\n    }\n    /**\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n     *\n     * @remarks\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n     * the raw nonce must match the nonce field in the ID token.\n     *\n     * @example\n     * ```javascript\n     * // `googleUser` from the onsuccess Google Sign In callback.\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\n     * const provider = new OAuthProvider('google.com');\n     * const credential = provider.credential({\n     *   idToken: googleUser.getAuthResponse().id_token,\n     * });\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param params - Either the options object containing the ID token, access token and raw nonce\n     * or the ID token string.\n     */\n    credential(params) {\n        return this._credential(Object.assign(Object.assign({}, params), { nonce: params.rawNonce }));\n    }\n    /** An internal credential method that accepts more permissive options */\n    _credential(params) {\n        _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        // For OAuthCredential, sign in method is same as providerId.\n        return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), { providerId: this.providerId, signInMethod: this.providerId }));\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n        return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n        return OAuthProvider.oauthCredentialFromTaggedObject((error.customData || {}));\n    }\n    static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n        if (!tokenResponse) {\n            return null;\n        }\n        const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;\n        if (!oauthAccessToken &&\n            !oauthTokenSecret &&\n            !oauthIdToken &&\n            !pendingToken) {\n            return null;\n        }\n        if (!providerId) {\n            return null;\n        }\n        try {\n            return new OAuthProvider(providerId)._credential({\n                idToken: oauthIdToken,\n                accessToken: oauthAccessToken,\n                nonce,\n                pendingToken\n            });\n        }\n        catch (e) {\n            return null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('user_birthday');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * provider.addScope('user_birthday');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = FacebookAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nclass FacebookAuthProvider extends BaseOAuthProvider {\n    constructor() {\n        super(\"facebook.com\" /* ProviderId.FACEBOOK */);\n    }\n    /**\n     * Creates a credential for Facebook.\n     *\n     * @example\n     * ```javascript\n     * // `event` from the Facebook auth.authResponseChange callback.\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param accessToken - Facebook access token.\n     */\n    static credential(accessToken) {\n        return OAuthCredential._fromParams({\n            providerId: FacebookAuthProvider.PROVIDER_ID,\n            signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n            accessToken\n        });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n        return FacebookAuthProvider.credentialFromTaggedObject((error.customData || {}));\n    }\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n            return null;\n        }\n        if (!tokenResponse.oauthAccessToken) {\n            return null;\n        }\n        try {\n            return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n}\n/** Always set to {@link SignInMethod}.FACEBOOK. */\nFacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n/** Always set to {@link ProviderId}.FACEBOOK. */\nFacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GoogleAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Google Access Token.\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GoogleAuthProvider();\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Google Access Token.\n * const credential = GoogleAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nclass GoogleAuthProvider extends BaseOAuthProvider {\n    constructor() {\n        super(\"google.com\" /* ProviderId.GOOGLE */);\n        this.addScope('profile');\n    }\n    /**\n     * Creates a credential for Google. At least one of ID token and access token is required.\n     *\n     * @example\n     * ```javascript\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param idToken - Google ID token.\n     * @param accessToken - Google access token.\n     */\n    static credential(idToken, accessToken) {\n        return OAuthCredential._fromParams({\n            providerId: GoogleAuthProvider.PROVIDER_ID,\n            signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n            idToken,\n            accessToken\n        });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n        return GoogleAuthProvider.credentialFromTaggedObject((error.customData || {}));\n    }\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n        if (!tokenResponse) {\n            return null;\n        }\n        const { oauthIdToken, oauthAccessToken } = tokenResponse;\n        if (!oauthIdToken && !oauthAccessToken) {\n            // This could be an oauth 1 credential or a phone credential\n            return null;\n        }\n        try {\n            return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n}\n/** Always set to {@link SignInMethod}.GOOGLE. */\nGoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n/** Always set to {@link ProviderId}.GOOGLE. */\nGoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n *\n * @remarks\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n * the {@link signInWithPopup} handler:\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GithubAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('repo');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a GitHub Access Token.\n *   const credential = GithubAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GithubAuthProvider();\n * provider.addScope('repo');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a GitHub Access Token.\n * const credential = GithubAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nclass GithubAuthProvider extends BaseOAuthProvider {\n    constructor() {\n        super(\"github.com\" /* ProviderId.GITHUB */);\n    }\n    /**\n     * Creates a credential for GitHub.\n     *\n     * @param accessToken - GitHub access token.\n     */\n    static credential(accessToken) {\n        return OAuthCredential._fromParams({\n            providerId: GithubAuthProvider.PROVIDER_ID,\n            signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n            accessToken\n        });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n        return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n        return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));\n    }\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n            return null;\n        }\n        if (!tokenResponse.oauthAccessToken) {\n            return null;\n        }\n        try {\n            return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n}\n/** Always set to {@link SignInMethod}.GITHUB. */\nGithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n/** Always set to {@link ProviderId}.GITHUB. */\nGithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst IDP_REQUEST_URI = 'http://localhost';\n/**\n * @public\n */\nclass SAMLAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(providerId, pendingToken) {\n        super(providerId, providerId);\n        this.pendingToken = pendingToken;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n        const request = this.buildRequest();\n        return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n        const request = this.buildRequest();\n        request.idToken = idToken;\n        return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n        const request = this.buildRequest();\n        request.autoCreate = false;\n        return signInWithIdp(auth, request);\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n        return {\n            signInMethod: this.signInMethod,\n            providerId: this.providerId,\n            pendingToken: this.pendingToken\n        };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\n        const { providerId, signInMethod, pendingToken } = obj;\n        if (!providerId ||\n            !signInMethod ||\n            !pendingToken ||\n            providerId !== signInMethod) {\n            return null;\n        }\n        return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    /**\n     * Helper static method to avoid exposing the constructor to end users.\n     *\n     * @internal\n     */\n    static _create(providerId, pendingToken) {\n        return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    buildRequest() {\n        return {\n            requestUri: IDP_REQUEST_URI,\n            returnSecureToken: true,\n            pendingToken: this.pendingToken\n        };\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SAML_PROVIDER_PREFIX = 'saml.';\n/**\n * An {@link AuthProvider} for SAML.\n *\n * @public\n */\nclass SAMLAuthProvider extends FederatedAuthProvider {\n    /**\n     * Constructor. The providerId must start with \"saml.\"\n     * @param providerId - SAML provider ID.\n     */\n    constructor(providerId) {\n        _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        super(providerId);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n     * successful SAML flow completes.\n     *\n     * @remarks\n     *\n     * For example, to get an {@link AuthCredential}, you could write the\n     * following code:\n     *\n     * ```js\n     * const userCredential = await signInWithPopup(auth, samlProvider);\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n     * ```\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n        return SAMLAuthProvider.samlCredentialFromTaggedObject((error.customData || {}));\n    }\n    /**\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n        const credential = SAMLAuthCredential.fromJSON(json);\n        _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        return credential;\n    }\n    static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n        if (!tokenResponse) {\n            return null;\n        }\n        const { pendingToken, providerId } = tokenResponse;\n        if (!pendingToken || !providerId) {\n            return null;\n        }\n        try {\n            return SAMLAuthCredential._create(providerId, pendingToken);\n        }\n        catch (e) {\n            return null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new TwitterAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Twitter Access Token and Secret.\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n *   const secret = credential.secret;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new TwitterAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Twitter Access Token and Secret.\n * const credential = TwitterAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * const secret = credential.secret;\n * ```\n *\n * @public\n */\nclass TwitterAuthProvider extends BaseOAuthProvider {\n    constructor() {\n        super(\"twitter.com\" /* ProviderId.TWITTER */);\n    }\n    /**\n     * Creates a credential for Twitter.\n     *\n     * @param token - Twitter access token.\n     * @param secret - Twitter secret.\n     */\n    static credential(token, secret) {\n        return OAuthCredential._fromParams({\n            providerId: TwitterAuthProvider.PROVIDER_ID,\n            signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n            oauthToken: token,\n            oauthTokenSecret: secret\n        });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n        return TwitterAuthProvider.credentialFromTaggedObject((error.customData || {}));\n    }\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n        if (!tokenResponse) {\n            return null;\n        }\n        const { oauthAccessToken, oauthTokenSecret } = tokenResponse;\n        if (!oauthAccessToken || !oauthTokenSecret) {\n            return null;\n        }\n        try {\n            return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n}\n/** Always set to {@link SignInMethod}.TWITTER. */\nTwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n/** Always set to {@link ProviderId}.TWITTER. */\nTwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function signUp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass UserCredentialImpl {\n    constructor(params) {\n        this.user = params.user;\n        this.providerId = params.providerId;\n        this._tokenResponse = params._tokenResponse;\n        this.operationType = params.operationType;\n    }\n    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\n        const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n        const providerId = providerIdForResponse(idTokenResponse);\n        const userCred = new UserCredentialImpl({\n            user,\n            providerId,\n            _tokenResponse: idTokenResponse,\n            operationType\n        });\n        return userCred;\n    }\n    static async _forOperation(user, operationType, response) {\n        await user._updateTokensIfNecessary(response, /* reload */ true);\n        const providerId = providerIdForResponse(response);\n        return new UserCredentialImpl({\n            user,\n            providerId,\n            _tokenResponse: response,\n            operationType\n        });\n    }\n}\nfunction providerIdForResponse(response) {\n    if (response.providerId) {\n        return response.providerId;\n    }\n    if ('phoneNumber' in response) {\n        return \"phone\" /* ProviderId.PHONE */;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Asynchronously signs in as an anonymous user.\n *\n * @remarks\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n * new anonymous user identity will be created and returned.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nasync function signInAnonymously(auth) {\n    var _a;\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    await authInternal._initializationPromise;\n    if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {\n        // If an anonymous user is already signed in, no need to sign them in again.\n        return new UserCredentialImpl({\n            user: authInternal.currentUser,\n            providerId: null,\n            operationType: \"signIn\" /* OperationType.SIGN_IN */\n        });\n    }\n    const response = await signUp(authInternal, {\n        returnSecureToken: true\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MultiFactorError extends FirebaseError {\n    constructor(auth, error, operationType, user) {\n        var _a;\n        super(error.code, error.message);\n        this.operationType = operationType;\n        this.user = user;\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, MultiFactorError.prototype);\n        this.customData = {\n            appName: auth.name,\n            tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,\n            _serverResponse: error.customData._serverResponse,\n            operationType\n        };\n    }\n    static _fromErrorAndOperation(auth, error, operationType, user) {\n        return new MultiFactorError(auth, error, operationType, user);\n    }\n}\nfunction _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n    const idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */\n        ? credential._getReauthenticationResolver(auth)\n        : credential._getIdTokenResponse(auth);\n    return idTokenProvider.catch(error => {\n        if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\n            throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n        }\n        throw error;\n    });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Takes a set of UserInfo provider data and converts it to a set of names\n */\nfunction providerDataAsNames(providerData) {\n    return new Set(providerData\n        .map(({ providerId }) => providerId)\n        .filter(pid => !!pid));\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unlinks a provider from a user account.\n *\n * @param user - The user.\n * @param providerId - The provider to unlink.\n *\n * @public\n */\nasync function unlink(user, providerId) {\n    const userInternal = getModularInstance(user);\n    await _assertLinkedStatus(true, userInternal, providerId);\n    const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\n        idToken: await userInternal.getIdToken(),\n        deleteProvider: [providerId]\n    });\n    const providersLeft = providerDataAsNames(providerUserInfo || []);\n    userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\n    if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n        userInternal.phoneNumber = null;\n    }\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    return userInternal;\n}\nasync function _link$1(user, credential, bypassAuthState = false) {\n    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\n    return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\n}\nasync function _assertLinkedStatus(expected, user, provider) {\n    await _reloadWithoutSaving(user);\n    const providerIds = providerDataAsNames(user.providerData);\n    const code = expected === false\n        ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */\n        : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\n    _assert(providerIds.has(provider) === expected, user.auth, code);\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function _reauthenticate(user, credential, bypassAuthState = false) {\n    const { auth } = user;\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\n    try {\n        const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n        _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        const parsed = _parseToken(response.idToken);\n        _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        const { sub: localId } = parsed;\n        _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n        return UserCredentialImpl._forOperation(user, operationType, response);\n    }\n    catch (e) {\n        // Convert user deleted error into user mismatch\n        if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\n            _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n        }\n        throw e;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function _signInWithCredential(auth, credential, bypassAuthState = false) {\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"signIn\" /* OperationType.SIGN_IN */;\n    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n    if (!bypassAuthState) {\n        await auth._updateCurrentUser(userCredential.user);\n    }\n    return userCredential;\n}\n/**\n * Asynchronously signs in with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param credential - The auth credential.\n *\n * @public\n */\nasync function signInWithCredential(auth, credential) {\n    return _signInWithCredential(_castAuth(auth), credential);\n}\n/**\n * Links the user account with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nasync function linkWithCredential(user, credential) {\n    const userInternal = getModularInstance(user);\n    await _assertLinkedStatus(false, userInternal, credential.providerId);\n    return _link$1(userInternal, credential);\n}\n/**\n * Re-authenticates a user using a fresh credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n * or a `TOKEN_EXPIRED` error.\n *\n * This method is not supported on any {@link User} signed in by {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nasync function reauthenticateWithCredential(user, credential) {\n    return _reauthenticate(getModularInstance(user), credential);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function signInWithCustomToken$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Asynchronously signs in using a custom token.\n *\n * @remarks\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n * be generated by an auth backend using the\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n *\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param customToken - The custom token to sign in with.\n *\n * @public\n */\nasync function signInWithCustomToken(auth, customToken) {\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const response = await signInWithCustomToken$1(authInternal, {\n        token: customToken,\n        returnSecureToken: true\n    });\n    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(cred.user);\n    return cred;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MultiFactorInfoImpl {\n    constructor(factorId, response) {\n        this.factorId = factorId;\n        this.uid = response.mfaEnrollmentId;\n        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n        this.displayName = response.displayName;\n    }\n    static _fromServerResponse(auth, enrollment) {\n        if ('phoneInfo' in enrollment) {\n            return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n        }\n        else if ('totpInfo' in enrollment) {\n            return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n        }\n        return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n}\nclass PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n        super(\"phone\" /* FactorId.PHONE */, response);\n        this.phoneNumber = response.phoneInfo;\n    }\n    static _fromServerResponse(_auth, enrollment) {\n        return new PhoneMultiFactorInfoImpl(enrollment);\n    }\n}\nclass TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n        super(\"totp\" /* FactorId.TOTP */, response);\n    }\n    static _fromServerResponse(_auth, enrollment) {\n        return new TotpMultiFactorInfoImpl(enrollment);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n    var _a;\n    _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||\n        actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n    _assert(typeof actionCodeSettings.linkDomain === 'undefined' ||\n        actionCodeSettings.linkDomain.length > 0, auth, \"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */);\n    request.continueUrl = actionCodeSettings.url;\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n    request.linkDomain = actionCodeSettings.linkDomain;\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n    if (actionCodeSettings.iOS) {\n        _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n        request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n    }\n    if (actionCodeSettings.android) {\n        _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n        request.androidInstallApp = actionCodeSettings.android.installApp;\n        request.androidMinimumVersionCode =\n            actionCodeSettings.android.minimumVersion;\n        request.androidPackageName = actionCodeSettings.android.packageName;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Updates the password policy cached in the {@link Auth} instance if a policy is already\n * cached for the project or tenant.\n *\n * @remarks\n * We only fetch the password policy if the password did not meet policy requirements and\n * there is an existing policy cached. A developer must call validatePassword at least\n * once for the cache to be automatically updated.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @private\n */\nasync function recachePasswordPolicy(auth) {\n    const authInternal = _castAuth(auth);\n    if (authInternal._getPasswordPolicyInternal()) {\n        await authInternal._updatePasswordPolicy();\n    }\n}\n/**\n * Sends a password reset email to the given email address. This method does not throw an error when\n * there's no user account with the given email address and\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled.\n *\n * @remarks\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n * the email sent to the user, along with the new password specified by the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain code from user.\n * await confirmPasswordReset('user@example.com', code);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nasync function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n        requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n        email,\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n    }\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n}\n/**\n * Completes the password reset process, given a confirmation code and new password.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A confirmation code sent to the user.\n * @param newPassword - The new password.\n *\n * @public\n */\nasync function confirmPasswordReset(auth, oobCode, newPassword) {\n    await resetPassword(getModularInstance(auth), {\n        oobCode,\n        newPassword\n    })\n        .catch(async (error) => {\n        if (error.code ===\n            `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n            void recachePasswordPolicy(auth);\n        }\n        throw error;\n    });\n    // Do not return the email.\n}\n/**\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nasync function applyActionCode(auth, oobCode) {\n    await applyActionCode$1(getModularInstance(auth), { oobCode });\n}\n/**\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @returns metadata about the code.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nasync function checkActionCode(auth, oobCode) {\n    const authModular = getModularInstance(auth);\n    const response = await resetPassword(authModular, { oobCode });\n    // Email could be empty only if the request type is EMAIL_SIGNIN or\n    // VERIFY_AND_CHANGE_EMAIL.\n    // New email should not be empty if the request type is\n    // VERIFY_AND_CHANGE_EMAIL.\n    // Multi-factor info could not be empty if the request type is\n    // REVERT_SECOND_FACTOR_ADDITION.\n    const operation = response.requestType;\n    _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    switch (operation) {\n        case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\n            break;\n        case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\n            _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            break;\n        case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\n            _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        // fall through\n        default:\n            _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n    // The multi-factor info for revert second factor addition\n    let multiFactorInfo = null;\n    if (response.mfaInfo) {\n        multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n    }\n    return {\n        data: {\n            email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */\n                ? response.newEmail\n                : response.email) || null,\n            previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */\n                ? response.email\n                : response.newEmail) || null,\n            multiFactorInfo\n        },\n        operation\n    };\n}\n/**\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n *\n * @returns the user's email address if valid.\n *\n * @param auth - The {@link Auth} instance.\n * @param code - A verification code sent to the user.\n *\n * @public\n */\nasync function verifyPasswordResetCode(auth, code) {\n    const { data } = await checkActionCode(getModularInstance(auth), code);\n    // Email should always be present since a code was sent to it\n    return data.email;\n}\n/**\n * Creates a new user account associated with the specified email address and password.\n *\n * @remarks\n * On successful creation of the user account, this user will also be signed in to your application.\n *\n * User account creation can fail if the account already exists or the password is invalid.\n *\n * This method is not supported on {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * Note: The email address acts as a unique identifier for the user and enables an email-based\n * password reset. This function will create a new user account and set the initial user password.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param password - The user's chosen password.\n *\n * @public\n */\nasync function createUserWithEmailAndPassword(auth, email, password) {\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const request = {\n        returnSecureToken: true,\n        email,\n        password,\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    const signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n    const response = await signUpResponse.catch(error => {\n        if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n            void recachePasswordPolicy(auth);\n        }\n        throw error;\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n}\n/**\n * Asynchronously signs in using an email and password.\n *\n * @remarks\n * Fails with an error if the email address and password do not match. When\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\n * email/password.\n *\n * This method is not supported on {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * Note: The user's password is NOT the password used to access the user's email account. The\n * email address serves as a unique identifier for the user, and the password is used to access\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n *\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The users email address.\n * @param password - The users password.\n *\n * @public\n */\nfunction signInWithEmailAndPassword(auth, email, password) {\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    return signInWithCredential(getModularInstance(auth), EmailAuthProvider.credential(email, password)).catch(async (error) => {\n        if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n            void recachePasswordPolicy(auth);\n        }\n        throw error;\n    });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sends a sign-in email link to the user with the specified email.\n *\n * @remarks\n * The sign-in operation has to always be completed in the app unlike other out of band email\n * actions (password reset and email verifications). This is because, at the end of the flow,\n * the user is expected to be signed in and their Auth state persisted within the app.\n *\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n * address and the email link supplied in the email sent to the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @param authInternal - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nasync function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n        requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n        email,\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    function setActionCodeSettings(request, actionCodeSettings) {\n        _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        if (actionCodeSettings) {\n            _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n        }\n    }\n    setActionCodeSettings(request, actionCodeSettings);\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n}\n/**\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n *\n * @param auth - The {@link Auth} instance.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nfunction isSignInWithEmailLink(auth, emailLink) {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n}\n/**\n * Asynchronously signs in using an email and sign-in email link.\n *\n * @remarks\n * If no link is passed, the link is inferred from the current URL.\n *\n * Fails with an error if the email address is invalid or OTP in email link expires.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nasync function signInWithEmailLink(auth, email, emailLink) {\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authModular = getModularInstance(auth);\n    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n    // Check if the tenant ID in the email link matches the tenant ID on Auth\n    // instance.\n    _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n    return signInWithCredential(authModular, credential);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function createAuthUri(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Gets the list of possible sign in methods for the given email address. This method returns an\n * empty list when\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled, irrespective of the number of authentication methods available for the given email.\n *\n * @remarks\n * This is useful to differentiate methods of sign-in for the same provider, eg.\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\n * {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n *\n * Deprecated. Migrating off of this method is recommended as a security best-practice.\n * Learn more in the Identity Platform documentation for\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\n * @public\n */\nasync function fetchSignInMethodsForEmail(auth, email) {\n    // createAuthUri returns an error if continue URI is not http or https.\n    // For environments like Cordova, Chrome extensions, native frameworks, file\n    // systems, etc, use http://localhost as continue URL.\n    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n    const request = {\n        identifier: email,\n        continueUri\n    };\n    const { signinMethods } = await createAuthUri(getModularInstance(auth), request);\n    return signinMethods || [];\n}\n/**\n * Sends a verification email to a user.\n *\n * @remarks\n * The verification process is completed by calling {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendEmailVerification(user, actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nasync function sendEmailVerification(user, actionCodeSettings) {\n    const userInternal = getModularInstance(user);\n    const idToken = await user.getIdToken();\n    const request = {\n        requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n        idToken\n    };\n    if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const { email } = await sendEmailVerification$1(userInternal.auth, request);\n    if (email !== user.email) {\n        await user.reload();\n    }\n}\n/**\n * Sends a verification email to a new email address.\n *\n * @remarks\n * The user's email will be updated to the new one after being verified.\n *\n * If you have a custom email action handler, you can complete the verification process by calling\n * {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param newEmail - The new email address to be verified before update.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nasync function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n    const userInternal = getModularInstance(user);\n    const idToken = await user.getIdToken();\n    const request = {\n        requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n        idToken,\n        newEmail\n    };\n    if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const { email } = await verifyAndChangeEmail(userInternal.auth, request);\n    if (email !== user.email) {\n        // If the local copy of the email on user is outdated, reload the\n        // user.\n        await user.reload();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function updateProfile$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Updates a user's profile data.\n *\n * @param user - The user.\n * @param profile - The profile's `displayName` and `photoURL` to update.\n *\n * @public\n */\nasync function updateProfile(user, { displayName, photoURL: photoUrl }) {\n    if (displayName === undefined && photoUrl === undefined) {\n        return;\n    }\n    const userInternal = getModularInstance(user);\n    const idToken = await userInternal.getIdToken();\n    const profileRequest = {\n        idToken,\n        displayName,\n        photoUrl,\n        returnSecureToken: true\n    };\n    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n    userInternal.displayName = response.displayName || null;\n    userInternal.photoURL = response.photoUrl || null;\n    // Update the password provider as well\n    const passwordProvider = userInternal.providerData.find(({ providerId }) => providerId === \"password\" /* ProviderId.PASSWORD */);\n    if (passwordProvider) {\n        passwordProvider.displayName = userInternal.displayName;\n        passwordProvider.photoURL = userInternal.photoURL;\n    }\n    await userInternal._updateTokensIfNecessary(response);\n}\n/**\n * Updates the user's email address.\n *\n * @remarks\n * An email will be sent to the original email address (if it was set) that allows to revoke the\n * email address change, in order to protect them from account hijacking.\n *\n * This method is not supported on any {@link User} signed in by {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newEmail - The new email address.\n *\n * Throws \"auth/operation-not-allowed\" error when\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled.\n * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n *\n * @public\n */\nfunction updateEmail(user, newEmail) {\n    const userInternal = getModularInstance(user);\n    if (_isFirebaseServerApp(userInternal.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    return updateEmailOrPassword(userInternal, newEmail, null);\n}\n/**\n * Updates the user's password.\n *\n * @remarks\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newPassword - The new password.\n *\n * @public\n */\nfunction updatePassword(user, newPassword) {\n    return updateEmailOrPassword(getModularInstance(user), null, newPassword);\n}\nasync function updateEmailOrPassword(user, email, password) {\n    const { auth } = user;\n    const idToken = await user.getIdToken();\n    const request = {\n        idToken,\n        returnSecureToken: true\n    };\n    if (email) {\n        request.email = email;\n    }\n    if (password) {\n        request.password = password;\n    }\n    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n    await user._updateTokensIfNecessary(response, /* reload */ true);\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Parse the `AdditionalUserInfo` from the ID token response.\n *\n */\nfunction _fromIdTokenResponse(idTokenResponse) {\n    var _a, _b;\n    if (!idTokenResponse) {\n        return null;\n    }\n    const { providerId } = idTokenResponse;\n    const profile = idTokenResponse.rawUserInfo\n        ? JSON.parse(idTokenResponse.rawUserInfo)\n        : {};\n    const isNewUser = idTokenResponse.isNewUser ||\n        idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n    if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {\n        const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];\n        if (signInProvider) {\n            const filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ &&\n                signInProvider !== \"custom\" /* ProviderId.CUSTOM */\n                ? signInProvider\n                : null;\n            // Uses generic class in accordance with the legacy SDK.\n            return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n        }\n    }\n    if (!providerId) {\n        return null;\n    }\n    switch (providerId) {\n        case \"facebook.com\" /* ProviderId.FACEBOOK */:\n            return new FacebookAdditionalUserInfo(isNewUser, profile);\n        case \"github.com\" /* ProviderId.GITHUB */:\n            return new GithubAdditionalUserInfo(isNewUser, profile);\n        case \"google.com\" /* ProviderId.GOOGLE */:\n            return new GoogleAdditionalUserInfo(isNewUser, profile);\n        case \"twitter.com\" /* ProviderId.TWITTER */:\n            return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n        case \"custom\" /* ProviderId.CUSTOM */:\n        case \"anonymous\" /* ProviderId.ANONYMOUS */:\n            return new GenericAdditionalUserInfo(isNewUser, null);\n        default:\n            return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n    }\n}\nclass GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile = {}) {\n        this.isNewUser = isNewUser;\n        this.providerId = providerId;\n        this.profile = profile;\n    }\n}\nclass FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile, username) {\n        super(isNewUser, providerId, profile);\n        this.username = username;\n    }\n}\nclass FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n        super(isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile);\n    }\n}\nclass GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile) {\n        super(isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null);\n    }\n}\nclass GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n        super(isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile);\n    }\n}\nclass TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile, screenName) {\n        super(isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName);\n    }\n}\n/**\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n *\n * @param userCredential - The user credential.\n *\n * @public\n */\nfunction getAdditionalUserInfo(userCredential) {\n    const { user, _tokenResponse } = userCredential;\n    if (user.isAnonymous && !_tokenResponse) {\n        // Handle the special case where signInAnonymously() gets called twice.\n        // No network call is made so there's nothing to actually fill this in\n        return {\n            providerId: null,\n            isNewUser: false,\n            profile: null\n        };\n    }\n    return _fromIdTokenResponse(_tokenResponse);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Non-optional auth methods.\n/**\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\n * `Auth` session and applies this type of persistence for future sign-in requests, including\n * sign-in with redirect requests.\n *\n * @remarks\n * This makes it easy for a user signing in to specify whether their session should be\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n * that are shared by other users or have sensitive data.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * setPersistence(auth, browserSessionPersistence);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param persistence - The {@link Persistence} to use.\n * @returns A `Promise` that resolves once the persistence change has completed\n *\n * @public\n */\nfunction setPersistence(auth, persistence) {\n    return getModularInstance(auth).setPersistence(persistence);\n}\n/**\n * Loads the reCAPTCHA configuration into the `Auth` instance.\n *\n * @remarks\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n * verification flow should be triggered for each auth provider, into the\n * current Auth session.\n *\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\n * auth flows.\n *\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * initializeRecaptchaConfig(auth);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nfunction initializeRecaptchaConfig(auth) {\n    return _initializeRecaptchaConfig(auth);\n}\n/**\n * Validates the password against the password policy configured for the project or tenant.\n *\n * @remarks\n * If no tenant ID is set on the `Auth` instance, then this method will use the password\n * policy configured for the project. Otherwise, this method will use the policy configured\n * for the tenant. If a password policy has not been configured, then the default policy\n * configured for all projects will be used.\n *\n * If an auth flow fails because a submitted password does not meet the password policy\n * requirements and this method has previously been called, then this method will use the\n * most recent policy available when called again.\n *\n * @example\n * ```javascript\n * validatePassword(auth, 'some-password');\n * ```\n *\n * @param auth The {@link Auth} instance.\n * @param password The password to validate.\n *\n * @public\n */\nasync function validatePassword(auth, password) {\n    const authInternal = _castAuth(auth);\n    return authInternal.validatePassword(password);\n}\n/**\n * Adds an observer for changes to the signed-in user's ID token.\n *\n * @remarks\n * This includes sign-in, sign-out, and token refresh events.\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nfunction onIdTokenChanged(auth, nextOrObserver, error, completed) {\n    return getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);\n}\n/**\n * Adds a blocking callback that runs before an auth state change\n * sets a new user.\n *\n * @param auth - The {@link Auth} instance.\n * @param callback - callback triggered before new user value is set.\n *   If this throws, it blocks the user from being set.\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n *   callback throws, allowing you to undo any side effects.\n */\nfunction beforeAuthStateChanged(auth, callback, onAbort) {\n    return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\n * Adds an observer for changes to the user's sign-in state.\n *\n * @remarks\n * To keep the old behavior, see {@link onIdTokenChanged}.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nfunction onAuthStateChanged(auth, nextOrObserver, error, completed) {\n    return getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);\n}\n/**\n * Sets the current language to the default device/browser preference.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nfunction useDeviceLanguage(auth) {\n    getModularInstance(auth).useDeviceLanguage();\n}\n/**\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n * {@link Auth} instance.\n *\n * @remarks\n * A new instance copy of the user provided will be made and set as currentUser.\n *\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n * like other sign in methods.\n *\n * The operation fails with an error if the user to be updated belongs to a different Firebase\n * project.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param user - The new {@link User}.\n *\n * @public\n */\nfunction updateCurrentUser(auth, user) {\n    return getModularInstance(auth).updateCurrentUser(user);\n}\n/**\n * Signs out the current user.\n *\n * @remarks\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nfunction signOut(auth) {\n    return getModularInstance(auth).signOut();\n}\n/**\n * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n *\n * @param auth - The {@link Auth} instance.\n * @param token - The Apple OAuth access token.\n *\n * @public\n */\nfunction revokeAccessToken(auth, token) {\n    const authInternal = _castAuth(auth);\n    return authInternal.revokeAccessToken(token);\n}\n/**\n * Deletes and signs out the user.\n *\n * @remarks\n * Important: this is a security-sensitive operation that requires the user to have recently\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @public\n */\nasync function deleteUser(user) {\n    return getModularInstance(user).delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MultiFactorSessionImpl {\n    constructor(type, credential, user) {\n        this.type = type;\n        this.credential = credential;\n        this.user = user;\n    }\n    static _fromIdtoken(idToken, user) {\n        return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\n    }\n    static _fromMfaPendingCredential(mfaPendingCredential) {\n        return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n    }\n    toJSON() {\n        const key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */\n            ? 'idToken'\n            : 'pendingCredential';\n        return {\n            multiFactorSession: {\n                [key]: this.credential\n            }\n        };\n    }\n    static fromJSON(obj) {\n        var _a, _b;\n        if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {\n            if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {\n                return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n            }\n            else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {\n                return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n            }\n        }\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MultiFactorResolverImpl {\n    constructor(session, hints, signInResolver) {\n        this.session = session;\n        this.hints = hints;\n        this.signInResolver = signInResolver;\n    }\n    /** @internal */\n    static _fromError(authExtern, error) {\n        const auth = _castAuth(authExtern);\n        const serverResponse = error.customData._serverResponse;\n        const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n        _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n        return new MultiFactorResolverImpl(session, hints, async (assertion) => {\n            const mfaResponse = await assertion._process(auth, session);\n            // Clear out the unneeded fields from the old login response\n            delete serverResponse.mfaInfo;\n            delete serverResponse.mfaPendingCredential;\n            // Use in the new token & refresh token in the old response\n            const idTokenResponse = Object.assign(Object.assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });\n            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n            switch (error.operationType) {\n                case \"signIn\" /* OperationType.SIGN_IN */:\n                    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n                    await auth._updateCurrentUser(userCredential.user);\n                    return userCredential;\n                case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\n                    _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n                    return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n                default:\n                    _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            }\n        });\n    }\n    async resolveSignIn(assertionExtern) {\n        const assertion = assertionExtern;\n        return this.signInResolver(assertion);\n    }\n}\n/**\n * Provides a {@link MultiFactorResolver} suitable for completion of a\n * multi-factor flow.\n *\n * @param auth - The {@link Auth} instance.\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\n * reauthentication operation.\n *\n * @public\n */\nfunction getMultiFactorResolver(auth, error) {\n    var _a;\n    const authModular = getModularInstance(auth);\n    const errorInternal = error;\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction startEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction startEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction withdrawMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n}\n\nclass MultiFactorUserImpl {\n    constructor(user) {\n        this.user = user;\n        this.enrolledFactors = [];\n        user._onReload(userInfo => {\n            if (userInfo.mfaInfo) {\n                this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n            }\n        });\n    }\n    static _fromUser(user) {\n        return new MultiFactorUserImpl(user);\n    }\n    async getSession() {\n        return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);\n    }\n    async enroll(assertionExtern, displayName) {\n        const assertion = assertionExtern;\n        const session = (await this.getSession());\n        const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n        // New tokens will be issued after enrollment of the new second factors.\n        // They need to be updated on the user.\n        await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n        // The user needs to be reloaded to get the new multi-factor information\n        // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n        // will be updated.\n        return this.user.reload();\n    }\n    async unenroll(infoOrUid) {\n        const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n        const idToken = await this.user.getIdToken();\n        try {\n            const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n                idToken,\n                mfaEnrollmentId\n            }));\n            // Remove the second factor from the user's list.\n            this.enrolledFactors = this.enrolledFactors.filter(({ uid }) => uid !== mfaEnrollmentId);\n            // Depending on whether the backend decided to revoke the user's session,\n            // the tokenResponse may be empty. If the tokens were not updated (and they\n            // are now invalid), reloading the user will discover this and invalidate\n            // the user's state accordingly.\n            await this.user._updateTokensIfNecessary(idTokenResponse);\n            await this.user.reload();\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n}\nconst multiFactorUserCache = new WeakMap();\n/**\n * The {@link MultiFactorUser} corresponding to the user.\n *\n * @remarks\n * This is used to access all multi-factor properties and operations related to the user.\n *\n * @param user - The user.\n *\n * @public\n */\nfunction multiFactor(user) {\n    const userModular = getModularInstance(user);\n    if (!multiFactorUserCache.has(userModular)) {\n        multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n    }\n    return multiFactorUserCache.get(userModular);\n}\n\nconst STORAGE_AVAILABLE_KEY = '__sak';\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// There are two different browser persistence types: local and session.\n// Both have the same implementation but use a different underlying storage\n// object.\nclass BrowserPersistenceClass {\n    constructor(storageRetriever, type) {\n        this.storageRetriever = storageRetriever;\n        this.type = type;\n    }\n    _isAvailable() {\n        try {\n            if (!this.storage) {\n                return Promise.resolve(false);\n            }\n            this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n            this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n            return Promise.resolve(true);\n        }\n        catch (_a) {\n            return Promise.resolve(false);\n        }\n    }\n    _set(key, value) {\n        this.storage.setItem(key, JSON.stringify(value));\n        return Promise.resolve();\n    }\n    _get(key) {\n        const json = this.storage.getItem(key);\n        return Promise.resolve(json ? JSON.parse(json) : null);\n    }\n    _remove(key) {\n        this.storage.removeItem(key);\n        return Promise.resolve();\n    }\n    get storage() {\n        return this.storageRetriever();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The polling period in case events are not supported\nconst _POLLING_INTERVAL_MS$1 = 1000;\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\nconst IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\nclass BrowserLocalPersistence extends BrowserPersistenceClass {\n    constructor() {\n        super(() => window.localStorage, \"LOCAL\" /* PersistenceType.LOCAL */);\n        this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);\n        this.listeners = {};\n        this.localCache = {};\n        // setTimeout return value is platform specific\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.pollTimer = null;\n        // Whether to use polling instead of depending on window events\n        this.fallbackToPolling = _isMobileBrowser();\n        this._shouldAllowMigration = true;\n    }\n    forAllChangedKeys(cb) {\n        // Check all keys with listeners on them.\n        for (const key of Object.keys(this.listeners)) {\n            // Get value from localStorage.\n            const newValue = this.storage.getItem(key);\n            const oldValue = this.localCache[key];\n            // If local map value does not match, trigger listener with storage event.\n            // Differentiate this simulated event from the real storage event.\n            if (newValue !== oldValue) {\n                cb(key, oldValue, newValue);\n            }\n        }\n    }\n    onStorageEvent(event, poll = false) {\n        // Key would be null in some situations, like when localStorage is cleared\n        if (!event.key) {\n            this.forAllChangedKeys((key, _oldValue, newValue) => {\n                this.notifyListeners(key, newValue);\n            });\n            return;\n        }\n        const key = event.key;\n        // Check the mechanism how this event was detected.\n        // The first event will dictate the mechanism to be used.\n        if (poll) {\n            // Environment detects storage changes via polling.\n            // Remove storage event listener to prevent possible event duplication.\n            this.detachListener();\n        }\n        else {\n            // Environment detects storage changes via storage event listener.\n            // Remove polling listener to prevent possible event duplication.\n            this.stopPolling();\n        }\n        const triggerListeners = () => {\n            // Keep local map up to date in case storage event is triggered before\n            // poll.\n            const storedValue = this.storage.getItem(key);\n            if (!poll && this.localCache[key] === storedValue) {\n                // Real storage event which has already been detected, do nothing.\n                // This seems to trigger in some IE browsers for some reason.\n                return;\n            }\n            this.notifyListeners(key, storedValue);\n        };\n        const storedValue = this.storage.getItem(key);\n        if (_isIE10() &&\n            storedValue !== event.newValue &&\n            event.newValue !== event.oldValue) {\n            // IE 10 has this weird bug where a storage event would trigger with the\n            // correct key, oldValue and newValue but localStorage.getItem(key) does\n            // not yield the updated value until a few milliseconds. This ensures\n            // this recovers from that situation.\n            setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n        }\n        else {\n            triggerListeners();\n        }\n    }\n    notifyListeners(key, value) {\n        this.localCache[key] = value;\n        const listeners = this.listeners[key];\n        if (listeners) {\n            for (const listener of Array.from(listeners)) {\n                listener(value ? JSON.parse(value) : value);\n            }\n        }\n    }\n    startPolling() {\n        this.stopPolling();\n        this.pollTimer = setInterval(() => {\n            this.forAllChangedKeys((key, oldValue, newValue) => {\n                this.onStorageEvent(new StorageEvent('storage', {\n                    key,\n                    oldValue,\n                    newValue\n                }), \n                /* poll */ true);\n            });\n        }, _POLLING_INTERVAL_MS$1);\n    }\n    stopPolling() {\n        if (this.pollTimer) {\n            clearInterval(this.pollTimer);\n            this.pollTimer = null;\n        }\n    }\n    attachListener() {\n        window.addEventListener('storage', this.boundEventHandler);\n    }\n    detachListener() {\n        window.removeEventListener('storage', this.boundEventHandler);\n    }\n    _addListener(key, listener) {\n        if (Object.keys(this.listeners).length === 0) {\n            // Whether browser can detect storage event when it had already been pushed to the background.\n            // This may happen in some mobile browsers. A localStorage change in the foreground window\n            // will not be detected in the background window via the storage event.\n            // This was detected in iOS 7.x mobile browsers\n            if (this.fallbackToPolling) {\n                this.startPolling();\n            }\n            else {\n                this.attachListener();\n            }\n        }\n        if (!this.listeners[key]) {\n            this.listeners[key] = new Set();\n            // Populate the cache to avoid spuriously triggering on first poll.\n            this.localCache[key] = this.storage.getItem(key);\n        }\n        this.listeners[key].add(listener);\n    }\n    _removeListener(key, listener) {\n        if (this.listeners[key]) {\n            this.listeners[key].delete(listener);\n            if (this.listeners[key].size === 0) {\n                delete this.listeners[key];\n            }\n        }\n        if (Object.keys(this.listeners).length === 0) {\n            this.detachListener();\n            this.stopPolling();\n        }\n    }\n    // Update local cache on base operations:\n    async _set(key, value) {\n        await super._set(key, value);\n        this.localCache[key] = JSON.stringify(value);\n    }\n    async _get(key) {\n        const value = await super._get(key);\n        this.localCache[key] = JSON.stringify(value);\n        return value;\n    }\n    async _remove(key) {\n        await super._remove(key);\n        delete this.localCache[key];\n    }\n}\nBrowserLocalPersistence.type = 'LOCAL';\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\n * for the underlying storage.\n *\n * @public\n */\nconst browserLocalPersistence = BrowserLocalPersistence;\n\n/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst POLLING_INTERVAL_MS = 1000;\n// Pull a cookie value from document.cookie\nfunction getDocumentCookie(name) {\n    var _a, _b;\n    const escapedName = name.replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&');\n    const matcher = RegExp(`${escapedName}=([^;]+)`);\n    return (_b = (_a = document.cookie.match(matcher)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : null;\n}\n// Produce a sanitized cookie name from the persistence key\nfunction getCookieName(key) {\n    // __HOST- doesn't work in localhost https://issues.chromium.org/issues/40196122 but it has\n    // desirable security properties, so lets use a different cookie name while in dev-mode.\n    // Already checked isSecureContext in _isAvailable, so if it's http we're hitting local.\n    const isDevMode = window.location.protocol === 'http:';\n    return `${isDevMode ? '__dev_' : '__HOST-'}FIREBASE_${key.split(':')[3]}`;\n}\nclass CookiePersistence {\n    constructor() {\n        this.type = \"COOKIE\" /* PersistenceType.COOKIE */;\n        this.listenerUnsubscribes = new Map();\n    }\n    // used to get the URL to the backend to proxy to\n    _getFinalTarget(originalUrl) {\n        if (typeof window === undefined) {\n            return originalUrl;\n        }\n        const url = new URL(`${window.location.origin}/__cookies__`);\n        url.searchParams.set('finalTarget', originalUrl);\n        return url;\n    }\n    // To be a usable persistence method in a chain browserCookiePersistence ensures that\n    // prerequisites have been met, namely that we're in a secureContext, navigator and document are\n    // available and cookies are enabled. Not all UAs support these method, so fallback accordingly.\n    async _isAvailable() {\n        var _a;\n        if (typeof isSecureContext === 'boolean' && !isSecureContext) {\n            return false;\n        }\n        if (typeof navigator === 'undefined' || typeof document === 'undefined') {\n            return false;\n        }\n        return (_a = navigator.cookieEnabled) !== null && _a !== void 0 ? _a : true;\n    }\n    // Set should be a noop as we expect middleware to handle this\n    async _set(_key, _value) {\n        return;\n    }\n    // Attempt to get the cookie from cookieStore, fallback to document.cookie\n    async _get(key) {\n        if (!this._isAvailable()) {\n            return null;\n        }\n        const name = getCookieName(key);\n        if (window.cookieStore) {\n            const cookie = await window.cookieStore.get(name);\n            return cookie === null || cookie === void 0 ? void 0 : cookie.value;\n        }\n        return getDocumentCookie(name);\n    }\n    // Log out by overriding the idToken with a sentinel value of \"\"\n    async _remove(key) {\n        if (!this._isAvailable()) {\n            return;\n        }\n        // To make sure we don't hit signout over and over again, only do this operation if we need to\n        // with the logout sentinel value of \"\" this can cause race conditions. Unnecessary set-cookie\n        // headers will reduce CDN hit rates too.\n        const existingValue = await this._get(key);\n        if (!existingValue) {\n            return;\n        }\n        const name = getCookieName(key);\n        document.cookie = `${name}=;Max-Age=34560000;Partitioned;Secure;SameSite=Strict;Path=/;Priority=High`;\n        await fetch(`/__cookies__`, { method: 'DELETE' }).catch(() => undefined);\n    }\n    // Listen for cookie changes, both cookieStore and fallback to polling document.cookie\n    _addListener(key, listener) {\n        if (!this._isAvailable()) {\n            return;\n        }\n        const name = getCookieName(key);\n        if (window.cookieStore) {\n            const cb = ((event) => {\n                const changedCookie = event.changed.find(change => change.name === name);\n                if (changedCookie) {\n                    listener(changedCookie.value);\n                }\n                const deletedCookie = event.deleted.find(change => change.name === name);\n                if (deletedCookie) {\n                    listener(null);\n                }\n            });\n            const unsubscribe = () => window.cookieStore.removeEventListener('change', cb);\n            this.listenerUnsubscribes.set(listener, unsubscribe);\n            return window.cookieStore.addEventListener('change', cb);\n        }\n        let lastValue = getDocumentCookie(name);\n        const interval = setInterval(() => {\n            const currentValue = getDocumentCookie(name);\n            if (currentValue !== lastValue) {\n                listener(currentValue);\n                lastValue = currentValue;\n            }\n        }, POLLING_INTERVAL_MS);\n        const unsubscribe = () => clearInterval(interval);\n        this.listenerUnsubscribes.set(listener, unsubscribe);\n    }\n    _removeListener(_key, listener) {\n        const unsubscribe = this.listenerUnsubscribes.get(listener);\n        if (!unsubscribe) {\n            return;\n        }\n        unsubscribe();\n        this.listenerUnsubscribes.delete(listener);\n    }\n}\nCookiePersistence.type = 'COOKIE';\n/**\n * An implementation of {@link Persistence} of type `COOKIE`, for use on the client side in\n * applications leveraging hybrid rendering and middleware.\n *\n * @remarks This persistence method requires companion middleware to function, such as that provided\n * by {@link https://firebaseopensource.com/projects/firebaseextended/reactfire/ | ReactFire} for\n * NextJS.\n * @beta\n */\nconst browserCookiePersistence = CookiePersistence;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass BrowserSessionPersistence extends BrowserPersistenceClass {\n    constructor() {\n        super(() => window.sessionStorage, \"SESSION\" /* PersistenceType.SESSION */);\n    }\n    _addListener(_key, _listener) {\n        // Listeners are not supported for session storage since it cannot be shared across windows\n        return;\n    }\n    _removeListener(_key, _listener) {\n        // Listeners are not supported for session storage since it cannot be shared across windows\n        return;\n    }\n}\nBrowserSessionPersistence.type = 'SESSION';\n/**\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\n * for the underlying storage.\n *\n * @public\n */\nconst browserSessionPersistence = BrowserSessionPersistence;\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\n *\n * @param promises - Array of promises to wait on.\n */\nfunction _allSettled(promises) {\n    return Promise.all(promises.map(async (promise) => {\n        try {\n            const value = await promise;\n            return {\n                fulfilled: true,\n                value\n            };\n        }\n        catch (reason) {\n            return {\n                fulfilled: false,\n                reason\n            };\n        }\n    }));\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface class for receiving messages.\n *\n */\nclass Receiver {\n    constructor(eventTarget) {\n        this.eventTarget = eventTarget;\n        this.handlersMap = {};\n        this.boundEventHandler = this.handleEvent.bind(this);\n    }\n    /**\n     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n     *\n     * @param eventTarget - An event target (such as window or self) through which the underlying\n     * messages will be received.\n     */\n    static _getInstance(eventTarget) {\n        // The results are stored in an array since objects can't be keys for other\n        // objects. In addition, setting a unique property on an event target as a\n        // hash map key may not be allowed due to CORS restrictions.\n        const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));\n        if (existingInstance) {\n            return existingInstance;\n        }\n        const newInstance = new Receiver(eventTarget);\n        this.receivers.push(newInstance);\n        return newInstance;\n    }\n    isListeningto(eventTarget) {\n        return this.eventTarget === eventTarget;\n    }\n    /**\n     * Fans out a MessageEvent to the appropriate listeners.\n     *\n     * @remarks\n     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n     * finished processing.\n     *\n     * @param event - The MessageEvent.\n     *\n     */\n    async handleEvent(event) {\n        const messageEvent = event;\n        const { eventId, eventType, data } = messageEvent.data;\n        const handlers = this.handlersMap[eventType];\n        if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {\n            return;\n        }\n        messageEvent.ports[0].postMessage({\n            status: \"ack\" /* _Status.ACK */,\n            eventId,\n            eventType\n        });\n        const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));\n        const response = await _allSettled(promises);\n        messageEvent.ports[0].postMessage({\n            status: \"done\" /* _Status.DONE */,\n            eventId,\n            eventType,\n            response\n        });\n    }\n    /**\n     * Subscribe an event handler for a particular event.\n     *\n     * @param eventType - Event name to subscribe to.\n     * @param eventHandler - The event handler which should receive the events.\n     *\n     */\n    _subscribe(eventType, eventHandler) {\n        if (Object.keys(this.handlersMap).length === 0) {\n            this.eventTarget.addEventListener('message', this.boundEventHandler);\n        }\n        if (!this.handlersMap[eventType]) {\n            this.handlersMap[eventType] = new Set();\n        }\n        this.handlersMap[eventType].add(eventHandler);\n    }\n    /**\n     * Unsubscribe an event handler from a particular event.\n     *\n     * @param eventType - Event name to unsubscribe from.\n     * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.\n     *\n     */\n    _unsubscribe(eventType, eventHandler) {\n        if (this.handlersMap[eventType] && eventHandler) {\n            this.handlersMap[eventType].delete(eventHandler);\n        }\n        if (!eventHandler || this.handlersMap[eventType].size === 0) {\n            delete this.handlersMap[eventType];\n        }\n        if (Object.keys(this.handlersMap).length === 0) {\n            this.eventTarget.removeEventListener('message', this.boundEventHandler);\n        }\n    }\n}\nReceiver.receivers = [];\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _generateEventId(prefix = '', digits = 10) {\n    let random = '';\n    for (let i = 0; i < digits; i++) {\n        random += Math.floor(Math.random() * 10);\n    }\n    return prefix + random;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface for sending messages and waiting for a completion response.\n *\n */\nclass Sender {\n    constructor(target) {\n        this.target = target;\n        this.handlers = new Set();\n    }\n    /**\n     * Unsubscribe the handler and remove it from our tracking Set.\n     *\n     * @param handler - The handler to unsubscribe.\n     */\n    removeMessageHandler(handler) {\n        if (handler.messageChannel) {\n            handler.messageChannel.port1.removeEventListener('message', handler.onMessage);\n            handler.messageChannel.port1.close();\n        }\n        this.handlers.delete(handler);\n    }\n    /**\n     * Send a message to the Receiver located at {@link target}.\n     *\n     * @remarks\n     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n     * receiver has had a chance to fully process the event.\n     *\n     * @param eventType - Type of event to send.\n     * @param data - The payload of the event.\n     * @param timeout - Timeout for waiting on an ACK from the receiver.\n     *\n     * @returns An array of settled promises from all the handlers that were listening on the receiver.\n     */\n    async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */) {\n        const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\n        if (!messageChannel) {\n            throw new Error(\"connection_unavailable\" /* _MessageError.CONNECTION_UNAVAILABLE */);\n        }\n        // Node timers and browser timers return fundamentally different types.\n        // We don't actually care what the value is but TS won't accept unknown and\n        // we can't cast properly in both environments.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let completionTimer;\n        let handler;\n        return new Promise((resolve, reject) => {\n            const eventId = _generateEventId('', 20);\n            messageChannel.port1.start();\n            const ackTimer = setTimeout(() => {\n                reject(new Error(\"unsupported_event\" /* _MessageError.UNSUPPORTED_EVENT */));\n            }, timeout);\n            handler = {\n                messageChannel,\n                onMessage(event) {\n                    const messageEvent = event;\n                    if (messageEvent.data.eventId !== eventId) {\n                        return;\n                    }\n                    switch (messageEvent.data.status) {\n                        case \"ack\" /* _Status.ACK */:\n                            // The receiver should ACK first.\n                            clearTimeout(ackTimer);\n                            completionTimer = setTimeout(() => {\n                                reject(new Error(\"timeout\" /* _MessageError.TIMEOUT */));\n                            }, 3000 /* _TimeoutDuration.COMPLETION */);\n                            break;\n                        case \"done\" /* _Status.DONE */:\n                            // Once the receiver's handlers are finished we will get the results.\n                            clearTimeout(completionTimer);\n                            resolve(messageEvent.data.response);\n                            break;\n                        default:\n                            clearTimeout(ackTimer);\n                            clearTimeout(completionTimer);\n                            reject(new Error(\"invalid_response\" /* _MessageError.INVALID_RESPONSE */));\n                            break;\n                    }\n                }\n            };\n            this.handlers.add(handler);\n            messageChannel.port1.addEventListener('message', handler.onMessage);\n            this.target.postMessage({\n                eventType,\n                eventId,\n                data\n            }, [messageChannel.port2]);\n        }).finally(() => {\n            if (handler) {\n                this.removeMessageHandler(handler);\n            }\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Lazy accessor for window, since the compat layer won't tree shake this out,\n * we need to make sure not to mess with window unless we have to\n */\nfunction _window() {\n    return window;\n}\nfunction _setWindowLocation(url) {\n    _window().location.href = url;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction _isWorker() {\n    return (typeof _window()['WorkerGlobalScope'] !== 'undefined' &&\n        typeof _window()['importScripts'] === 'function');\n}\nasync function _getActiveServiceWorker() {\n    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {\n        return null;\n    }\n    try {\n        const registration = await navigator.serviceWorker.ready;\n        return registration.active;\n    }\n    catch (_a) {\n        return null;\n    }\n}\nfunction _getServiceWorkerController() {\n    var _a;\n    return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;\n}\nfunction _getWorkerGlobalScope() {\n    return _isWorker() ? self : null;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DB_NAME = 'firebaseLocalStorageDb';\nconst DB_VERSION = 1;\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\nconst DB_DATA_KEYPATH = 'fbase_key';\n/**\n * Promise wrapper for IDBRequest\n *\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\n *\n */\nclass DBPromise {\n    constructor(request) {\n        this.request = request;\n    }\n    toPromise() {\n        return new Promise((resolve, reject) => {\n            this.request.addEventListener('success', () => {\n                resolve(this.request.result);\n            });\n            this.request.addEventListener('error', () => {\n                reject(this.request.error);\n            });\n        });\n    }\n}\nfunction getObjectStore(db, isReadWrite) {\n    return db\n        .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\n        .objectStore(DB_OBJECTSTORE_NAME);\n}\nfunction _deleteDatabase() {\n    const request = indexedDB.deleteDatabase(DB_NAME);\n    return new DBPromise(request).toPromise();\n}\nfunction _openDatabase() {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    return new Promise((resolve, reject) => {\n        request.addEventListener('error', () => {\n            reject(request.error);\n        });\n        request.addEventListener('upgradeneeded', () => {\n            const db = request.result;\n            try {\n                db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n        request.addEventListener('success', async () => {\n            const db = request.result;\n            // Strange bug that occurs in Firefox when multiple tabs are opened at the\n            // same time. The only way to recover seems to be deleting the database\n            // and re-initializing it.\n            // https://github.com/firebase/firebase-js-sdk/issues/634\n            if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n                // Need to close the database or else you get a `blocked` event\n                db.close();\n                await _deleteDatabase();\n                resolve(await _openDatabase());\n            }\n            else {\n                resolve(db);\n            }\n        });\n    });\n}\nasync function _putObject(db, key, value) {\n    const request = getObjectStore(db, true).put({\n        [DB_DATA_KEYPATH]: key,\n        value\n    });\n    return new DBPromise(request).toPromise();\n}\nasync function getObject(db, key) {\n    const request = getObjectStore(db, false).get(key);\n    const data = await new DBPromise(request).toPromise();\n    return data === undefined ? null : data.value;\n}\nfunction _deleteObject(db, key) {\n    const request = getObjectStore(db, true).delete(key);\n    return new DBPromise(request).toPromise();\n}\nconst _POLLING_INTERVAL_MS = 800;\nconst _TRANSACTION_RETRY_COUNT = 3;\nclass IndexedDBLocalPersistence {\n    constructor() {\n        this.type = \"LOCAL\" /* PersistenceType.LOCAL */;\n        this._shouldAllowMigration = true;\n        this.listeners = {};\n        this.localCache = {};\n        // setTimeout return value is platform specific\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.pollTimer = null;\n        this.pendingWrites = 0;\n        this.receiver = null;\n        this.sender = null;\n        this.serviceWorkerReceiverAvailable = false;\n        this.activeServiceWorker = null;\n        // Fire & forget the service worker registration as it may never resolve\n        this._workerInitializationPromise =\n            this.initializeServiceWorkerMessaging().then(() => { }, () => { });\n    }\n    async _openDb() {\n        if (this.db) {\n            return this.db;\n        }\n        this.db = await _openDatabase();\n        return this.db;\n    }\n    async _withRetries(op) {\n        let numAttempts = 0;\n        while (true) {\n            try {\n                const db = await this._openDb();\n                return await op(db);\n            }\n            catch (e) {\n                if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n                    throw e;\n                }\n                if (this.db) {\n                    this.db.close();\n                    this.db = undefined;\n                }\n                // TODO: consider adding exponential backoff\n            }\n        }\n    }\n    /**\n     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n     * postMessage interface to send these events to the worker ourselves.\n     */\n    async initializeServiceWorkerMessaging() {\n        return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n    }\n    /**\n     * As the worker we should listen to events from the main window.\n     */\n    async initializeReceiver() {\n        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\n        // Refresh from persistence if we receive a KeyChanged message.\n        this.receiver._subscribe(\"keyChanged\" /* _EventType.KEY_CHANGED */, async (_origin, data) => {\n            const keys = await this._poll();\n            return {\n                keyProcessed: keys.includes(data.key)\n            };\n        });\n        // Let the sender know that we are listening so they give us more timeout.\n        this.receiver._subscribe(\"ping\" /* _EventType.PING */, async (_origin, _data) => {\n            return [\"keyChanged\" /* _EventType.KEY_CHANGED */];\n        });\n    }\n    /**\n     * As the main window, we should let the worker know when keys change (set and remove).\n     *\n     * @remarks\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n     * may not resolve.\n     */\n    async initializeSender() {\n        var _a, _b;\n        // Check to see if there's an active service worker.\n        this.activeServiceWorker = await _getActiveServiceWorker();\n        if (!this.activeServiceWorker) {\n            return;\n        }\n        this.sender = new Sender(this.activeServiceWorker);\n        // Ping the service worker to check what events they can handle.\n        const results = await this.sender._send(\"ping\" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);\n        if (!results) {\n            return;\n        }\n        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) &&\n            ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(\"keyChanged\" /* _EventType.KEY_CHANGED */))) {\n            this.serviceWorkerReceiverAvailable = true;\n        }\n    }\n    /**\n     * Let the worker know about a changed key, the exact key doesn't technically matter since the\n     * worker will just trigger a full sync anyway.\n     *\n     * @remarks\n     * For now, we only support one service worker per page.\n     *\n     * @param key - Storage key which changed.\n     */\n    async notifyServiceWorker(key) {\n        if (!this.sender ||\n            !this.activeServiceWorker ||\n            _getServiceWorkerController() !== this.activeServiceWorker) {\n            return;\n        }\n        try {\n            await this.sender._send(\"keyChanged\" /* _EventType.KEY_CHANGED */, { key }, \n            // Use long timeout if receiver has previously responded to a ping from us.\n            this.serviceWorkerReceiverAvailable\n                ? 800 /* _TimeoutDuration.LONG_ACK */\n                : 50 /* _TimeoutDuration.ACK */);\n        }\n        catch (_a) {\n            // This is a best effort approach. Ignore errors.\n        }\n    }\n    async _isAvailable() {\n        try {\n            if (!indexedDB) {\n                return false;\n            }\n            const db = await _openDatabase();\n            await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\n            await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n            return true;\n        }\n        catch (_a) { }\n        return false;\n    }\n    async _withPendingWrite(write) {\n        this.pendingWrites++;\n        try {\n            await write();\n        }\n        finally {\n            this.pendingWrites--;\n        }\n    }\n    async _set(key, value) {\n        return this._withPendingWrite(async () => {\n            await this._withRetries((db) => _putObject(db, key, value));\n            this.localCache[key] = value;\n            return this.notifyServiceWorker(key);\n        });\n    }\n    async _get(key) {\n        const obj = (await this._withRetries((db) => getObject(db, key)));\n        this.localCache[key] = obj;\n        return obj;\n    }\n    async _remove(key) {\n        return this._withPendingWrite(async () => {\n            await this._withRetries((db) => _deleteObject(db, key));\n            delete this.localCache[key];\n            return this.notifyServiceWorker(key);\n        });\n    }\n    async _poll() {\n        // TODO: check if we need to fallback if getAll is not supported\n        const result = await this._withRetries((db) => {\n            const getAllRequest = getObjectStore(db, false).getAll();\n            return new DBPromise(getAllRequest).toPromise();\n        });\n        if (!result) {\n            return [];\n        }\n        // If we have pending writes in progress abort, we'll get picked up on the next poll\n        if (this.pendingWrites !== 0) {\n            return [];\n        }\n        const keys = [];\n        const keysInResult = new Set();\n        if (result.length !== 0) {\n            for (const { fbase_key: key, value } of result) {\n                keysInResult.add(key);\n                if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n                    this.notifyListeners(key, value);\n                    keys.push(key);\n                }\n            }\n        }\n        for (const localKey of Object.keys(this.localCache)) {\n            if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n                // Deleted\n                this.notifyListeners(localKey, null);\n                keys.push(localKey);\n            }\n        }\n        return keys;\n    }\n    notifyListeners(key, newValue) {\n        this.localCache[key] = newValue;\n        const listeners = this.listeners[key];\n        if (listeners) {\n            for (const listener of Array.from(listeners)) {\n                listener(newValue);\n            }\n        }\n    }\n    startPolling() {\n        this.stopPolling();\n        this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\n    }\n    stopPolling() {\n        if (this.pollTimer) {\n            clearInterval(this.pollTimer);\n            this.pollTimer = null;\n        }\n    }\n    _addListener(key, listener) {\n        if (Object.keys(this.listeners).length === 0) {\n            this.startPolling();\n        }\n        if (!this.listeners[key]) {\n            this.listeners[key] = new Set();\n            // Populate the cache to avoid spuriously triggering on first poll.\n            void this._get(key); // This can happen in the background async and we can return immediately.\n        }\n        this.listeners[key].add(listener);\n    }\n    _removeListener(key, listener) {\n        if (this.listeners[key]) {\n            this.listeners[key].delete(listener);\n            if (this.listeners[key].size === 0) {\n                delete this.listeners[key];\n            }\n        }\n        if (Object.keys(this.listeners).length === 0) {\n            this.stopPolling();\n        }\n    }\n}\nIndexedDBLocalPersistence.type = 'LOCAL';\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\n * for the underlying storage.\n *\n * @public\n */\nconst indexedDBLocalPersistence = IndexedDBLocalPersistence;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction startSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeSignInTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// ReCaptcha will load using the same callback, so the callback function needs\n// to be kept around\nconst _JSLOAD_CALLBACK = _generateCallbackName('rcb');\nconst NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\n/**\n * Loader for the GReCaptcha library. There should only ever be one of this.\n */\nclass ReCaptchaLoaderImpl {\n    constructor() {\n        var _a;\n        this.hostLanguage = '';\n        this.counter = 0;\n        /**\n         * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n         * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n         * `window.grecaptcha.render()` will not. Another load will add it.\n         */\n        this.librarySeparatelyLoaded = !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);\n    }\n    load(auth, hl = '') {\n        _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n            return Promise.resolve(_window().grecaptcha);\n        }\n        return new Promise((resolve, reject) => {\n            const networkTimeout = _window().setTimeout(() => {\n                reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n            }, NETWORK_TIMEOUT_DELAY.get());\n            _window()[_JSLOAD_CALLBACK] = () => {\n                _window().clearTimeout(networkTimeout);\n                delete _window()[_JSLOAD_CALLBACK];\n                const recaptcha = _window().grecaptcha;\n                if (!recaptcha || !isV2(recaptcha)) {\n                    reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n                    return;\n                }\n                // Wrap the recaptcha render function so that we know if the developer has\n                // called it separately\n                const render = recaptcha.render;\n                recaptcha.render = (container, params) => {\n                    const widgetId = render(container, params);\n                    this.counter++;\n                    return widgetId;\n                };\n                this.hostLanguage = hl;\n                resolve(recaptcha);\n            };\n            const url = `${_recaptchaV2ScriptUrl()}?${querystring({\n                onload: _JSLOAD_CALLBACK,\n                render: 'explicit',\n                hl\n            })}`;\n            _loadJS(url).catch(() => {\n                clearTimeout(networkTimeout);\n                reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n            });\n        });\n    }\n    clearedOneInstance() {\n        this.counter--;\n    }\n    shouldResolveImmediately(hl) {\n        var _a;\n        // We can resolve immediately if:\n        //   • grecaptcha is already defined AND (\n        //     1. the requested language codes are the same OR\n        //     2. there exists already a ReCaptcha on the page\n        //     3. the library was already loaded by the app\n        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n        // that are already in the page\n        return (!!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) &&\n            (hl === this.hostLanguage ||\n                this.counter > 0 ||\n                this.librarySeparatelyLoaded));\n    }\n}\nfunction isHostLanguageValid(hl) {\n    return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\nclass MockReCaptchaLoaderImpl {\n    async load(auth) {\n        return new MockReCaptcha(auth);\n    }\n    clearedOneInstance() { }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\nconst DEFAULT_PARAMS = {\n    theme: 'light',\n    type: 'image'\n};\n/**\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n *\n * @remarks\n * `RecaptchaVerifier` does not work in a Node.js environment.\n *\n * @public\n */\nclass RecaptchaVerifier {\n    /**\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     * @param containerOrId - The reCAPTCHA container parameter.\n     *\n     * @remarks\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n     * an element ID. The corresponding element must also must be in the DOM at the time of\n     * initialization.\n     *\n     * @param parameters - The optional reCAPTCHA parameters.\n     *\n     * @remarks\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n     * 'invisible'.\n     */\n    constructor(authExtern, containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS)) {\n        this.parameters = parameters;\n        /**\n         * The application verifier type.\n         *\n         * @remarks\n         * For a reCAPTCHA verifier, this is 'recaptcha'.\n         */\n        this.type = RECAPTCHA_VERIFIER_TYPE;\n        this.destroyed = false;\n        this.widgetId = null;\n        this.tokenChangeListeners = new Set();\n        this.renderPromise = null;\n        this.recaptcha = null;\n        this.auth = _castAuth(authExtern);\n        this.isInvisible = this.parameters.size === 'invisible';\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n        const container = typeof containerOrId === 'string'\n            ? document.getElementById(containerOrId)\n            : containerOrId;\n        _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        this.container = container;\n        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting\n            ? new MockReCaptchaLoaderImpl()\n            : new ReCaptchaLoaderImpl();\n        this.validateStartingState();\n        // TODO: Figure out if sdk version is needed\n    }\n    /**\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n     *\n     * @returns A Promise for the reCAPTCHA token.\n     */\n    async verify() {\n        this.assertNotDestroyed();\n        const id = await this.render();\n        const recaptcha = this.getAssertedRecaptcha();\n        const response = recaptcha.getResponse(id);\n        if (response) {\n            return response;\n        }\n        return new Promise(resolve => {\n            const tokenChange = (token) => {\n                if (!token) {\n                    return; // Ignore token expirations.\n                }\n                this.tokenChangeListeners.delete(tokenChange);\n                resolve(token);\n            };\n            this.tokenChangeListeners.add(tokenChange);\n            if (this.isInvisible) {\n                recaptcha.execute(id);\n            }\n        });\n    }\n    /**\n     * Renders the reCAPTCHA widget on the page.\n     *\n     * @returns A Promise that resolves with the reCAPTCHA widget ID.\n     */\n    render() {\n        try {\n            this.assertNotDestroyed();\n        }\n        catch (e) {\n            // This method returns a promise. Since it's not async (we want to return the\n            // _same_ promise if rendering is still occurring), the API surface should\n            // reject with the error rather than just throw\n            return Promise.reject(e);\n        }\n        if (this.renderPromise) {\n            return this.renderPromise;\n        }\n        this.renderPromise = this.makeRenderPromise().catch(e => {\n            this.renderPromise = null;\n            throw e;\n        });\n        return this.renderPromise;\n    }\n    /** @internal */\n    _reset() {\n        this.assertNotDestroyed();\n        if (this.widgetId !== null) {\n            this.getAssertedRecaptcha().reset(this.widgetId);\n        }\n    }\n    /**\n     * Clears the reCAPTCHA widget from the page and destroys the instance.\n     */\n    clear() {\n        this.assertNotDestroyed();\n        this.destroyed = true;\n        this._recaptchaLoader.clearedOneInstance();\n        if (!this.isInvisible) {\n            this.container.childNodes.forEach(node => {\n                this.container.removeChild(node);\n            });\n        }\n    }\n    validateStartingState() {\n        _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    }\n    makeTokenCallback(existing) {\n        return token => {\n            this.tokenChangeListeners.forEach(listener => listener(token));\n            if (typeof existing === 'function') {\n                existing(token);\n            }\n            else if (typeof existing === 'string') {\n                const globalFunc = _window()[existing];\n                if (typeof globalFunc === 'function') {\n                    globalFunc(token);\n                }\n            }\n        };\n    }\n    assertNotDestroyed() {\n        _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n    async makeRenderPromise() {\n        await this.init();\n        if (!this.widgetId) {\n            let container = this.container;\n            if (!this.isInvisible) {\n                const guaranteedEmpty = document.createElement('div');\n                container.appendChild(guaranteedEmpty);\n                container = guaranteedEmpty;\n            }\n            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\n        }\n        return this.widgetId;\n    }\n    async init() {\n        _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        await domReady();\n        this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);\n        const siteKey = await getRecaptchaParams(this.auth);\n        _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        this.parameters.sitekey = siteKey;\n    }\n    getAssertedRecaptcha() {\n        _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        return this.recaptcha;\n    }\n}\nfunction domReady() {\n    let resolver = null;\n    return new Promise(resolve => {\n        if (document.readyState === 'complete') {\n            resolve();\n            return;\n        }\n        // Document not ready, wait for load before resolving.\n        // Save resolver, so we can remove listener in case it was externally\n        // cancelled.\n        resolver = () => resolve();\n        window.addEventListener('load', resolver);\n    }).catch(e => {\n        if (resolver) {\n            window.removeEventListener('load', resolver);\n        }\n        throw e;\n    });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ConfirmationResultImpl {\n    constructor(verificationId, onConfirmation) {\n        this.verificationId = verificationId;\n        this.onConfirmation = onConfirmation;\n    }\n    confirm(verificationCode) {\n        const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\n        return this.onConfirmation(authCredential);\n    }\n}\n/**\n * Asynchronously signs in using a phone number.\n *\n * @remarks\n * This method sends a code via SMS to the given\n * phone number, and returns a {@link ConfirmationResult}. After the user\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n * with the code to sign the user in.\n *\n * For abuse prevention, this method requires a {@link ApplicationVerifier}.\n * This SDK includes an implementation based on reCAPTCHA v2, {@link RecaptchaVerifier}.\n * This function can work on other platforms that do not support the\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\n * third-party {@link ApplicationVerifier} implementation.\n *\n * If you've enabled project-level reCAPTCHA Enterprise bot protection in\n * Enforce mode, you can omit the {@link ApplicationVerifier}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain a verificationCode from the user.\n * const credential = await confirmationResult.confirm(verificationCode);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nasync function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, getModularInstance(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));\n}\n/**\n * Links the user account with the given phone number.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nasync function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n    const userInternal = getModularInstance(user);\n    await _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */);\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));\n}\n/**\n * Re-authenticates a user using a fresh phone credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n *\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nasync function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n    const userInternal = getModularInstance(user);\n    if (_isFirebaseServerApp(userInternal.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));\n}\n/**\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n *\n */\nasync function _verifyPhoneNumber(auth, options, verifier) {\n    var _a;\n    if (!auth._getRecaptchaConfig()) {\n        try {\n            await _initializeRecaptchaConfig(auth);\n        }\n        catch (error) {\n            // If an error occurs while fetching the config, there is no way to know the enablement state\n            // of Phone provider, so we proceed with recaptcha V2 verification.\n            // The error is likely \"recaptchaKey undefined\", as reCAPTCHA Enterprise is not\n            // enabled for any provider.\n            console.log('Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.');\n        }\n    }\n    try {\n        let phoneInfoOptions;\n        if (typeof options === 'string') {\n            phoneInfoOptions = {\n                phoneNumber: options\n            };\n        }\n        else {\n            phoneInfoOptions = options;\n        }\n        if ('session' in phoneInfoOptions) {\n            const session = phoneInfoOptions.session;\n            if ('phoneNumber' in phoneInfoOptions) {\n                _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n                const startPhoneMfaEnrollmentRequest = {\n                    idToken: session.credential,\n                    phoneEnrollmentInfo: {\n                        phoneNumber: phoneInfoOptions.phoneNumber,\n                        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n                    }\n                };\n                const startEnrollPhoneMfaActionCallback = async (authInstance, request) => {\n                    // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n                    if (request.phoneEnrollmentInfo.captchaResponse === FAKE_TOKEN) {\n                        _assert((verifier === null || verifier === void 0 ? void 0 : verifier.type) === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n                        const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n                        return startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);\n                    }\n                    return startEnrollPhoneMfa(authInstance, request);\n                };\n                const startPhoneMfaEnrollmentResponse = handleRecaptchaFlow(auth, startPhoneMfaEnrollmentRequest, \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */, startEnrollPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n                const response = await startPhoneMfaEnrollmentResponse.catch(error => {\n                    return Promise.reject(error);\n                });\n                return response.phoneSessionInfo.sessionInfo;\n            }\n            else {\n                _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n                const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) ||\n                    phoneInfoOptions.multiFactorUid;\n                _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\n                const startPhoneMfaSignInRequest = {\n                    mfaPendingCredential: session.credential,\n                    mfaEnrollmentId,\n                    phoneSignInInfo: {\n                        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n                    }\n                };\n                const startSignInPhoneMfaActionCallback = async (authInstance, request) => {\n                    // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n                    if (request.phoneSignInInfo.captchaResponse === FAKE_TOKEN) {\n                        _assert((verifier === null || verifier === void 0 ? void 0 : verifier.type) === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n                        const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n                        return startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);\n                    }\n                    return startSignInPhoneMfa(authInstance, request);\n                };\n                const startPhoneMfaSignInResponse = handleRecaptchaFlow(auth, startPhoneMfaSignInRequest, \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */, startSignInPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n                const response = await startPhoneMfaSignInResponse.catch(error => {\n                    return Promise.reject(error);\n                });\n                return response.phoneResponseInfo.sessionInfo;\n            }\n        }\n        else {\n            const sendPhoneVerificationCodeRequest = {\n                phoneNumber: phoneInfoOptions.phoneNumber,\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n            };\n            const sendPhoneVerificationCodeActionCallback = async (authInstance, request) => {\n                // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n                if (request.captchaResponse === FAKE_TOKEN) {\n                    _assert((verifier === null || verifier === void 0 ? void 0 : verifier.type) === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n                    const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n                    return sendPhoneVerificationCode(authInstance, requestWithRecaptchaV2);\n                }\n                return sendPhoneVerificationCode(authInstance, request);\n            };\n            const sendPhoneVerificationCodeResponse = handleRecaptchaFlow(auth, sendPhoneVerificationCodeRequest, \"sendVerificationCode\" /* RecaptchaActionName.SEND_VERIFICATION_CODE */, sendPhoneVerificationCodeActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n            const response = await sendPhoneVerificationCodeResponse.catch(error => {\n                return Promise.reject(error);\n            });\n            return response.sessionInfo;\n        }\n    }\n    finally {\n        verifier === null || verifier === void 0 ? void 0 : verifier._reset();\n    }\n}\n/**\n * Updates the user's phone number.\n *\n * @remarks\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * await updatePhoneNumber(user, phoneCredential);\n * ```\n *\n * @param user - The user.\n * @param credential - A credential authenticating the new phone number.\n *\n * @public\n */\nasync function updatePhoneNumber(user, credential) {\n    const userInternal = getModularInstance(user);\n    if (_isFirebaseServerApp(userInternal.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    await _link$1(userInternal, credential);\n}\n// Helper function that fetches and injects a reCAPTCHA v2 token into the request.\nasync function injectRecaptchaV2Token(auth, request, recaptchaV2Verifier) {\n    _assert(recaptchaV2Verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    const recaptchaV2Token = await recaptchaV2Verifier.verify();\n    _assert(typeof recaptchaV2Token === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    const newRequest = Object.assign({}, request);\n    if ('phoneEnrollmentInfo' in newRequest) {\n        const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n        const captchaResponse = newRequest.phoneEnrollmentInfo.captchaResponse;\n        const clientType = newRequest\n            .phoneEnrollmentInfo.clientType;\n        const recaptchaVersion = newRequest.phoneEnrollmentInfo.recaptchaVersion;\n        Object.assign(newRequest, {\n            'phoneEnrollmentInfo': {\n                phoneNumber,\n                recaptchaToken: recaptchaV2Token,\n                captchaResponse,\n                clientType,\n                recaptchaVersion\n            }\n        });\n        return newRequest;\n    }\n    else if ('phoneSignInInfo' in newRequest) {\n        const captchaResponse = newRequest.phoneSignInInfo.captchaResponse;\n        const clientType = newRequest\n            .phoneSignInInfo.clientType;\n        const recaptchaVersion = newRequest.phoneSignInInfo.recaptchaVersion;\n        Object.assign(newRequest, {\n            'phoneSignInInfo': {\n                recaptchaToken: recaptchaV2Token,\n                captchaResponse,\n                clientType,\n                recaptchaVersion\n            }\n        });\n        return newRequest;\n    }\n    else {\n        Object.assign(newRequest, { 'recaptchaToken': recaptchaV2Token });\n        return newRequest;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for generating an {@link PhoneAuthCredential}.\n *\n * @remarks\n * `PhoneAuthProvider` does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const userCredential = await signInWithCredential(auth, phoneCredential);\n * ```\n *\n * @public\n */\nclass PhoneAuthProvider {\n    /**\n     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n     *\n     */\n    constructor(auth) {\n        /** Always set to {@link ProviderId}.PHONE. */\n        this.providerId = PhoneAuthProvider.PROVIDER_ID;\n        this.auth = _castAuth(auth);\n    }\n    /**\n     *\n     * Starts a phone number authentication flow by sending a verification code to the given phone\n     * number.\n     *\n     * @example\n     * ```javascript\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\n     * ```javascript\n     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const userCredential = confirmationResult.confirm(verificationCode);\n     * ```\n     *\n     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n     * E.164 format (e.g. +16505550101).\n     * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents\n     * requests from unauthorized clients. This SDK includes an implementation\n     * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled\n     * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is\n     * optional; in all other configurations, the parameter is required.\n     *\n     * @returns A Promise for a verification ID that can be passed to\n     * {@link PhoneAuthProvider.credential} to identify this flow.\n     */\n    verifyPhoneNumber(phoneOptions, applicationVerifier) {\n        return _verifyPhoneNumber(this.auth, phoneOptions, getModularInstance(applicationVerifier));\n    }\n    /**\n     * Creates a phone auth credential, given the verification ID from\n     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n     * mobile device.\n     *\n     * @example\n     * ```javascript\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n     * const userCredential = signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\n     * ```javascript\n     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const userCredential = await confirmationResult.confirm(verificationCode);\n     * ```\n     *\n     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n     * @param verificationCode - The verification code sent to the user's mobile device.\n     *\n     * @returns The auth provider credential.\n     */\n    static credential(verificationId, verificationCode) {\n        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential}.\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n        const credential = userCredential;\n        return PhoneAuthProvider.credentialFromTaggedObject(credential);\n    }\n    /**\n     * Returns an {@link AuthCredential} when passed an error.\n     *\n     * @remarks\n     *\n     * This method works for errors like\n     * `auth/account-exists-with-different-credentials`. This is useful for\n     * recovering when attempting to set a user's phone number but the number\n     * in question is already tied to another account. For example, the following\n     * code tries to update the current user's phone number, and if that\n     * fails, links the user with the account associated with that number:\n     *\n     * ```js\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n     * try {\n     *   const code = ''; // Prompt the user for the verification code\n     *   await updatePhoneNumber(\n     *       auth.currentUser,\n     *       PhoneAuthProvider.credential(verificationId, code));\n     * } catch (e) {\n     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n     *     const cred = PhoneAuthProvider.credentialFromError(e);\n     *     await linkWithCredential(auth.currentUser, cred);\n     *   }\n     * }\n     *\n     * // At this point, auth.currentUser.phoneNumber === number.\n     * ```\n     *\n     * @param error - The error to generate a credential from.\n     */\n    static credentialFromError(error) {\n        return PhoneAuthProvider.credentialFromTaggedObject((error.customData || {}));\n    }\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n        if (!tokenResponse) {\n            return null;\n        }\n        const { phoneNumber, temporaryProof } = tokenResponse;\n        if (phoneNumber && temporaryProof) {\n            return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\n        }\n        return null;\n    }\n}\n/** Always set to {@link ProviderId}.PHONE. */\nPhoneAuthProvider.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */;\n/** Always set to {@link SignInMethod}.PHONE. */\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */;\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Chooses a popup/redirect resolver to use. This prefers the override (which\n * is directly passed in), and falls back to the property set on the auth\n * object. If neither are available, this function errors w/ an argument error.\n */\nfunction _withDefaultResolver(auth, resolverOverride) {\n    if (resolverOverride) {\n        return _getInstance(resolverOverride);\n    }\n    _assert(auth._popupRedirectResolver, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return auth._popupRedirectResolver;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass IdpCredential extends AuthCredential {\n    constructor(params) {\n        super(\"custom\" /* ProviderId.CUSTOM */, \"custom\" /* ProviderId.CUSTOM */);\n        this.params = params;\n    }\n    _getIdTokenResponse(auth) {\n        return signInWithIdp(auth, this._buildIdpRequest());\n    }\n    _linkToIdToken(auth, idToken) {\n        return signInWithIdp(auth, this._buildIdpRequest(idToken));\n    }\n    _getReauthenticationResolver(auth) {\n        return signInWithIdp(auth, this._buildIdpRequest());\n    }\n    _buildIdpRequest(idToken) {\n        const request = {\n            requestUri: this.params.requestUri,\n            sessionId: this.params.sessionId,\n            postBody: this.params.postBody,\n            tenantId: this.params.tenantId,\n            pendingToken: this.params.pendingToken,\n            returnSecureToken: true,\n            returnIdpCredential: true\n        };\n        if (idToken) {\n            request.idToken = idToken;\n        }\n        return request;\n    }\n}\nfunction _signIn(params) {\n    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);\n}\nfunction _reauth(params) {\n    const { auth, user } = params;\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);\n}\nasync function _link(params) {\n    const { auth, user } = params;\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return _link$1(user, new IdpCredential(params), params.bypassAuthState);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n */\nclass AbstractPopupRedirectOperation {\n    constructor(auth, filter, resolver, user, bypassAuthState = false) {\n        this.auth = auth;\n        this.resolver = resolver;\n        this.user = user;\n        this.bypassAuthState = bypassAuthState;\n        this.pendingPromise = null;\n        this.eventManager = null;\n        this.filter = Array.isArray(filter) ? filter : [filter];\n    }\n    execute() {\n        return new Promise(async (resolve, reject) => {\n            this.pendingPromise = { resolve, reject };\n            try {\n                this.eventManager = await this.resolver._initialize(this.auth);\n                await this.onExecution();\n                this.eventManager.registerConsumer(this);\n            }\n            catch (e) {\n                this.reject(e);\n            }\n        });\n    }\n    async onAuthEvent(event) {\n        const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\n        if (error) {\n            this.reject(error);\n            return;\n        }\n        const params = {\n            auth: this.auth,\n            requestUri: urlResponse,\n            sessionId: sessionId,\n            tenantId: tenantId || undefined,\n            postBody: postBody || undefined,\n            user: this.user,\n            bypassAuthState: this.bypassAuthState\n        };\n        try {\n            this.resolve(await this.getIdpTask(type)(params));\n        }\n        catch (e) {\n            this.reject(e);\n        }\n    }\n    onError(error) {\n        this.reject(error);\n    }\n    getIdpTask(type) {\n        switch (type) {\n            case \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */:\n            case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\n                return _signIn;\n            case \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */:\n            case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\n                return _link;\n            case \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */:\n            case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\n                return _reauth;\n            default:\n                _fail(this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }\n    }\n    resolve(cred) {\n        debugAssert(this.pendingPromise, 'Pending promise was never set');\n        this.pendingPromise.resolve(cred);\n        this.unregisterAndCleanUp();\n    }\n    reject(error) {\n        debugAssert(this.pendingPromise, 'Pending promise was never set');\n        this.pendingPromise.reject(error);\n        this.unregisterAndCleanUp();\n    }\n    unregisterAndCleanUp() {\n        if (this.eventManager) {\n            this.eventManager.unregisterConsumer(this);\n        }\n        this.pendingPromise = null;\n        this.cleanUp();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\n/**\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n *\n * @remarks\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was\n * unsuccessful, returns an error object containing additional information about the error.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nasync function signInWithPopup(auth, provider, resolver) {\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_createError(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */));\n    }\n    const authInternal = _castAuth(auth);\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\n    const action = new PopupOperation(authInternal, \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */, provider, resolverInternal);\n    return action.executeNotNull();\n}\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\n * OAuth flow.\n *\n * @remarks\n * If the reauthentication is successful, the returned result will contain the user and the\n * provider's credential.\n *\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n * // Reauthenticate using a popup.\n * await reauthenticateWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nasync function reauthenticateWithPopup(user, provider, resolver) {\n    const userInternal = getModularInstance(user);\n    if (_isFirebaseServerApp(userInternal.auth.app)) {\n        return Promise.reject(_createError(userInternal.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */));\n    }\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    const action = new PopupOperation(userInternal.auth, \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);\n    return action.executeNotNull();\n}\n/**\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n *\n * @remarks\n * If the linking is successful, the returned result will contain the user and the provider's credential.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a popup.\n * const provider = new FacebookAuthProvider();\n * await linkWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nasync function linkWithPopup(user, provider, resolver) {\n    const userInternal = getModularInstance(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    const action = new PopupOperation(userInternal.auth, \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */, provider, resolverInternal, userInternal);\n    return action.executeNotNull();\n}\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n *\n */\nclass PopupOperation extends AbstractPopupRedirectOperation {\n    constructor(auth, filter, provider, resolver, user) {\n        super(auth, filter, resolver, user);\n        this.provider = provider;\n        this.authWindow = null;\n        this.pollId = null;\n        if (PopupOperation.currentPopupAction) {\n            PopupOperation.currentPopupAction.cancel();\n        }\n        PopupOperation.currentPopupAction = this;\n    }\n    async executeNotNull() {\n        const result = await this.execute();\n        _assert(result, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        return result;\n    }\n    async onExecution() {\n        debugAssert(this.filter.length === 1, 'Popup operations only handle one event');\n        const eventId = _generateEventId();\n        this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor\n        eventId);\n        this.authWindow.associatedEvent = eventId;\n        // Check for web storage support and origin validation _after_ the popup is\n        // loaded. These operations are slow (~1 second or so) Rather than\n        // waiting on them before opening the window, optimistically open the popup\n        // and check for storage support at the same time. If storage support is\n        // not available, this will cause the whole thing to reject properly. It\n        // will also close the popup, but since the promise has already rejected,\n        // the popup closed by user poll will reject into the void.\n        this.resolver._originValidation(this.auth).catch(e => {\n            this.reject(e);\n        });\n        this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\n            if (!isSupported) {\n                this.reject(_createError(this.auth, \"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));\n            }\n        });\n        // Handle user closure. Notice this does *not* use await\n        this.pollUserCancellation();\n    }\n    get eventId() {\n        var _a;\n        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;\n    }\n    cancel() {\n        this.reject(_createError(this.auth, \"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));\n    }\n    cleanUp() {\n        if (this.authWindow) {\n            this.authWindow.close();\n        }\n        if (this.pollId) {\n            window.clearTimeout(this.pollId);\n        }\n        this.authWindow = null;\n        this.pollId = null;\n        PopupOperation.currentPopupAction = null;\n    }\n    pollUserCancellation() {\n        const poll = () => {\n            var _a, _b;\n            if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {\n                // Make sure that there is sufficient time for whatever action to\n                // complete. The window could have closed but the sign in network\n                // call could still be in flight. This is specifically true for\n                // Firefox or if the opener is in an iframe, in which case the oauth\n                // helper closes the popup.\n                this.pollId = window.setTimeout(() => {\n                    this.pollId = null;\n                    this.reject(_createError(this.auth, \"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));\n                }, 8000 /* _Timeout.AUTH_EVENT */);\n                return;\n            }\n            this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n        };\n        poll();\n    }\n}\n// Only one popup is ever shown at once. The lifecycle of the current popup\n// can be managed / cancelled by the constructor.\nPopupOperation.currentPopupAction = null;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PENDING_REDIRECT_KEY = 'pendingRedirect';\n// We only get one redirect outcome for any one auth, so just store it\n// in here.\nconst redirectOutcomeMap = new Map();\nclass RedirectAction extends AbstractPopupRedirectOperation {\n    constructor(auth, resolver, bypassAuthState = false) {\n        super(auth, [\n            \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */,\n            \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */,\n            \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */,\n            \"unknown\" /* AuthEventType.UNKNOWN */\n        ], resolver, undefined, bypassAuthState);\n        this.eventId = null;\n    }\n    /**\n     * Override the execute function; if we already have a redirect result, then\n     * just return it.\n     */\n    async execute() {\n        let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n        if (!readyOutcome) {\n            try {\n                const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);\n                const result = hasPendingRedirect ? await super.execute() : null;\n                readyOutcome = () => Promise.resolve(result);\n            }\n            catch (e) {\n                readyOutcome = () => Promise.reject(e);\n            }\n            redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n        }\n        // If we're not bypassing auth state, the ready outcome should be set to\n        // null.\n        if (!this.bypassAuthState) {\n            redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n        }\n        return readyOutcome();\n    }\n    async onAuthEvent(event) {\n        if (event.type === \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {\n            return super.onAuthEvent(event);\n        }\n        else if (event.type === \"unknown\" /* AuthEventType.UNKNOWN */) {\n            // This is a sentinel value indicating there's no pending redirect\n            this.resolve(null);\n            return;\n        }\n        if (event.eventId) {\n            const user = await this.auth._redirectUserForId(event.eventId);\n            if (user) {\n                this.user = user;\n                return super.onAuthEvent(event);\n            }\n            else {\n                this.resolve(null);\n            }\n        }\n    }\n    async onExecution() { }\n    cleanUp() { }\n}\nasync function _getAndClearPendingRedirectStatus(resolver, auth) {\n    const key = pendingRedirectKey(auth);\n    const persistence = resolverPersistence(resolver);\n    if (!(await persistence._isAvailable())) {\n        return false;\n    }\n    const hasPendingRedirect = (await persistence._get(key)) === 'true';\n    await persistence._remove(key);\n    return hasPendingRedirect;\n}\nasync function _setPendingRedirectStatus(resolver, auth) {\n    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\n}\nfunction _clearRedirectOutcomes() {\n    redirectOutcomeMap.clear();\n}\nfunction _overrideRedirectResult(auth, result) {\n    redirectOutcomeMap.set(auth._key(), result);\n}\nfunction resolverPersistence(resolver) {\n    return _getInstance(resolver._redirectPersistence);\n}\nfunction pendingRedirectKey(auth) {\n    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Authenticates a Firebase client using a full-page redirect flow.\n *\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link signInWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nfunction signInWithRedirect(auth, provider, resolver) {\n    return _signInWithRedirect(auth, provider, resolver);\n}\nasync function _signInWithRedirect(auth, provider, resolver) {\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await authInternal._initializationPromise;\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\n    await _setPendingRedirectStatus(resolverInternal, authInternal);\n    return resolverInternal._openRedirect(authInternal, provider, \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */);\n}\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link reauthenticateWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * // Reauthenticate using a redirect.\n * await reauthenticateWithRedirect(result.user, provider);\n * // This will again trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nfunction reauthenticateWithRedirect(user, provider, resolver) {\n    return _reauthenticateWithRedirect(user, provider, resolver);\n}\nasync function _reauthenticateWithRedirect(user, provider, resolver) {\n    const userInternal = getModularInstance(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    if (_isFirebaseServerApp(userInternal.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await userInternal.auth._initializationPromise;\n    // Allow the resolver to error before persisting the redirect user\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n    const eventId = await prepareUserForRedirect(userInternal);\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, eventId);\n}\n/**\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link linkWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a redirect.\n * const provider = new FacebookAuthProvider();\n * await linkWithRedirect(result.user, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nfunction linkWithRedirect(user, provider, resolver) {\n    return _linkWithRedirect(user, provider, resolver);\n}\nasync function _linkWithRedirect(user, provider, resolver) {\n    const userInternal = getModularInstance(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await userInternal.auth._initializationPromise;\n    // Allow the resolver to error before persisting the redirect user\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    await _assertLinkedStatus(false, userInternal, provider.providerId);\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n    const eventId = await prepareUserForRedirect(userInternal);\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, eventId);\n}\n/**\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n *\n * @remarks\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\n * error. If no redirect operation was called, returns `null`.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nasync function getRedirectResult(auth, resolver) {\n    await _castAuth(auth)._initializationPromise;\n    return _getRedirectResult(auth, resolver, false);\n}\nasync function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {\n    if (_isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const resolver = _withDefaultResolver(authInternal, resolverExtern);\n    const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n    const result = await action.execute();\n    if (result && !bypassAuthState) {\n        delete result.user._redirectEventId;\n        await authInternal._persistUserIfCurrent(result.user);\n        await authInternal._setRedirectUser(null, resolverExtern);\n    }\n    return result;\n}\nasync function prepareUserForRedirect(user) {\n    const eventId = _generateEventId(`${user.uid}:::`);\n    user._redirectEventId = eventId;\n    await user.auth._setRedirectUser(user);\n    await user.auth._persistUserIfCurrent(user);\n    return eventId;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The amount of time to store the UIDs of seen events; this is\n// set to 10 min by default\nconst EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\nclass AuthEventManager {\n    constructor(auth) {\n        this.auth = auth;\n        this.cachedEventUids = new Set();\n        this.consumers = new Set();\n        this.queuedRedirectEvent = null;\n        this.hasHandledPotentialRedirect = false;\n        this.lastProcessedEventTime = Date.now();\n    }\n    registerConsumer(authEventConsumer) {\n        this.consumers.add(authEventConsumer);\n        if (this.queuedRedirectEvent &&\n            this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\n            this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n            this.saveEventToCache(this.queuedRedirectEvent);\n            this.queuedRedirectEvent = null;\n        }\n    }\n    unregisterConsumer(authEventConsumer) {\n        this.consumers.delete(authEventConsumer);\n    }\n    onEvent(event) {\n        // Check if the event has already been handled\n        if (this.hasEventBeenHandled(event)) {\n            return false;\n        }\n        let handled = false;\n        this.consumers.forEach(consumer => {\n            if (this.isEventForConsumer(event, consumer)) {\n                handled = true;\n                this.sendToConsumer(event, consumer);\n                this.saveEventToCache(event);\n            }\n        });\n        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n            // If we've already seen a redirect before, or this is a popup event,\n            // bail now\n            return handled;\n        }\n        this.hasHandledPotentialRedirect = true;\n        // If the redirect wasn't handled, hang on to it\n        if (!handled) {\n            this.queuedRedirectEvent = event;\n            handled = true;\n        }\n        return handled;\n    }\n    sendToConsumer(event, consumer) {\n        var _a;\n        if (event.error && !isNullRedirectEvent(event)) {\n            const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) ||\n                \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */;\n            consumer.onError(_createError(this.auth, code));\n        }\n        else {\n            consumer.onAuthEvent(event);\n        }\n    }\n    isEventForConsumer(event, consumer) {\n        const eventIdMatches = consumer.eventId === null ||\n            (!!event.eventId && event.eventId === consumer.eventId);\n        return consumer.filter.includes(event.type) && eventIdMatches;\n    }\n    hasEventBeenHandled(event) {\n        if (Date.now() - this.lastProcessedEventTime >=\n            EVENT_DUPLICATION_CACHE_DURATION_MS) {\n            this.cachedEventUids.clear();\n        }\n        return this.cachedEventUids.has(eventUid(event));\n    }\n    saveEventToCache(event) {\n        this.cachedEventUids.add(eventUid(event));\n        this.lastProcessedEventTime = Date.now();\n    }\n}\nfunction eventUid(e) {\n    return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\n}\nfunction isNullRedirectEvent({ type, error }) {\n    return (type === \"unknown\" /* AuthEventType.UNKNOWN */ &&\n        (error === null || error === void 0 ? void 0 : error.code) === `auth/${\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */}`);\n}\nfunction isRedirectEvent(event) {\n    switch (event.type) {\n        case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\n        case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\n        case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\n            return true;\n        case \"unknown\" /* AuthEventType.UNKNOWN */:\n            return isNullRedirectEvent(event);\n        default:\n            return false;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function _getProjectConfig(auth, request = {}) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/projects\" /* Endpoint.GET_PROJECT_CONFIG */, request);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\nconst HTTP_REGEX = /^https?/;\nasync function _validateOrigin(auth) {\n    // Skip origin validation if we are in an emulated environment\n    if (auth.config.emulator) {\n        return;\n    }\n    const { authorizedDomains } = await _getProjectConfig(auth);\n    for (const domain of authorizedDomains) {\n        try {\n            if (matchDomain(domain)) {\n                return;\n            }\n        }\n        catch (_a) {\n            // Do nothing if there's a URL error; just continue searching\n        }\n    }\n    // In the old SDK, this error also provides helpful messages.\n    _fail(auth, \"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */);\n}\nfunction matchDomain(expected) {\n    const currentUrl = _getCurrentUrl();\n    const { protocol, hostname } = new URL(currentUrl);\n    if (expected.startsWith('chrome-extension://')) {\n        const ceUrl = new URL(expected);\n        if (ceUrl.hostname === '' && hostname === '') {\n            // For some reason we're not parsing chrome URLs properly\n            return (protocol === 'chrome-extension:' &&\n                expected.replace('chrome-extension://', '') ===\n                    currentUrl.replace('chrome-extension://', ''));\n        }\n        return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\n    }\n    if (!HTTP_REGEX.test(protocol)) {\n        return false;\n    }\n    if (IP_ADDRESS_REGEX.test(expected)) {\n        // The domain has to be exactly equal to the pattern, as an IP domain will\n        // only contain the IP, no extra character.\n        return hostname === expected;\n    }\n    // Dots in pattern should be escaped.\n    const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\n    // Non ip address domains.\n    // domain.com = *.domain.com OR domain.com\n    const re = new RegExp('^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');\n    return re.test(hostname);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst NETWORK_TIMEOUT = new Delay(30000, 60000);\n/**\n * Reset unloaded GApi modules. If gapi.load fails due to a network error,\n * it will stop working after a retrial. This is a hack to fix this issue.\n */\nfunction resetUnloadedGapiModules() {\n    // Clear last failed gapi.load state to force next gapi.load to first\n    // load the failed gapi.iframes module.\n    // Get gapix.beacon context.\n    const beacon = _window().___jsl;\n    // Get current hint.\n    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {\n        // Get gapi hint.\n        for (const hint of Object.keys(beacon.H)) {\n            // Requested modules.\n            beacon.H[hint].r = beacon.H[hint].r || [];\n            // Loaded modules.\n            beacon.H[hint].L = beacon.H[hint].L || [];\n            // Set requested modules to a copy of the loaded modules.\n            beacon.H[hint].r = [...beacon.H[hint].L];\n            // Clear pending callbacks.\n            if (beacon.CP) {\n                for (let i = 0; i < beacon.CP.length; i++) {\n                    // Remove all failed pending callbacks.\n                    beacon.CP[i] = null;\n                }\n            }\n        }\n    }\n}\nfunction loadGapi(auth) {\n    return new Promise((resolve, reject) => {\n        var _a, _b, _c;\n        // Function to run when gapi.load is ready.\n        function loadGapiIframe() {\n            // The developer may have tried to previously run gapi.load and failed.\n            // Run this to fix that.\n            resetUnloadedGapiModules();\n            gapi.load('gapi.iframes', {\n                callback: () => {\n                    resolve(gapi.iframes.getContext());\n                },\n                ontimeout: () => {\n                    // The above reset may be sufficient, but having this reset after\n                    // failure ensures that if the developer calls gapi.load after the\n                    // connection is re-established and before another attempt to embed\n                    // the iframe, it would work and would not be broken because of our\n                    // failed attempt.\n                    // Timeout when gapi.iframes.Iframe not loaded.\n                    resetUnloadedGapiModules();\n                    reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n                },\n                timeout: NETWORK_TIMEOUT.get()\n            });\n        }\n        if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {\n            // If gapi.iframes.Iframe available, resolve.\n            resolve(gapi.iframes.getContext());\n        }\n        else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {\n            // Gapi loader ready, load gapi.iframes.\n            loadGapiIframe();\n        }\n        else {\n            // Create a new iframe callback when this is called so as not to overwrite\n            // any previous defined callback. This happens if this method is called\n            // multiple times in parallel and could result in the later callback\n            // overwriting the previous one. This would end up with a iframe\n            // timeout.\n            const cbName = _generateCallbackName('iframefcb');\n            // GApi loader not available, dynamically load platform.js.\n            _window()[cbName] = () => {\n                // GApi loader should be ready.\n                if (!!gapi.load) {\n                    loadGapiIframe();\n                }\n                else {\n                    // Gapi loader failed, throw error.\n                    reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n                }\n            };\n            // Load GApi loader.\n            return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`)\n                .catch(e => reject(e));\n        }\n    }).catch(error => {\n        // Reset cached promise to allow for retrial.\n        cachedGApiLoader = null;\n        throw error;\n    });\n}\nlet cachedGApiLoader = null;\nfunction _loadGapi(auth) {\n    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n    return cachedGApiLoader;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PING_TIMEOUT = new Delay(5000, 15000);\nconst IFRAME_PATH = '__/auth/iframe';\nconst EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\nconst IFRAME_ATTRIBUTES = {\n    style: {\n        position: 'absolute',\n        top: '-100px',\n        width: '1px',\n        height: '1px'\n    },\n    'aria-hidden': 'true',\n    tabindex: '-1'\n};\n// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\n// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\nconst EID_FROM_APIHOST = new Map([\n    [\"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */, 'p'], // production\n    ['staging-identitytoolkit.sandbox.googleapis.com', 's'], // staging\n    ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\n]);\nfunction getIframeUrl(auth) {\n    const config = auth.config;\n    _assert(config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\n    const url = config.emulator\n        ? _emulatorUrl(config, EMULATED_IFRAME_PATH)\n        : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n    const params = {\n        apiKey: config.apiKey,\n        appName: auth.name,\n        v: SDK_VERSION\n    };\n    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n    if (eid) {\n        params.eid = eid;\n    }\n    const frameworks = auth._getFrameworks();\n    if (frameworks.length) {\n        params.fw = frameworks.join(',');\n    }\n    return `${url}?${querystring(params).slice(1)}`;\n}\nasync function _openIframe(auth) {\n    const context = await _loadGapi(auth);\n    const gapi = _window().gapi;\n    _assert(gapi, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return context.open({\n        where: document.body,\n        url: getIframeUrl(auth),\n        messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n        attributes: IFRAME_ATTRIBUTES,\n        dontclear: true\n    }, (iframe) => new Promise(async (resolve, reject) => {\n        await iframe.restyle({\n            // Prevent iframe from closing on mouse out.\n            setHideOnLeave: false\n        });\n        const networkError = _createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);\n        // Confirm iframe is correctly loaded.\n        // To fallback on failure, set a timeout.\n        const networkErrorTimer = _window().setTimeout(() => {\n            reject(networkError);\n        }, PING_TIMEOUT.get());\n        // Clear timer and resolve pending iframe ready promise.\n        function clearTimerAndResolve() {\n            _window().clearTimeout(networkErrorTimer);\n            resolve(iframe);\n        }\n        // This returns an IThenable. However the reject part does not call\n        // when the iframe is not loaded.\n        iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n            reject(networkError);\n        });\n    }));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst BASE_POPUP_OPTIONS = {\n    location: 'yes',\n    resizable: 'yes',\n    statusbar: 'yes',\n    toolbar: 'no'\n};\nconst DEFAULT_WIDTH = 500;\nconst DEFAULT_HEIGHT = 600;\nconst TARGET_BLANK = '_blank';\nconst FIREFOX_EMPTY_URL = 'http://localhost';\nclass AuthPopup {\n    constructor(window) {\n        this.window = window;\n        this.associatedEvent = null;\n    }\n    close() {\n        if (this.window) {\n            try {\n                this.window.close();\n            }\n            catch (e) { }\n        }\n    }\n}\nfunction _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\n    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n    let target = '';\n    const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), { width: width.toString(), height: height.toString(), top,\n        left });\n    // Chrome iOS 7 and 8 is returning an undefined popup win when target is\n    // specified, even though the popup is not necessarily blocked.\n    const ua = getUA().toLowerCase();\n    if (name) {\n        target = _isChromeIOS(ua) ? TARGET_BLANK : name;\n    }\n    if (_isFirefox(ua)) {\n        // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\n        url = url || FIREFOX_EMPTY_URL;\n        // Firefox disables by default scrolling on popup windows, which can create\n        // issues when the user has many Google accounts, for instance.\n        options.scrollbars = 'yes';\n    }\n    const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');\n    if (_isIOSStandalone(ua) && target !== '_self') {\n        openAsNewWindowIOS(url || '', target);\n        return new AuthPopup(null);\n    }\n    // about:blank getting sanitized causing browsers like IE/Edge to display\n    // brief error message before redirecting to handler.\n    const newWin = window.open(url || '', target, optionsString);\n    _assert(newWin, auth, \"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */);\n    // Flaky on IE edge, encapsulate with a try and catch.\n    try {\n        newWin.focus();\n    }\n    catch (e) { }\n    return new AuthPopup(newWin);\n}\nfunction openAsNewWindowIOS(url, target) {\n    const el = document.createElement('a');\n    el.href = url;\n    el.target = target;\n    const click = document.createEvent('MouseEvent');\n    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\n    el.dispatchEvent(click);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * URL for Authentication widget which will initiate the OAuth handshake\n *\n * @internal\n */\nconst WIDGET_PATH = '__/auth/handler';\n/**\n * URL for emulated environment\n *\n * @internal\n */\nconst EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\n/**\n * Fragment name for the App Check token that gets passed to the widget\n *\n * @internal\n */\nconst FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\nasync function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {\n    _assert(auth.config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\n    _assert(auth.config.apiKey, auth, \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */);\n    const params = {\n        apiKey: auth.config.apiKey,\n        appName: auth.name,\n        authType,\n        redirectUrl,\n        v: SDK_VERSION,\n        eventId\n    };\n    if (provider instanceof FederatedAuthProvider) {\n        provider.setDefaultLanguage(auth.languageCode);\n        params.providerId = provider.providerId || '';\n        if (!isEmpty(provider.getCustomParameters())) {\n            params.customParameters = JSON.stringify(provider.getCustomParameters());\n        }\n        // TODO set additionalParams from the provider as well?\n        for (const [key, value] of Object.entries(additionalParams || {})) {\n            params[key] = value;\n        }\n    }\n    if (provider instanceof BaseOAuthProvider) {\n        const scopes = provider.getScopes().filter(scope => scope !== '');\n        if (scopes.length > 0) {\n            params.scopes = scopes.join(',');\n        }\n    }\n    if (auth.tenantId) {\n        params.tid = auth.tenantId;\n    }\n    // TODO: maybe set eid as endpointId\n    // TODO: maybe set fw as Frameworks.join(\",\")\n    const paramsDict = params;\n    for (const key of Object.keys(paramsDict)) {\n        if (paramsDict[key] === undefined) {\n            delete paramsDict[key];\n        }\n    }\n    // Sets the App Check token to pass to the widget\n    const appCheckToken = await auth._getAppCheckToken();\n    const appCheckTokenFragment = appCheckToken\n        ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`\n        : '';\n    // Start at index 1 to skip the leading '&' in the query string\n    return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;\n}\nfunction getHandlerBase({ config }) {\n    if (!config.emulator) {\n        return `https://${config.authDomain}/${WIDGET_PATH}`;\n    }\n    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The special web storage event\n *\n */\nconst WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\nclass BrowserPopupRedirectResolver {\n    constructor() {\n        this.eventManagers = {};\n        this.iframes = {};\n        this.originValidationPromises = {};\n        this._redirectPersistence = browserSessionPersistence;\n        this._completeRedirectFn = _getRedirectResult;\n        this._overrideRedirectResult = _overrideRedirectResult;\n    }\n    // Wrapping in async even though we don't await anywhere in order\n    // to make sure errors are raised as promise rejections\n    async _openPopup(auth, provider, authType, eventId) {\n        var _a;\n        debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');\n        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n        return _open(auth, url, _generateEventId());\n    }\n    async _openRedirect(auth, provider, authType, eventId) {\n        await this._originValidation(auth);\n        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n        _setWindowLocation(url);\n        return new Promise(() => { });\n    }\n    _initialize(auth) {\n        const key = auth._key();\n        if (this.eventManagers[key]) {\n            const { manager, promise } = this.eventManagers[key];\n            if (manager) {\n                return Promise.resolve(manager);\n            }\n            else {\n                debugAssert(promise, 'If manager is not set, promise should be');\n                return promise;\n            }\n        }\n        const promise = this.initAndGetManager(auth);\n        this.eventManagers[key] = { promise };\n        // If the promise is rejected, the key should be removed so that the\n        // operation can be retried later.\n        promise.catch(() => {\n            delete this.eventManagers[key];\n        });\n        return promise;\n    }\n    async initAndGetManager(auth) {\n        const iframe = await _openIframe(auth);\n        const manager = new AuthEventManager(auth);\n        iframe.register('authEvent', (iframeEvent) => {\n            _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, \"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */);\n            // TODO: Consider splitting redirect and popup events earlier on\n            const handled = manager.onEvent(iframeEvent.authEvent);\n            return { status: handled ? \"ACK\" /* GapiOutcome.ACK */ : \"ERROR\" /* GapiOutcome.ERROR */ };\n        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n        this.eventManagers[auth._key()] = { manager };\n        this.iframes[auth._key()] = iframe;\n        return manager;\n    }\n    _isIframeWebStorageSupported(auth, cb) {\n        const iframe = this.iframes[auth._key()];\n        iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, result => {\n            var _a;\n            const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];\n            if (isSupported !== undefined) {\n                cb(!!isSupported);\n            }\n            _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n    }\n    _originValidation(auth) {\n        const key = auth._key();\n        if (!this.originValidationPromises[key]) {\n            this.originValidationPromises[key] = _validateOrigin(auth);\n        }\n        return this.originValidationPromises[key];\n    }\n    get _shouldInitProactively() {\n        // Mobile browsers and Safari need to optimistically initialize\n        return _isMobileBrowser() || _isSafari() || _isIOS();\n    }\n}\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for browser\n * based applications.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @public\n */\nconst browserPopupRedirectResolver = BrowserPopupRedirectResolver;\n\nclass MultiFactorAssertionImpl {\n    constructor(factorId) {\n        this.factorId = factorId;\n    }\n    _process(auth, session, displayName) {\n        switch (session.type) {\n            case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n                return this._finalizeEnroll(auth, session.credential, displayName);\n            case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n                return this._finalizeSignIn(auth, session.credential);\n            default:\n                return debugFail('unexpected MultiFactorSessionType');\n        }\n    }\n}\n\n/**\n * {@inheritdoc PhoneMultiFactorAssertion}\n *\n * @public\n */\nclass PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n    constructor(credential) {\n        super(\"phone\" /* FactorId.PHONE */);\n        this.credential = credential;\n    }\n    /** @internal */\n    static _fromCredential(credential) {\n        return new PhoneMultiFactorAssertionImpl(credential);\n    }\n    /** @internal */\n    _finalizeEnroll(auth, idToken, displayName) {\n        return finalizeEnrollPhoneMfa(auth, {\n            idToken,\n            displayName,\n            phoneVerificationInfo: this.credential._makeVerificationRequest()\n        });\n    }\n    /** @internal */\n    _finalizeSignIn(auth, mfaPendingCredential) {\n        return finalizeSignInPhoneMfa(auth, {\n            mfaPendingCredential,\n            phoneVerificationInfo: this.credential._makeVerificationRequest()\n        });\n    }\n}\n/**\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\n *\n * @public\n */\nclass PhoneMultiFactorGenerator {\n    constructor() { }\n    /**\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n     *\n     * @remarks\n     * This method does not work in a Node.js environment.\n     *\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}\n     */\n    static assertion(credential) {\n        return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n    }\n}\n/**\n * The identifier of the phone second factor: `phone`.\n */\nPhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * @public\n */\nclass TotpMultiFactorGenerator {\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n     * the TOTP (time-based one-time password) second factor.\n     * This assertion is used to complete enrollment in TOTP second factor.\n     *\n     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorUser.enroll}.\n     */\n    static assertionForEnrollment(secret, oneTimePassword) {\n        return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n    }\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n     * This assertion is used to complete signIn with TOTP as the second factor.\n     *\n     * @param enrollmentId identifies the enrolled TOTP second factor.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}.\n     */\n    static assertionForSignIn(enrollmentId, oneTimePassword) {\n        return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n    }\n    /**\n     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n     * Creates a TOTP secret as part of enrolling a TOTP second factor.\n     * Used for generating a QR code URL or inputting into a TOTP app.\n     * This method uses the auth instance corresponding to the user in the multiFactorSession.\n     *\n     * @param session The {@link MultiFactorSession} that the user is part of.\n     * @returns A promise to {@link TotpSecret}.\n     */\n    static async generateSecret(session) {\n        var _a;\n        const mfaSession = session;\n        _assert(typeof ((_a = mfaSession.user) === null || _a === void 0 ? void 0 : _a.auth) !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n            idToken: mfaSession.credential,\n            totpEnrollmentInfo: {}\n        });\n        return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n    }\n}\n/**\n * The identifier of the TOTP second factor: `totp`.\n */\nTotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\nclass TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n    constructor(otp, enrollmentId, secret) {\n        super(\"totp\" /* FactorId.TOTP */);\n        this.otp = otp;\n        this.enrollmentId = enrollmentId;\n        this.secret = secret;\n    }\n    /** @internal */\n    static _fromSecret(secret, otp) {\n        return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n    }\n    /** @internal */\n    static _fromEnrollmentId(enrollmentId, otp) {\n        return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n    }\n    /** @internal */\n    async _finalizeEnroll(auth, idToken, displayName) {\n        _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        return finalizeEnrollTotpMfa(auth, {\n            idToken,\n            displayName,\n            totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n        });\n    }\n    /** @internal */\n    async _finalizeSignIn(auth, mfaPendingCredential) {\n        _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        const totpVerificationInfo = { verificationCode: this.otp };\n        return finalizeSignInTotpMfa(auth, {\n            mfaPendingCredential,\n            mfaEnrollmentId: this.enrollmentId,\n            totpVerificationInfo\n        });\n    }\n}\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * Stores the shared secret key and other parameters to generate time-based OTPs.\n * Implements methods to retrieve the shared secret key and generate a QR code URL.\n * @public\n */\nclass TotpSecret {\n    // The public members are declared outside the constructor so the docs can be generated.\n    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n        this.sessionInfo = sessionInfo;\n        this.auth = auth;\n        this.secretKey = secretKey;\n        this.hashingAlgorithm = hashingAlgorithm;\n        this.codeLength = codeLength;\n        this.codeIntervalSeconds = codeIntervalSeconds;\n        this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n    }\n    /** @internal */\n    static _fromStartTotpMfaEnrollmentResponse(response, auth) {\n        return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n    }\n    /** @internal */\n    _makeTotpVerificationInfo(otp) {\n        return { sessionInfo: this.sessionInfo, verificationCode: otp };\n    }\n    /**\n     * Returns a QR code URL as described in\n     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n     *\n     * @param accountName the name of the account/app along with a user identifier.\n     * @param issuer issuer of the TOTP (likely the app name).\n     * @returns A QR code URL string.\n     */\n    generateQrCodeUrl(accountName, issuer) {\n        var _a;\n        let useDefaults = false;\n        if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n            useDefaults = true;\n        }\n        if (useDefaults) {\n            if (_isEmptyString(accountName)) {\n                accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || 'unknownuser';\n            }\n            if (_isEmptyString(issuer)) {\n                issuer = this.auth.name;\n            }\n        }\n        return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n    }\n}\n/** @internal */\nfunction _isEmptyString(input) {\n    return typeof input === 'undefined' || (input === null || input === void 0 ? void 0 : input.length) === 0;\n}\n\nvar name = \"@firebase/auth\";\nvar version = \"1.10.4\";\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AuthInterop {\n    constructor(auth) {\n        this.auth = auth;\n        this.internalListeners = new Map();\n    }\n    getUid() {\n        var _a;\n        this.assertAuthConfigured();\n        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;\n    }\n    async getToken(forceRefresh) {\n        this.assertAuthConfigured();\n        await this.auth._initializationPromise;\n        if (!this.auth.currentUser) {\n            return null;\n        }\n        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n        return { accessToken };\n    }\n    addAuthTokenListener(listener) {\n        this.assertAuthConfigured();\n        if (this.internalListeners.has(listener)) {\n            return;\n        }\n        const unsubscribe = this.auth.onIdTokenChanged(user => {\n            listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);\n        });\n        this.internalListeners.set(listener, unsubscribe);\n        this.updateProactiveRefresh();\n    }\n    removeAuthTokenListener(listener) {\n        this.assertAuthConfigured();\n        const unsubscribe = this.internalListeners.get(listener);\n        if (!unsubscribe) {\n            return;\n        }\n        this.internalListeners.delete(listener);\n        unsubscribe();\n        this.updateProactiveRefresh();\n    }\n    assertAuthConfigured() {\n        _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n    }\n    updateProactiveRefresh() {\n        if (this.internalListeners.size > 0) {\n            this.auth._startProactiveRefresh();\n        }\n        else {\n            this.auth._stopProactiveRefresh();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction getVersionForPlatform(clientPlatform) {\n    switch (clientPlatform) {\n        case \"Node\" /* ClientPlatform.NODE */:\n            return 'node';\n        case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n            return 'rn';\n        case \"Worker\" /* ClientPlatform.WORKER */:\n            return 'webworker';\n        case \"Cordova\" /* ClientPlatform.CORDOVA */:\n            return 'cordova';\n        case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\n            return 'web-extension';\n        default:\n            return undefined;\n    }\n}\n/** @internal */\nfunction registerAuth(clientPlatform) {\n    _registerComponent(new Component(\"auth\" /* _ComponentName.AUTH */, (container, { options: deps }) => {\n        const app = container.getProvider('app').getImmediate();\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\n        const appCheckServiceProvider = container.getProvider('app-check-internal');\n        const { apiKey, authDomain } = app.options;\n        _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, { appName: app.name });\n        const config = {\n            apiKey,\n            authDomain,\n            clientPlatform,\n            apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n            tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n            apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n            sdkClientVersion: _getClientVersion(clientPlatform)\n        };\n        const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n        _initializeAuthInstance(authInstance, deps);\n        return authInstance;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n        /**\n         * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n         * For why we do this, See go/firebase-next-auth-init\n         */\n        .setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n        /**\n         * Because all firebase products that depend on auth depend on auth-internal directly,\n         * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n         */\n        .setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n        const authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n        authInternalProvider.initialize();\n    }));\n    _registerComponent(new Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\n        const auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n        return (auth => new AuthInterop(auth))(auth);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n    registerVersion(name, version, getVersionForPlatform(clientPlatform));\n    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n    registerVersion(name, version, 'esm2017');\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\nconst authIdTokenMaxAge = getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\nlet lastPostedIdToken = null;\nconst mintCookieFactory = (url) => async (user) => {\n    const idTokenResult = user && (await user.getIdTokenResult());\n    const idTokenAge = idTokenResult &&\n        (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;\n    if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n        return;\n    }\n    // Specifically trip null => undefined when logged out, to delete any existing cookie\n    const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;\n    if (lastPostedIdToken === idToken) {\n        return;\n    }\n    lastPostedIdToken = idToken;\n    await fetch(url, {\n        method: idToken ? 'POST' : 'DELETE',\n        headers: idToken\n            ? {\n                'Authorization': `Bearer ${idToken}`\n            }\n            : {}\n    });\n};\n/**\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\n * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\n *\n * @param app - The Firebase App.\n *\n * @public\n */\nfunction getAuth(app = getApp()) {\n    const provider = _getProvider(app, 'auth');\n    if (provider.isInitialized()) {\n        return provider.getImmediate();\n    }\n    const auth = initializeAuth(app, {\n        popupRedirectResolver: browserPopupRedirectResolver,\n        persistence: [\n            indexedDBLocalPersistence,\n            browserLocalPersistence,\n            browserSessionPersistence\n        ]\n    });\n    const authTokenSyncPath = getExperimentalSetting('authTokenSyncURL');\n    // Only do the Cookie exchange in a secure context\n    if (authTokenSyncPath &&\n        typeof isSecureContext === 'boolean' &&\n        isSecureContext) {\n        // Don't allow urls (XSS possibility), only paths on the same domain\n        const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);\n        if (location.origin === authTokenSyncUrl.origin) {\n            const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());\n            beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));\n            onIdTokenChanged(auth, user => mintCookie(user));\n        }\n    }\n    const authEmulatorHost = getDefaultEmulatorHost('auth');\n    if (authEmulatorHost) {\n        connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n    }\n    else {\n        updateEmulatorBanner('Auth', false);\n    }\n    return auth;\n}\nfunction getScriptParentElement() {\n    var _a, _b;\n    return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;\n}\n_setExternalJSProvider({\n    loadJS(url) {\n        // TODO: consider adding timeout support & cancellation\n        return new Promise((resolve, reject) => {\n            const el = document.createElement('script');\n            el.setAttribute('src', url);\n            el.onload = resolve;\n            el.onerror = e => {\n                const error = _createError(\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n                error.customData = e;\n                reject(error);\n            };\n            el.type = 'text/javascript';\n            el.charset = 'UTF-8';\n            getScriptParentElement().appendChild(el);\n        });\n    },\n    gapiScript: 'https://apis.google.com/js/api.js',\n    recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',\n    recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='\n});\nregisterAuth(\"Browser\" /* ClientPlatform.BROWSER */);\n\nexport { SAMLAuthProvider as $, ActionCodeOperation as A, useDeviceLanguage as B, updateCurrentUser as C, signOut as D, revokeAccessToken as E, FactorId as F, deleteUser as G, debugErrorMap as H, prodErrorMap as I, AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY as J, initializeAuth as K, connectAuthEmulator as L, AuthCredential as M, EmailAuthCredential as N, OperationType as O, PhoneAuthProvider as P, OAuthCredential as Q, RecaptchaVerifier as R, SignInMethod as S, TotpMultiFactorGenerator as T, PhoneAuthCredential as U, inMemoryPersistence as V, EmailAuthProvider as W, FacebookAuthProvider as X, GoogleAuthProvider as Y, GithubAuthProvider as Z, OAuthProvider as _, browserCookiePersistence as a, TwitterAuthProvider as a0, signInAnonymously as a1, signInWithCredential as a2, linkWithCredential as a3, reauthenticateWithCredential as a4, signInWithCustomToken as a5, sendPasswordResetEmail as a6, confirmPasswordReset as a7, applyActionCode as a8, checkActionCode as a9, _getProjectConfig as aA, _isIOS7Or8 as aB, _createError as aC, _assert as aD, AuthEventManager as aE, _getInstance as aF, _persistenceKeyName as aG, _getRedirectResult as aH, _overrideRedirectResult as aI, _clearRedirectOutcomes as aJ, _castAuth as aK, UserImpl as aL, AuthImpl as aM, _getClientVersion as aN, _generateEventId as aO, AuthPopup as aP, FetchProvider as aQ, SAMLAuthCredential as aR, verifyPasswordResetCode as aa, createUserWithEmailAndPassword as ab, signInWithEmailAndPassword as ac, sendSignInLinkToEmail as ad, isSignInWithEmailLink as ae, signInWithEmailLink as af, fetchSignInMethodsForEmail as ag, sendEmailVerification as ah, verifyBeforeUpdateEmail as ai, ActionCodeURL as aj, parseActionCodeURL as ak, updateProfile as al, updateEmail as am, updatePassword as an, getIdToken as ao, getIdTokenResult as ap, unlink as aq, getAdditionalUserInfo as ar, reload as as, getMultiFactorResolver as at, multiFactor as au, debugAssert as av, _isIOS as aw, _isAndroid as ax, _fail as ay, _getRedirectUrl as az, browserLocalPersistence as b, browserSessionPersistence as c, signInWithPopup as d, linkWithPopup as e, reauthenticateWithPopup as f, signInWithRedirect as g, linkWithRedirect as h, indexedDBLocalPersistence as i, reauthenticateWithRedirect as j, getRedirectResult as k, linkWithPhoneNumber as l, browserPopupRedirectResolver as m, PhoneMultiFactorGenerator as n, TotpSecret as o, getAuth as p, ProviderId as q, reauthenticateWithPhoneNumber as r, signInWithPhoneNumber as s, setPersistence as t, updatePhoneNumber as u, initializeRecaptchaConfig as v, validatePassword as w, onIdTokenChanged as x, beforeAuthStateChanged as y, onAuthStateChanged as z };\n//# sourceMappingURL=index-683d5879.js.map\n"],"mappings":"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AAa,CAACC,UAAU,CAAC;IACxC,CAAC,CACD,OAAOprB,EAAE,EAAE;MACP,OAAO,IAAI;IACf;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwrB,kBAAkBA,CAACT,IAAI,EAAE;EAC9B,OAAOI,aAAa,CAACI,SAAS,CAACR,IAAI,CAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMU,iBAAiB,CAAC;EACpBpsB,WAAWA,CAAA,EAAG;IACV;AACR;AACA;IACQ,IAAI,CAAC6O,UAAU,GAAGud,iBAAiB,CAACC,WAAW;EACnD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,UAAUA,CAACllB,KAAK,EAAE6R,QAAQ,EAAE;IAC/B,OAAO+P,mBAAmB,CAACI,qBAAqB,CAAChiB,KAAK,EAAE6R,QAAQ,CAAC;EACrE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOsT,kBAAkBA,CAACnlB,KAAK,EAAEolB,SAAS,EAAE;IACxC,MAAMC,aAAa,GAAGX,aAAa,CAACI,SAAS,CAACM,SAAS,CAAC;IACxDpsB,OAAO,CAACqsB,aAAa,EAAE,gBAAgB,CAAC,kCAAkC,CAAC;IAC3E,OAAOzD,mBAAmB,CAACK,iBAAiB,CAACjiB,KAAK,EAAEqlB,aAAa,CAACvtB,IAAI,EAAEutB,aAAa,CAACnpB,QAAQ,CAAC;EACnG;AACJ;AACA;AACA;AACA;AACA8oB,iBAAiB,CAACC,WAAW,GAAG,UAAU,CAAC;AAC3C;AACA;AACA;AACAD,iBAAiB,CAACM,6BAA6B,GAAG,UAAU,CAAC;AAC7D;AACA;AACA;AACAN,iBAAiB,CAACO,yBAAyB,GAAG,WAAW,CAAC;;AAE1D;AACA;AAC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Onf,kBAAkB,CAACuK,IAAI,CAAC,CAACyV,cAAc,CAACb,WAAW,CAAC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqiB,yBAAyBA,CAACj3B,IAAI,EAAE;EACrC,OAAO8lB,0BAA0B,CAAC9lB,IAAI,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe+Z,gBAAgBA,CAAC/Z,IAAI,EAAEga,QAAQ,EAAE;EAC5C,MAAM9S,YAAY,GAAG8Z,SAAS,CAAChhB,IAAI,CAAC;EACpC,OAAOkH,YAAY,CAAC6S,gBAAgB,CAACC,QAAQ,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkF,gBAAgBA,CAAClf,IAAI,EAAE8e,cAAc,EAAErf,KAAK,EAAEsf,SAAS,EAAE;EAC9D,OAAOtpB,kBAAkB,CAACuK,IAAI,CAAC,CAACkf,gBAAgB,CAACJ,cAAc,EAAErf,KAAK,EAAEsf,SAAS,CAAC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,sBAAsBA,CAACjf,IAAI,EAAEiS,QAAQ,EAAEkG,OAAO,EAAE;EACrD,OAAO1iB,kBAAkB,CAACuK,IAAI,CAAC,CAACif,sBAAsB,CAAChN,QAAQ,EAAEkG,OAAO,CAAC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0G,kBAAkBA,CAAC7e,IAAI,EAAE8e,cAAc,EAAErf,KAAK,EAAEsf,SAAS,EAAE;EAChE,OAAOtpB,kBAAkB,CAACuK,IAAI,CAAC,CAAC6e,kBAAkB,CAACC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,UAAU;QACV2jB;MACJ;IACJ,CAAC,CAAC;IACF,OAAOljB,UAAU;EACrB,CAAC,MACI,IAAI,iBAAiB,IAAIA,UAAU,EAAE;IACtC,MAAMD,eAAe,GAAGC,UAAU,CAACG,eAAe,CAACJ,eAAe;IAClE,MAAMR,UAAU,GAAGS,UAAU,CACxBG,eAAe,CAACZ,UAAU;IAC/B,MAAM2jB,gBAAgB,GAAGljB,UAAU,CAACG,eAAe,CAAC+iB,gBAAgB;IACpEhoC,MAAM,CAACC,MAAM,CAAC6kB,UAAU,EAAE;MACtB,iBAAiB,EAAE;QACfE,cAAc,EAAE+iB,gBAAgB;QAChCljB,eAAe;QACfR,UAAU;QACV2jB;MACJ;IACJ,CAAC,CAAC;IACF,OAAOljB,UAAU;EACrB,CAAC,MACI;IACD9kB,MAAM,CAACC,MAAM,CAAC6kB,UAAU,EAAE;MAAE,gBAAgB,EAAEijB;IAAiB,CAAC,CAAC;IACjE,OAAOjjB,UAAU;EACrB;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmjB,iBAAiB,CAAC;EACpB;AACJ;AACA;AACA;EACItnC,WAAWA,CAACf,IAAI,EAAE;IACd;IACA,IAAI,CAAC4P,UAAU,GAAGy4B,iBAAiB,CAACjb,WAAW;IAC/C,IAAI,CAACptB,IAAI,GAAGghB,SAAS,CAAChhB,IAAI,CAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIsoC,iBAAiBA,CAACC,YAAY,EAAEC,mBAAmB,EAAE;IACjD,OAAO1B,kBAAkB,CAAC,IAAI,CAAC9mC,IAAI,EAAEuoC,YAAY,EAAE9yC,kBAAkB,CAAC+yC,mBAAmB,CAAC,CAAC;EAC/F;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOnb,UAAUA,CAACpB,cAAc,EAAEC,gBAAgB,EAAE;IAChD,OAAOH,mBAAmB,CAACC,iBAAiB,CAACC,cAAc,EAAEC,gBAAgB,CAAC;EAClF;EACA;AACJ;AACA;AACA;EACI,OAAOyC,oBAAoBA,CAACC,cAAc,EAAE;IACxC,MAAMvB,UAAU,GAAGuB,cAAc;IACjC,OAAOyZ,iBAAiB,CAACjZ,0BAA0B,CAAC/B,UAAU,CAAC;EACnE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOyB,mBAAmBA,CAACrvB,KAAK,EAAE;IAC9B,OAAO4oC,iBAAiB,CAACjZ,0BAA0B,CAAE3vB,KAAK,CAAC4I,UAAU,IAAI,CAAC,CAAE,CAAC;EACjF;EACA,OAAO+mB,0BAA0BA,CAAC;IAAE9mB,cAAc,EAAEymB;EAAc,CAAC,EAAE;IACjE,IAAI,CAACA,aAAa,EAAE;MAChB,OAAO,IAAI;IACf;IACA,MAAM;MAAE3mB,WAAW;MAAEsjB;IAAe,CAAC,GAAGqD,aAAa;IACrD,IAAI3mB,WAAW,IAAIsjB,cAAc,EAAE;MAC/B,OAAOK,mBAAmB,CAACI,kBAAkB,CAAC/jB,WAAW,EAAEsjB,cAAc,CAAC;IAC9E;IACA,OAAO,IAAI;EACf;AACJ;AACA;AACA2c,iBAAiB,CAACjb,WAAW,GAAG,OAAO,CAAC;AACxC;AACAib,iBAAiB,CAACI,oBAAoB,GAAG,OAAO,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}